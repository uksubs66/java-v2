/***************************************************************************************     
 *   Support_port:  This servlet will port a text file containing member & handicap info
 *                  to the database tables.  The text file is generated by the GHIN system.
 *
 *
 ***************************************************************************************
 */
    
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.sql.*;


// foretees imports
import com.foretees.common.FeedBack;
import com.foretees.member.Member;
import com.foretees.member.MemberHelper;


public class Support_port extends HttpServlet {
                           
 String rev = SystemUtils.REVLEVEL;       // Software Revision Level (Version)

 
 public void doPost(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
           
   resp.setContentType("text/html");
   PrintWriter out = resp.getWriter();
        
   Connection con = null;                 // init DB objects
   Statement stmt = null;
   PreparedStatement pstmt = null;
   PreparedStatement pstmt2 = null;
   ResultSet rs = null;
     
   HttpSession session = null; 

   //
   // Make sure user didn't enter illegally
   //
   session = req.getSession(false);  // Get user's session object (no new one)

   if (session == null) {

      invalidUser(out);            // Intruder - reject
      return;
   }

   String support = "support";

   String user = (String)session.getAttribute("user");   // get username

   if (!user.equals( support )) {

      invalidUser(out);            // Intruder - reject
      return;
   }

   //
   // Load the JDBC Driver and connect to DB
   //
   String club = (String)session.getAttribute("club");   // get club name

   try {
      con = dbConn.Connect(club);

   }
   catch (Exception exc) {

      // Error connecting to db....

      out.println("<HTML><HEAD><TITLE>DB Connection Error Received</TITLE></HEAD>");
      out.println("<BODY><CENTER><H3>DB Connection Error</H3>");
      out.println("<BR><BR>Unable to connect to the DB.");
      out.println("<BR>Exception: "+ exc.getMessage());
      out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>.");
      out.println("</CENTER></BODY></HTML>");
      return;
   }

   Member member = new Member();

   String line = "";
   String name = "";
   String name2 = "";
   String fname = "";
   String lname = "";
   String fname2 = "";
   String lname2 = "";
   String fname3 = "";
   String lname3 = "";
   String fname4 = "";
   String lname4 = "";
   String fname5 = "";
   String lname5 = "";
   String fname6 = "";
   String lname6 = "";
   String fname7 = "";
   String lname7 = "";
   String mi = "";
   String mi2 = "";
   String gender = "";
   String gender2 = "";
   String webid = "";
   String ghin = "";         // GHIN number
   String ghin2 = "";
   String mem_id = "";       // user name - 'local number' on ghin system
   String mNum = "";         // member # derived from local number
   String lastmNum = "";     
   String lastmship = "";     
   String holes = "";        // 9 or 18
   String u_hndcp = "";
   String c_hndcp = "";
   String password = "";
   String mship = "";    
   String mship2 = "";    
   String mtype = "";
   String mtype2 = "";
   String status = "";
   String phone = "";
   String phone2 = "";
   String bag = "";
   String bag2 = "";
   String posid = "";
   String email = "";      
   String email2 = "";
   String email3 = "";
   String wc = "";         
   String save = "";
   String temp = "";
   String temp2 = "";
   String temp3 = "";
   String temp4 = "";
   String temp5 = "";
   String temp6 = "";
   String temp7 = "";
   String dep = "";
   String ind = "";
   String prefix = "";
   String suffix = "";
   String suffix2 = "";
   String p1 = "";
   String p2 = "";
   float course = 0;
   float usga = 0;
   float u_hcap = 0;           // usga hndcp
   float c_hcap = 0;          // course hndcp
   int count = 0;
   int tokcount = 0;
   int i = 0;
   int birth = 0;
   int mm = 0;
   int dd = 0;
   int yy = 0;
   int length = 0;
   int dup = 0;
   int primary = 0;
   int emailOpt = 0;
   boolean replace = false;


   //
   //  There are 2 calls to this class:
   //
   //     submit=add - to add or update the member table 
   //
   //     submit=replace - to delete the member table and then replace it
   //
   /*
   if (req.getParameter("replace") != null) {

      replace = true;

      try {

         stmt = con.createStatement();        // create a statement

         stmt.executeUpdate("DELETE FROM member2b");          // delete all records from the table

         stmt.close();              // close the stmt

      }
      catch (Exception ignore) {

      }
   }
    */
   //
   //  read in the text file - must be named 'roster.csv'
   //
   boolean failed = false;
   FileReader fr = null;

   try {

      fr = new FileReader("//usr//local//tomcat//webapps//" +club+ "//roster.csv");

   }
   catch (Exception e1) {

      failed = true;
   }

   if (failed == true) {

      try {

         fr = new FileReader("c:\\java\\tomcat\\webapps\\" + club + "\\roster.csv");
         //fr = new FileReader("/Applications/apache-tomcat-5.5.26/webapps/" + club + "/roster.csv");
      }
      catch (Exception e2) {

         out.println("<HTML><HEAD><TITLE>Text File Port Failed</TITLE></HEAD>");
         out.println("<BODY><CENTER><H3>Text File Conversion Failed</H3>");
         out.println("<BR><BR>File Read Failed for  " + club);
         out.println("<BR><BR>Exception Received: "+ e2.getMessage());
         out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
         out.println("</CENTER></BODY></HTML>");
         return;
      }
   }
   
   
   try {

      BufferedReader bfrin = new BufferedReader(fr);
      line = new String();

      //
      while ((line = bfrin.readLine()) != null) {            // get one line of text

         count++;                                            // keep track of line #

         //  parse the line to gather all the info

         StringTokenizer tok = new StringTokenizer( line, "," );     // delimiters are comma

         tokcount = tok.countTokens();


         lname = tok.nextToken();
         fname = tok.nextToken();
//         mi = tok.nextToken();
         mNum = tok.nextToken();
         posid = tok.nextToken();
 //        mem_id = tok.nextToken();
//         mship = tok.nextToken();
//         temp = tok.nextToken();
//         mtype = tok.nextToken();
//         gender = tok.nextToken();
//         ghin = tok.nextToken();
//         temp = tok.nextToken();
//         webid = tok.nextToken();
       
         // make sure we have the essentials
         
         if (!lname.equals("?") && !lname.equals("") &&
             !fname.equals("?") && !fname.equals("")) {   
    
            mi = "";
//            gender = "";
            webid = "";
//            posid = mNum;
            ghin = "";
            bag = "";
            email = "";
            temp = "0";
            phone = "";
            wc = "";
            email2 = "";
            phone2 = "";
           
/*
 * *************************************************************************************
 * *************************************************************************************
 * ADD SPOUSE/DEPENDENT IMPORTS HERE IF NEEDED
 * *************************************************************************************
 * *************************************************************************************
*/

            mem_id = mNum;

                     
try {
            if (!lname.equals("?")) {

                PreparedStatement pstmt5 = null;
                PreparedStatement pstmt6 = null;
                ResultSet rs5 = null;

                String memid_new = mNum;
                String memid = posid;
                String fname_new = "";
                String mi_new = "";
                String lname_new = "";

                int count5 = 0;

                pstmt5 = con.prepareStatement("SELECT name_first, name_mi, name_last FROM member2b WHERE username = ?");
                pstmt5.clearParameters();
                pstmt5.setString(1, memid);

                rs5 = pstmt5.executeQuery();

                if (rs5.next()) {

                    fname_new = rs5.getString("name_first");
                    mi_new = rs5.getString("name_mi");
                    lname_new = rs5.getString("name_last");

                    pstmt6 = con.prepareStatement("UPDATE member2b SET username = ?, memNum = ? WHERE username = ?");
                    pstmt6.clearParameters();
                    pstmt6.setString(1, memid_new);
                    pstmt6.setString(2, mNum);
                    pstmt6.setString(3, memid);

                    count5 = pstmt6.executeUpdate();

                    if (count5 > 0) {

                         //
                         //  username or name changed - we must update other tables now
                         //
                         StringBuffer mem_name = new StringBuffer( fname_new );       // get the new first name

                         if (!mi_new.equals( "" )) {
                            mem_name.append(" " +mi_new);               // new mi
                         }
                         mem_name.append(" " +lname_new);               // new last name

                         String newName = mem_name.toString();          // convert to one string

                         Admin_editmem.updTeecurr(newName, memid_new, memid, con);      // update teecurr with new values

                         Admin_editmem.updTeepast(newName, memid_new, memid, con);      // update teepast with new values

                         Admin_editmem.updLreqs(newName, memid_new, memid, con);        // update lreqs with new values

                         Admin_editmem.updPartner(memid_new, memid, con);               // update partner with new values

                         Admin_editmem.updEvents(newName, memid_new, memid, con);        // update evntSignUp with new values

                         Admin_editmem.updLessons(newName, memid_new, memid, con);       // update the lesson books with new values
                    }

                    pstmt6.close();

                }

                pstmt5.close();
            }

} catch (Exception exc) {
    out.println("<br>Error - Primary: " + exc.getMessage());
}

try {
            if (!fname.equals("?")) {

                PreparedStatement pstmt5 = null;
                PreparedStatement pstmt6 = null;
                ResultSet rs5 = null;

                String memid_new = mNum + "A";
                String memid = posid + "A";
                String fname_new = "";
                String mi_new = "";
                String lname_new = "";

                int count5 = 0;

                pstmt5 = con.prepareStatement("SELECT name_first, name_mi, name_last FROM member2b WHERE username = ?");
                pstmt5.clearParameters();
                pstmt5.setString(1, memid);

                rs5 = pstmt5.executeQuery();

                if (rs5.next()) {

                    fname_new = rs5.getString("name_first");
                    mi_new = rs5.getString("name_mi");
                    lname_new = rs5.getString("name_last");

                    pstmt6 = con.prepareStatement("UPDATE member2b SET username = ?, memNum = ? WHERE username = ?");
                    pstmt6.clearParameters();
                    pstmt6.setString(1, memid_new);
                    pstmt6.setString(2, mNum);
                    pstmt6.setString(3, memid);

                    count5 = pstmt6.executeUpdate();

                    if (count5 > 0) {

                         //
                         //  username or name changed - we must update other tables now
                         //
                         StringBuffer mem_name = new StringBuffer( fname_new );       // get the new first name

                         if (!mi_new.equals( "" )) {
                            mem_name.append(" " +mi_new);               // new mi
                         }
                         mem_name.append(" " +lname_new);               // new last name

                         String newName = mem_name.toString();          // convert to one string

                         Admin_editmem.updTeecurr(newName, memid_new, memid, con);      // update teecurr with new values

                         Admin_editmem.updTeepast(newName, memid_new, memid, con);      // update teepast with new values

                         Admin_editmem.updLreqs(newName, memid_new, memid, con);        // update lreqs with new values

                         Admin_editmem.updPartner(memid_new, memid, con);               // update partner with new values

                         Admin_editmem.updEvents(newName, memid_new, memid, con);        // update evntSignUp with new values

                         Admin_editmem.updLessons(newName, memid_new, memid, con);       // update the lesson books with new values
                    }

                    pstmt6.close();

                }

                pstmt5.close();
            }
} catch (Exception exc) {
    out.println("<br>Error - Spouse: " + exc.getMessage());
}
         }
      }
   } catch (Exception ignore) {out.println("<br> Err: " + ignore.getMessage());}
 }   
                                 
 // *********************************************************
 //  Strip special chars from string
 // *********************************************************

 private final static String stripSP( String s ) {
      
      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length];

      int n = 0;
          
      for ( int i=0; i<ca.length; i++ ) {
         char oldLetter = ca[i];
         if ( oldLetter <= 'z' && oldLetter >= '#' ) {
            ca2[i] = oldLetter;
            n++;                 
         }
      } // end for
         
      char[] ca3 = new char [n];

      for ( int i=0; i<n; i++ ) {
         char oldLetter = ca2[i];
         ca3[i] = oldLetter;
      } // end for

      return new String (ca3);

 } // end stripSP


 // *********************************************************
 //  Strip letter 'A' from end of string
 // *********************************************************

 private final static String stripA( String s ) {

      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length - 1];


      for ( int i=0; i<ca.length; i++ ) {
         char oldLetter = ca[i];
         if ( oldLetter <= '9' ) {
            ca2[i] = oldLetter;
         }
      } // end for

      return new String (ca2);

 } // end stripA


 // *********************************************************
 //  Strip last letter from end of string
 // *********************************************************

 private final static String stripA2( String s ) {

      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length - 1];


      for ( int i=0; i<(ca.length-1); i++ ) {
         char oldLetter = ca[i];
         ca2[i] = oldLetter;
      } // end for

      return new String (ca2);

 } // end stripA2


 // *********************************************************
 //  Convert Upper case names to title case (Bob P...)
 // *********************************************************

 private final static String toTitleCase( String s ) {

      char[] ca = s.toCharArray();

      boolean changed = false;
      boolean capitalise = true;

      for ( int i=0; i<ca.length; i++ ) {
         char oldLetter = ca[i];
         if ( oldLetter <= '/'
              || ':' <= oldLetter && oldLetter <= '?'
              || ']' <= oldLetter && oldLetter <= '`' ) {
            /* whitespace, control chars or punctuation */
            /* Next normal char should be capitalized */
            capitalise = true;
         } else {
            char newLetter  = capitalise
                              ? Character.toUpperCase(oldLetter)
                              : Character.toLowerCase(oldLetter);
            ca[i] = newLetter;
            changed |= (newLetter != oldLetter);
            capitalise = false;
         }
      } // end for

      return new String (ca);

 } // end toTitleCase


 // *********************************************************
 //  Remove leading zeros in member id string
 // *********************************************************

 private final static String remZero( String s ) {


      int memid = 0;
      String newS = "";
           
      //
      //  convert string to int to drop leading zeros
      //
      try {
         memid = Integer.parseInt(s);
      }
      catch (NumberFormatException e) {
         // ignore error
      }

      newS = String.valueOf( memid );      // convert back to string

      return new String (newS);

 } // end remZero


 // *********************************************************
 //  Strip zero '0' from start of alphanumeric string
 // *********************************************************

 private final static String remZeroS( String s ) {

      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length - 1];


      for ( int i=0; i<ca2.length; i++ ) {
         ca2[i] = ca[i+1];
      } // end for

      return new String (ca2);

 } // end remZeroS


 // *********************************************************
 //  Return a string with the specified length from a possibly longer field
 // *********************************************************

 private final static String truncate( String s, int slength ) {

      char[] ca = s.toCharArray();
      char[] ca2 = new char [slength];


      if (slength < ca.length) {       // if string is longer than allowed

         for ( int i=0; i<slength; i++ ) {
            ca2[i] = ca[i];
         } // end for

      } else {

         return (s);
      }

      return new String (ca2);

 } // end truncate


 //************************************************************************
 //  logError - logs error messages to a text file in the club's folder
 //************************************************************************

 private void logError(String msg, String club) {

   String space = "  ";
   int fail = 0;

   try {
      //
      //  Dir path for the real server
      //
      PrintWriter fout1 = new PrintWriter(new FileWriter("//usr//local//tomcat//webapps//" +club+ "//error.txt", true));

      //
      //  Put header line in text file
      //
      fout1.print(new java.util.Date() + space + msg);
      fout1.println();      // output the line

      fout1.close();

   }
   catch (Exception e2) {

      fail = 1;
   }

   //
   //  if above failed, try local pc
   //
   if (fail != 0) {

      try {
         //
         //  dir path for test pc
         //
         PrintWriter fout = new PrintWriter(new FileWriter("c:\\java\\tomcat\\webapps\\" +club+ "\\error.txt", true));

         //
         //  Put header line in text file
         //
         fout.print(new java.util.Date() + space + msg);
         fout.println();      // output the line

         fout.close();
      }
      catch (Exception ignore) {
      }
   }
 }  // end of logError


 // *********************************************************
 // Illegal access by user - force user to login....
 // *********************************************************

 private void invalidUser(PrintWriter out) {

   out.println(SystemUtils.HeadTitle("Access Error - Redirect"));
   out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
   out.println("<hr width=\"40%\">");
   out.println("<BR><H2>Access Error</H2><BR>");
   out.println("<BR><BR>Sorry, you must login before attempting to access these features.<BR>");
   out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
   out.println("</CENTER></BODY></HTML>");

 }


 // *********************************************************
 // Database Error
 // *********************************************************

 private void dbError(PrintWriter out, Exception e) {

   out.println(SystemUtils.HeadTitle("Database Error"));
   out.println("<BODY><CENTER>");
   out.println("<BR><BR><H3>Database Access Error</H3>");
   out.println("<BR><BR>Sorry, we are unable to access the database at this time.");
   out.println("<BR><BR>" + e.getMessage());
   out.println("<BR><BR><a href=\"/" +rev+ "/support_main.htm\">Return</a>");
   out.println("</CENTER></BODY></HTML>");

 }
 
 /***********************************************************
 * Return appropriately formated birth value based on given input format
 * The passed runMode param corresponds to which formatting is being used.
 * The following runModes may be used:
 * 0: default: no birth provided, no action taken
 * 1: mmddyyyy or mddyyyy (i.e. 01121956 or 1121956)
 * 2: dd-Month-yy (i.e. 12-Jan-56)
 * 3: Month dd/yy (i.e. Jan 12/56)
 * 4: mm.dd.yy or mm/dd/yy or mm/dd/yyyy (i.e. 01.12.56 or 01/12/56 or 01/12/1956)
 ************************************************************/
 private int getBirthValue(String temp, int runMode){
     
     int birth = 0;
     int mm = 0;
     int dd = 0;
     int yy = 0;
     
     switch(runMode){
         case 1: 
              if (!temp.equals( "" )) {          // if birth provided
 
                birth = Integer.parseInt(temp);  // mddyyyy or mmddyyyy
 
                if (birth > 9999999) {         // if mmddyyyy
 
                   if (temp.startsWith( "10" )) {
 
                      mm = 10;
                      birth = birth - 10000000;    // strip month
 
                   } else {
 
                      if (temp.startsWith( "11" )) {
 
                         mm = 11;
                         birth = birth - 11000000;    // strip month
 
                      } else {
 
                         if (temp.startsWith( "12" )) {
 
                            mm = 12;
                            birth = birth - 12000000;    // strip month
 
                         } else {
 
                            birth = 0;
                         }
                      }
                   }
 
                } else {             // mddyyyy
 
                    char first = temp.charAt(0);

                    if (first >= 49 && first <= 57){    // first is a value 1-9 (ascii comparison)
                        mm = first;
                        int m = Integer.parseInt(String.valueOf(first));
                        m = m * 1000000;
                        birth -= m;
                    }
                }
 
                if (birth > 0) {                 // if still ok - get dd (now have ddyyyy)
 
                   dd = birth / 10000;
 
                   yy = birth - (dd * 10000);
 
                   birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
                }
             }

             break;
         case 2:
             if (!temp.equals( "" ) && !temp.equals( "0" )) {          // if birth provided

               StringTokenizer tok = new StringTokenizer( temp, " -" );

               if ( tok.countTokens() > 2 ) {                // "12-Jan-56" 

                  temp = tok.nextToken();
                  dd = Integer.parseInt(temp);

                  temp = tok.nextToken();

                  if (temp.startsWith( "Jan" )) {
                     mm = 1;
                  } else {
                   if (temp.startsWith( "Feb" )) {
                      mm = 2;
                   } else {
                    if (temp.startsWith( "Mar" )) {
                       mm = 3;
                    } else {
                     if (temp.startsWith( "Apr" )) {
                        mm = 4;
                     } else {
                      if (temp.startsWith( "May" )) {
                         mm = 5;
                      } else {
                       if (temp.startsWith( "Jun" )) {
                          mm = 6;
                       } else {
                        if (temp.startsWith( "Jul" )) {
                           mm = 7;
                        } else {
                         if (temp.startsWith( "Aug" )) {
                            mm = 8;
                         } else {
                          if (temp.startsWith( "Sep" )) {
                             mm = 9;
                          } else {
                           if (temp.startsWith( "Oct" )) {
                              mm = 10;
                           } else {
                            if (temp.startsWith( "Nov" )) {
                               mm = 11;
                            } else {
                             if (temp.startsWith( "Dec" )) {
                                mm = 12;
                             } else {
                                mm = Integer.parseInt(temp);
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                  temp = tok.nextToken();
                  yy = Integer.parseInt(temp);

                  if (yy < 10) {
                     yy = yy + 2000;
                  } else if (yy < 100) {
                     yy = yy + 1900;
                  }

                  birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
               }
            }
            break;
         case 3:
            if (!temp.equals( "" ) && !temp.equals( "0" )) {          // if birth provided

               StringTokenizer tok = new StringTokenizer( temp, " /" );

               if ( tok.countTokens() > 2 ) {                // "Jan 12/56" 

                  temp = tok.nextToken();

                  if (temp.startsWith( "Jan" )) {
                     mm = 1;
                  } else {
                   if (temp.startsWith( "Feb" )) {
                      mm = 2;
                   } else {
                    if (temp.startsWith( "Mar" )) {
                       mm = 3;
                    } else {
                     if (temp.startsWith( "Apr" )) {
                        mm = 4;
                     } else {
                      if (temp.startsWith( "May" )) {
                         mm = 5;
                      } else {
                       if (temp.startsWith( "Jun" )) {
                          mm = 6;
                       } else {
                        if (temp.startsWith( "Jul" )) {
                           mm = 7;
                        } else {
                         if (temp.startsWith( "Aug" )) {
                            mm = 8;
                         } else {
                          if (temp.startsWith( "Sep" )) {
                             mm = 9;
                          } else {
                           if (temp.startsWith( "Oct" )) {
                              mm = 10;
                           } else {
                            if (temp.startsWith( "Nov" )) {
                               mm = 11;
                            } else {
                             if (temp.startsWith( "Dec" )) {
                                mm = 12;
                             } else {
                                mm = Integer.parseInt(temp);
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                  temp = tok.nextToken();
                  dd = Integer.parseInt(temp);

                  temp = tok.nextToken();
                  yy = Integer.parseInt(temp);

                  if (yy < 10) {
                     yy = yy + 2000;
                  } else {
                     yy = yy + 1900;
                  }

                  birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
               }
            }
            break;
         case 4:
            if (!temp.equals( "" )) {          // if birth provided

               StringTokenizer tok = new StringTokenizer(temp, "." );   // mm.dd.yy
               if ( tok.countTokens() < 2 ) {
                   tok = new StringTokenizer(temp, "/");    // mm/dd/yy
               }
               if ( tok.countTokens() > 2 ) {

                  temp = tok.nextToken();
                  if (temp.length() == 1) {
                      temp = "0" + temp;
                  }
                  mm = Integer.parseInt(temp);
                  temp = tok.nextToken();
                  if (temp.length() == 1) {
                      temp = "0" + temp;
                  }
                  dd = Integer.parseInt(temp);
                  temp = tok.nextToken();
                  yy = Integer.parseInt(temp);

                  if (yy < 10) {
                     yy = yy + 2000;
                  } else if (yy < 100) {
                     yy = yy + 1900;
                  }

                  birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
               }
            }
            break;
         default:
            break;
     }
     
     return birth;     
 }

}
