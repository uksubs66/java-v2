/***************************************************************************************
 *   Proshop_sheet_pos:  This servlet will process the POS CHarge requests.
 *
 *     Called By:
 *                 Proshop_sheet
 *                 Proshop_oldsheets
 *                 SystemUtils (custom timer)
 *
 *
 *   created: 7/01/2011   Bob P.
 *
 *   last updated:       ******* keep this accurate *******
 *
 *     6/18/14  Add sales tax to the Jonas Generic Import POS.
 *     4/17/14  Add 'Jonas Generic' POS Interface.
 *     4/01/14  Tavistock CC (tavistockcc) - Updated fees for 2014 summer season, and added a separate winter/summer season setup for modes of transportation, as is used for their member/guest fees.
 *    11/26/13  Wait at least one minute before allowing user to send charges a second time. 
 *    11/18/13  Olympic Club (olyclub) - Updated member & guest charge rates so they display properly on printed receipts.
 *    11/01/13  Olympic Club (olyclub) - changed guest type "MNHGP w/guest" to "Member w/Guest" per club's request.
 *     9/26/13  Baltusrol GC (baltusrolgc) - Updated POS processing to change an existing mship.
 *     9/21/13  Check for null or empty values in buildIBS and buildJonas - prevent exceptions.
 *     9/12/13  Overlake G&CC (overlakegcc) - Added custom to not apply greens fees if a member has a subtype of "Past President" (case 2298).
 *     9/08/13  Olympic Club (olyclub) - Change where we get the date to calculate DST in buildLineNS.
 *     9/05/13  Olympic Club (olyclub) - Updated member twilight rate to a new item code.
 *     8/29/13  Olympic Club (olyclub) - Copy custom POS processing from CSG to NS as they are switching on 9/01/2013.  CSG custom can be removed after that.
 *     7/26/13  Austin CC (austincountryclub) - Added custom to use different item codes on weekdays and weekends/holidays. Applies for Social and Racquet mships only (case 2285).
 *     7/18/13  Troon CC (trooncc) - use the posid field instead of member number for Jonas POS.
 *     7/15/13  Austin CC (austincountryclub) - use the posid field instead of member number for Jonas POS.
 *     6/24/13  Add checks for null values in buildJonas to prevent exceptions.
 *     6/05/13  Add Event charges for TAI (Bald Peak to start with).
 *     6/05/13  Baltusrol GC (baltusrolgc) - Updated cost for 'Replay Guest' to be "$0".
 *     5/03/13  Phily Cricket Club (philcricket) - Updated custom pos charge codes to replace some outdated codes.
 *     3/20/13  Phily Cricket Club (philcricket) - Added guest POS item codes for the "Unaccompanied" guest type.
 *     2/28/13  IBS - Only process charges for members with a hyphen in their posid
 *     1/11/13  Phily Cricket Club (philcricket) - Replaced all St. Martins guest type item codes with "SMGUEST".
 *     1/10/13  Phily Cricket Club (philcricket) - Changed the "wkday" and "wkend" guest charges for the St. Martins course to be the same item code of "SMGUEST".
 *     1/04/13  Phily Cricket Club (philcricket) - Removed POS processing for 'Unaccweekday', 'Unaccwkend', and 'UnsponsUnacc' guest types.
 *    12/07/12  Tavistock CC (tavistockcc) - Added a set of winter season fees that will run from 11/1 to 3/31 each year.
 *    10/30/12  Olympic Club (olyclub) - Updated unaccompanied guest fees with new rates.
 *    10/18/12  Ironwood CC (ironwood) - Updated custom processing to strip off the guest type from the player name in a different manner.
 *    10/05/12  Olympic Club (olyclub) - Changed the 'MNHGP w/guest' and 'MHGP w/guest' guest fees back to $100 from $85 - club made a mistake.
 *    10/02/12  Olympic Club (olyclub) - Updated greens fees and guest fees as requested by the club.
 *     9/10/12  Olympic Club (olyclub) - Updated Ocean course fees now that this course is opening again.
 *     9/04/12  Mesa Verde (Jonas) - use the posid field instead of member number.
 *     9/04/12  Baltusrol CC (IBS) - change the fee for Twilight Guest types form $90 to $100.
 *     8/30/12  Wynstone CC (ClubSoft) - combine like charges in the POS file (use the quantity field).
 *     8/23/12  Ironwood CC (PCS) - Now they want to build the custom file on demand.  We still store the file on our server and they will scan the folder
 *                                  and grab the files when they show up.
 *     8/20/12  Ironwood CC (ironwood) - Added custom to plug in guest item code for when charges are being generated by the custom, automated timer job.
 *     7/18/12  Baltusrol GC (baltusrolgc) - Updated POS charge codes with missing cost for 'Replay Guest' gtypes.
 *     7/02/12  Philly Cricket Club (philcricket) - Updated POS custom to use their new mship types.
 *     6/22/12  Baltusrol GC (baltusrolgc) - Updated POS charge codes to add 'Links Privileges' mship and 'Replay Guest' guest type charges.
 *     6/18/12  St Clair CC (stclaircc) - Swapped which charge category "Spouse Golf 9" falls under.
 *     5/03/12  Updated Northstar processing to add the first letter of the coursename to the end of the filename to differentiate files built within the same second (automatic custom jobs).
 *     4/23/12  Phily Cricket Club (philcricket) - Updated charge codes with 9-hole guest charges.
 *     4/13/12  Tavistock CC (tavistockcc) - Fixed their issue of not getting set to the correct format in buildCSG.
 *     3/29/12  Phily Cricket Club (philcricket) - Updated charge codes with 2 additional unaccompanied guest categories.
 *     3/29/12  ClubSoft - Changed POS setup back to creating the file as a .csv instead of .txt.
 *     3/28/12  Tavistock CC (tavistockcc) - Updated POS charge codes.
 *     3/23/12  Olymipc Club (olyclub) - Updated printReceipt so that it waits until the course variable is populated to go out and get pos charges.
 *     3/19/12  Jonas - Belfair CC (belfair) - Added custom item codes for both members and guest types.
 *     3/14/12  Olympic Club (olyclub) - Updated charge codes in preparation for the US Open being held there this year.
 *     2/23/12  Tavistock CC - CSG I/F - use the 2nd format (like Atlanta) and customize the charges based on day of week.
 *     2/07/12  Added clearPOSFlags() method to clear all POS flags for a given day.  To be accessible from past tee sheets, and today's tee sheet.
 *     1/23/12  CSG I/F - Atlanta CC - use the posid extension to set the dependent value so charges go to specific family member.
 *    12/11/11  CSG I/F - add different file format for Atlanta CC (CSG changed the format).
 *    10/11/11  PCS Group - always use the value in the player position for the name and include unaccompanied guests.
 *     9/30/11  Olympic Club (olyclub) - Updated Member and Guest fees for their new fiscal year. 
 *     9/23/11  Add PCS Group POS Interface for Ironwood.
 *     8/07/11  Olympic Club (olyclub) - Updated custom processing to base Ocean Course twilight rate start time on DST and if it's before/after 9/01.
 *     8/01/11  Updated pos_hist insert statement to include the new date_time field.
 *     7/27/11  Phillyh Cricket - only charge 'No Golf' members on the St Martins course.
 *     7/20/11  Set the 'One Chit Per Res Num' option for all Jonas POS clubs.
 *     7/20/11  Allow for NorthStar POS charges to be built from a custom timer mechanism in SystemUtils (Philly Cricket case 2006).
 *     7/19/11  Add St. Martins course to custom for Philly Cricket.
 *     7/14/11  Add custom processing for the Olympic Club (olyclub) that will automatically create a charge 
 *              file each night and save it where the club can pull it.
 *
 ***************************************************************************************
 */

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.sql.*;
import java.lang.Math;
import java.math.BigDecimal; 
import java.math.RoundingMode;

// ForeTees imports
import com.foretees.common.Utilities;
import com.foretees.common.Connect;
import com.foretees.common.parmCourse;
import com.foretees.common.parmClub;
import com.foretees.common.getParms;
import com.foretees.common.parmPOS;
import com.foretees.common.getClub;
import com.foretees.common.verifyCustom;
import com.foretees.common.congressionalCustom;
import com.foretees.common.ProcessConstants;


public class Proshop_sheet_pos {

   static String rev = SystemUtils.REVLEVEL;       // Software Revision Level (Version)

   static int filen = 0;                             // Jonas filename (unique id)
   static int resn = 0;                              // Jonas reservation number (unique id)
   static int ttidn = 0;                             // Jonas tee time id (unique id)

   //
   //  Holidays
   //
   private static long Hdate1 = ProcessConstants.memDay;     // Memorial Day
   private static long Hdate2 = ProcessConstants.july4;      // 4th of July - Monday
   private static long Hdate2b = ProcessConstants.july4b;    // 4th of July - other
   private static long Hdate3 = ProcessConstants.laborDay;   // Labor Day
   private static long Hdate4 = ProcessConstants.gFriDay;    // Good Friday
   private static long Hdate5 = ProcessConstants.tgDay;      // Thanksgiving Day


   
 
 // ********************************************************************************************
 //  Process the POS charges for the day requested
 //
 //     Prompt the user to confirm this request, then build the charges and sent to POS.
 //
 //     Caller = 'today' from Proshop_sheet to process charges for today
 //              'old' from Proshop_oldsheets to process previous days' charges
 //
 // ********************************************************************************************

 public static void promptPOS2(String caller, HttpServletRequest req, HttpServletResponse resp, PrintWriter out, HttpSession session, Connection con)
         throws ServletException, IOException {

    
   PreparedStatement pstmt = null;
   PreparedStatement pstmt2s = null;

   ResultSet rs = null;

   String override = "";
   String index = "";
   String sdate = "";
   String stime = "";
   String sfb = "";

   long date = 0;

   int hr = 0;
   int min = 0;
   int sec = 0;

   //
   //  get the club name from the session
   //
   String club = (String)session.getAttribute("club");      // get club name
   String user = (String)session.getAttribute("user");      // get proshop user
   
   
   //
   //  parm block to hold the course parameters
   //
   //parmCourse parmc = new parmCourse();

   //
   //  parm block to hold the POS parameters
   //
   parmPOS parmp = new parmPOS();

   //
   //  Get the golf course name requested
   //
   String course = req.getParameter("course");
   

   if (req.getParameter("index") != null) {
      
      index = req.getParameter("index");         // get the index value of the day selected (if from Proshop_sheet)
   }

   if (req.getParameter("date") != null) {
      
      sdate = req.getParameter("date");         // get date (if from Proshop_oldsheets)
      
      date = Long.parseLong(sdate);
   }

   if (req.getParameter("time") != null) {

      stime = req.getParameter("time");         // get time if provided (CSG)
   }

   if (req.getParameter("fb") != null) {

      sfb = req.getParameter("fb");            // get fb if provided (CSG)
   }


   try {
      //
      //  Get the POS System Parameters for this Club & Course
      //
      getClub.getPOS(con, parmp, course);

   }
   catch (Exception e1) {

      resp.setContentType("text/html");                   // normal html response

      out.println(SystemUtils.HeadTitle("Proshop - POS Prompt"));
      out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
      out.println("<hr width=\"40%\">");
      out.println("<BR><H3>Database Access Error</H3>");
      out.println("<BR><BR>Error processing the POS Request");
      out.println("<BR><BR>Error: " + e1.getMessage());
      out.println("<BR><BR>");
      out.println("<form>");
      out.println("<input type=\"button\" style=\"text-decoration:underline; background:#8B8970\" Value=\"  Close  \" onClick='self.close()' alt=\"Close\">");
      out.println("</form>");
      out.println("</CENTER></BODY></HTML>");
      out.close();
      return;
   }

   //
   //  Check if first time here, or we should build the report
   //
   if (req.getParameter("POScontinue") == null) {

      //  First time here - prompt to continue

      resp.setContentType("text/html");                   // normal html response

      out.println(SystemUtils.HeadTitle("Proshop - POS Prompt"));
      out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
      out.println("<hr width=\"40%\">");
      if (parmp.posType.equals( "PCS Group" )) {
         out.println("<BR><H3>Send Player Data Request</H3>");
         out.println("You have requested that all current Player Information be sent to the PCS system.<br><br>");
         out.println("Only players that have been 'Checked In' will be transferred.");
      } else {
         out.println("<BR><H3>Send POS Charges Request</H3>");
         out.println("You have requested that all current POS related charges be sent to the POS system.<br><br>");
         out.println("Only charges for players that have been 'Checked In' will be transferred.");
      }
      out.println("<BR><BR><strong>Please be patient</strong> as this could take several minutes.");
      out.println("<BR><BR>Would you like to proceed with this process?");
      out.println("<BR><BR>");
      out.println("<font size=\"2\">");

      if (parmp.posType.startsWith( "Jonas" )) {

         out.println("<a href=\"javascript:void(0)\" onClick=\"window.open ('/" +rev+ "/proshop_help_sheet_jonas.htm', 'newwindow', 'height=540, width=500, toolbar=no, menubar=no, scrollbars=auto, resizable=no, location=no directories=no, status=no')\">");
         out.println("Click Here For Instructions</a>");
         out.println("<BR><BR>");
      }

      if (parmp.posType.equals( "Abacus21" )) {

         out.println("<a href=\"javascript:void(0)\" onClick=\"window.open ('/" +rev+ "/proshop_help_sheet_abacus21.htm', 'newwindow', 'height=540, width=500, toolbar=no, menubar=no, scrollbars=auto, resizable=no, location=no directories=no, status=no')\">");
         out.println("Click Here For Instructions</a>");
         out.println("<BR><BR>");
      }

      if (parmp.posType.equals( "ClubSystems Group" )) {

         out.println("<a href=\"javascript:void(0)\" onClick=\"window.open ('/" +rev+ "/proshop_help_sheet_csg.htm', 'newwindow', 'height=540, width=560, toolbar=no, menubar=no, scrollbars=auto, resizable=no, location=no directories=no, status=no')\">");
         out.println("Click Here For Instructions</a>");
         out.println("<BR><BR>");
      }

      if (parmp.posType.equals( "TAI Club Management" )) {

         out.println("<a href=\"javascript:void(0)\" onClick=\"window.open ('/" +rev+ "/proshop_help_sheet_tai.htm', 'newwindow', 'height=540, width=560, toolbar=no, menubar=no, scrollbars=auto, resizable=no, location=no directories=no, status=no')\">");
         out.println("Click Here For Instructions</a>");
         out.println("<BR><BR>");
      }

      if (parmp.posType.equals( "IBS" )) {

         out.println("<a href=\"javascript:void(0)\" onClick=\"window.open ('/" +rev+ "/proshop_help_sheet_ibs.htm', 'newwindow', 'height=540, width=560, toolbar=no, menubar=no, scrollbars=auto, resizable=no, location=no directories=no, status=no')\">");
         out.println("Click Here For Instructions</a>");
         out.println("<BR><BR>");
      }

      if (parmp.posType.equals( "ClubSoft" )) {

         out.println("<a href=\"javascript:void(0)\" onClick=\"window.open ('/" +rev+ "/proshop_help_sheet_clubsoft.htm', 'newwindow', 'height=540, width=560, toolbar=no, menubar=no, scrollbars=auto, resizable=no, location=no directories=no, status=no')\">");
         out.println("Click Here For Instructions</a>");
         out.println("<BR><BR>");
      }


      if (caller.equals("today")) {
         
         out.println("<form method=\"post\" action=\"Proshop_sheet\" id=frmPOS>");
         out.println("<input type=\"hidden\" name=\"print\" value=\"pos\">");
         out.println("<input type=\"hidden\" name=\"index\" value=\"" + index + "\">");    // used by Proshop_sheet
         
      } else {
         
         out.println("<form method=\"post\" action=\"Proshop_oldsheets\" id=frmPOS>");
         out.println("<input type=\"hidden\" name=\"sendpos\" value=\"yes\">");
         out.println("<input type=\"hidden\" name=\"date\" value=\"" + date + "\">");      // used by Proshop_oldsheets
      }

      out.println("<b>NOTE:</b> If you send the charges, please wait until the transfer is complete before returning to the tee sheet.");
      out.println("<BR><BR>");

      out.println("<input type=\"hidden\" name=\"POScontinue\" value=\"yes\">");
      out.println("<input type=\"hidden\" name=\"course\" value=\"" + course + "\">");
      out.println("<input type=\"hidden\" name=\"time\" value=\"" + stime + "\">");
      out.println("<input type=\"hidden\" name=\"fb\" value=\"" + sfb + "\">");
      // out.println("<input type=\"hidden\" name=\"jump\" value=\"0\">");
      // out.println("<input type=\"button\" name=\"btnSubmit\" value=\"Yes - Continue\" name=\"return\" style=\"text-decoration:underline; background:#8B8970\" onclick=\"submitForm()\">");
      out.println("<input type=\"submit\" name=\"btnSubmit\" value=\"Yes - Continue\" name=\"return\" style=\"text-decoration:underline; background:#8B8970\">");
      out.println("</font><br><br>");

      out.println("<input type=\"button\" style=\"text-decoration:underline; background:#8B8970\" name=\"btnClose\" value=\"Return\" onclick=\"self.close()\" alt=\"Close\">");
      out.println("</form></CENTER></BODY></HTML>");
      out.close();
      return;
   }

   
   
   //
   //   User has requested that we process and send the charges.
   //
   //
   //  Check for the override parm - if user wants to override the busy warning
   //
   if (req.getParameter("override") != null) {

      override = req.getParameter("override");  
   }

   //
   //  Get today's date
   //
   Calendar cal = new GregorianCalendar();       // get todays date

   int year = cal.get(Calendar.YEAR);
   int month = cal.get(Calendar.MONTH) +1;
   int daynum = cal.get(Calendar.DAY_OF_MONTH);
   hr = cal.get(Calendar.HOUR_OF_DAY);           // 24 hr clock (0 - 23)
   min = cal.get(Calendar.MINUTE);
   sec = cal.get(Calendar.SECOND);

   long today_date = year * 10000;                     // create a date field of yyyymmdd
   today_date = today_date + (month * 100);
   today_date = today_date + daynum;                   // date = yyyymmdd

   if (date == 0) {

      date = today_date;       // if not from Proshop_oldsheets, then use today's date

   } else {                    // use the date passed from oldsheets

      year = (int)date / 10000;       
      month = (int)(date - (year * 10000)) / 100;
      daynum = (int)date - ((year * 10000) + (month * 100));                 
   }

   //
   //   Check if this action is already in-progress and active (prevent duplicate sends)
   //
   String prouser = "";
   int pos_progress_id = 0;
   int prog_date = (int)today_date;
   int start_time = 0;
   int end_time = (hr * 10000) + (min * 100) + sec;     // use current time for end time

   try {

      pstmt2s = con.prepareStatement (
         "SELECT pos_progress_id, start_time, user " +
         "FROM pos_progress WHERE date = ? AND in_progress = 1");  // send pos already in progress today?

      pstmt2s.clearParameters();       
      pstmt2s.setInt(1, prog_date);         
      rs = pstmt2s.executeQuery();      // execute the prepared stmt

      if (rs.next()) {

         pos_progress_id = rs.getInt("pos_progress_id");     
         start_time = rs.getInt("start_time");     
         prouser = rs.getString("user"); 
      }
      pstmt2s.close();

      if (start_time > 0) {    // if send already in progress

         //  Send in Progress - see if user selected the override option

         if (override.equals("yes")) {           // if override requested

            //   end the send that was in process
            pstmt = con.prepareStatement (
               "UPDATE pos_progress SET end_time = ?, in_progress = 0, override = 1 " +
               "WHERE pos_progress_id = ?");

            pstmt.clearParameters();          
            pstmt.setInt(1, end_time);
            pstmt.setInt(2, pos_progress_id);
            pstmt.executeUpdate();              // end the previous send and flag as over-ridden

            pstmt.close();

         } else {

            //  send already in progress - ask if user wants to override it
            
            boolean sufficientWait = checkWaitTime(start_time, end_time);            

            hr = start_time / 10000;        // break down the start time for message
            min = (start_time - (hr * 10000)) / 100;
            sec = start_time - ((hr * 10000) + (min * 100));  

            start_time = SystemUtils.adjustTime(con, ((hr * 100) + min));   // adjust the time for time zone

            hr = start_time / 100;             // get adjusted hr & min
            min = start_time - (hr * 100);

            resp.setContentType("text/html");                   // normal html response

            out.println(SystemUtils.HeadTitle("Proshop - POS Prompt"));
            out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
            out.println("<hr width=\"40%\">");
            out.println("<BR><H3>Send POS Charges Request</H3>");
            out.println("<BR><strong>WARNING:</strong> A POS transfer is already in progress!");
            out.println("<BR><BR>Last transfer began at " +hr+ ":" +SystemUtils.ensureDoubleDigit(min)+ ":" +SystemUtils.ensureDoubleDigit(sec));
            out.println("<BR>Initiated by: " +user);
            out.println("<BR><BR>Starting another transfer could result in duplicate charges.");
            
            if (sufficientWait == true) {          // if user waited at least one minute
               
               out.println("<BR><BR>Are you sure you would like to start the process again?");
               out.println("<BR><BR>");
               out.println("<font size=\"2\">");

               if (caller.equals("today")) {

                  out.println("<form method=\"post\" action=\"Proshop_sheet\" id=frmPOS>");

               } else {

                  out.println("<form method=\"post\" action=\"Proshop_oldsheets\" id=frmPOS>");
               }

               out.println("<input type=\"hidden\" name=\"override\" value=\"yes\">");        // indicate an override request
               out.println("<input type=\"hidden\" name=\"POScontinue\" value=\"yes\">");
               out.println("<input type=\"hidden\" name=\"print\" value=\"pos\">");
               out.println("<input type=\"hidden\" name=\"index\" value=\"" + index + "\">");
               out.println("<input type=\"hidden\" name=\"course\" value=\"" + course + "\">");
               out.println("<input type=\"hidden\" name=\"time\" value=\"" + stime + "\">");
               out.println("<input type=\"hidden\" name=\"fb\" value=\"" + sfb + "\">");
               out.println("<input type=\"submit\" name=\"btnSubmit\" value=\"YES - Continue\" name=\"return\" style=\"text-decoration:underline; background:#8B8970\">");
               out.println("</font><br><br>");
               
            } else {
                             
               out.println("<BR><BR>You must wait at least one minute between attemtps.");
               out.println("<BR>Please return and try again after a short wait.");
               out.println("<BR><BR>");
            }

            out.println("<input type=\"button\" style=\"text-decoration:underline; background:#8B8970\" name=\"btnClose\" value=\"Return to Tee Sheet\" onclick=\"self.close()\" alt=\"Close\">");
            out.println("</form></CENTER></BODY></HTML>");
            out.close();
            return;
         }
      }

      //  Start a new send process - track it

      start_time = (hr * 10000) + (min * 100) + sec;     // use current time for start time

      pstmt = con.prepareStatement("" +
              "INSERT INTO pos_progress " +
                  "(date, start_time, end_time, in_progress, override, user) " +
              "VALUES (?,?,0,1,0,?)");

      pstmt.clearParameters();
      pstmt.setInt(1, prog_date);
      pstmt.setInt(2, start_time);
      pstmt.setString(3, user);
      pstmt.executeUpdate();         // indicate Send is in Progress

   }
   catch (Exception e1) {

      String errorMsg1 = "Error in Proshop_sheet_pos.promptPOS2 (busy check): ";
      errorMsg1 = errorMsg1 + e1.getMessage();                                // build error msg
      SystemUtils.logError(errorMsg1);                                       // log it
   }


   //
   //  Check for any charges and send them to the POS 
   //
   sendCharges(caller, club, course, user, date, resp, out, con);

 }                   // end of promptPOS2


 
 // ********************************************************************************************
 //  Check for POS charges and send them to the POS
 //
 //     Caller = 'today' from Proshop_sheet to process charges for today
 //              'old' from Proshop_oldsheets to process previous days' charges
 //              'timer' from SystemUtils timer processing for custom 
 //
 // ********************************************************************************************

 public static void sendCharges(String caller, String club, String course, String user, long date, 
                                HttpServletResponse resp, PrintWriter out, Connection con) {


   Statement stmt = null;
   PreparedStatement pstmt = null;
   PreparedStatement pstmt2s = null;

   ResultSet rs = null;

   String player1 = "";
   String player2 = "";
   String player3 = "";
   String player4 = "";
   String player5 = "";
   String user1 = "";
   String user2 = "";
   String user3 = "";
   String user4 = "";
   String user5 = "";
   String p1cw = "";
   String p2cw = "";
   String p3cw = "";
   String p4cw = "";
   String p5cw = "";
   String userg1 = "";
   String userg2 = "";
   String userg3 = "";
   String userg4 = "";
   String userg5 = "";
   String mNum1 = "";
   String mNum2 = "";
   String mNum3 = "";
   String mNum4 = "";
   String mNum5 = "";
  
   String filename = "";
   String temp = "";
   String day = "";
   String ampm = "";
   String event = "";

   int guest = 0;
   int p91 = 0;
   int p92 = 0;
   int p93 = 0;
   int p94 = 0;
   int p95 = 0;
   int show1 = 0;
   int show2 = 0;
   int show3 = 0;
   int show4 = 0;
   int show5 = 0;
   int pos1 = 0;
   int pos2 = 0;
   int pos3 = 0;
   int pos4 = 0;
   int pos5 = 0;
   int i = 0;
   //int p = 0;
   int ttid = 0;
   int fb = 0;
   int time = 0;
   int time2 = 0;
   int quantity = 0;
   int done = 0;
   int masterDone = 0;
   int singleDone = 0;

   long resnum = 0;
   long resnum2 = 0;
   long ttidnum = 0;
   long ttidnum2 = 0;

   double salestax = 0;
   double salestaxCurr = 0;
   
   boolean IBSerror = false;
   boolean JonasResnumOpt = false;

   //
   //  parm block to hold the club parameters
   //
   parmClub parm = new parmClub(0, con);

   //
   //  parm block to hold the POS parameters
   //
   parmPOS parmp = new parmPOS();

   try {
      //
      // Get the Guest Types from the club db
      //
      getClub.getParms(con, parm);        // get the club parms

      //
      //  Get the POS System Parameters for this Club & Course
      //
      getClub.getPOS(con, parmp, course);

   }
   catch (Exception e1) {
   }

   //
   //   Save club name in parmp
   //
   parmp.club = club;

   
   //
   //  See if this club wants to combine like charges in the file (use the quantity field) - currently just ClubSoft
   //
   if (club.equals("wynstone") || club.startsWith("demo")) {          // if Wynstone CC
       
       parmp.combineCharges = true;
   }
   
   
      
   //
   //  See if club wants to use the Jonas resnum option to increment the resnum for each member  - chits
   //     
   //  NOTE:  This requires that the corresponding option be set in Jonas ('One Chit per Reservation Number' in 'Tee Time Reservations' options)
   //
  // if ((club.equals( "engineerscc" ) || club.equals( "metropoliscc" ) || club.equals( "sawgrass" )) && parmp.posType.equals( "Jonas" )) {   
   if (parmp.posType.startsWith( "Jonas" )) {   

      JonasResnumOpt = true;      // do this for ALL Jonas and Jonas Generic clubs 
   }


   //
   //  Break down the date provided
   //
   int year = (int)date / 10000;       
   int month = (int)(date - (year * 10000)) / 100;
   int daynum = (int)date - ((year * 10000) + (month * 100));   
      
   //
   //  Get the current time
   //
   Calendar cal = new GregorianCalendar();       // get current date/time
   int hr = cal.get(Calendar.HOUR_OF_DAY);       // 24 hr clock (0 - 23)
   int min = cal.get(Calendar.MINUTE);
   int sec = cal.get(Calendar.SECOND);


   if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" ) || parmp.posType.equals( "TAI Club Management" ) ||
       parmp.posType.equals( "ClubSoft" )) {

      //
      //  Set the values for the Reservation Number and Tee Time Id fields (yymmddnn, where nn changes)
      //
      resnum2 = date - 20000000;                     // resnum = yymmdd
      resnum = resnum2 * 1000;                        // shift over for nnn (1 - 990)
      ttidnum = resnum;                             // ditto
      ttidnum2 = resnum;                            // ditto - save this portion

      resn++;                                       // get the next res #
      ttidn++;                                      // get the next tee time num

      if (resn > 990) {
         resn = 1;          // init
      }
      if (ttidn > 990) {
         ttidn = 1;          // init
      }

      resnum += resn;                               // create new res num
      ttidnum += ttidn;                             // create new tee time id num

      parmp.sdate = String.valueOf(date);           // save string value of date for file

      filen++;                                                     // get next unique id value
      if (filen > 999) {
         filen = 1;         // reset
      }

      //
      // establish an ASCII filename
      //
      if (parmp.posType.equals( "Jonas Generic" )) {
         
         parmp.sdate = year+ "/" +month+ "/" +daynum;   //  yyyy/mm/dd
         
         filename = String.valueOf( resnum2 );           // yymmdd
         temp = String.valueOf( filen );                 // nnn

         filename = "FT-" + filename + "-" + temp + ".CSV";  // FT-yymmdd-nnn.CSV (where nnn = sequential value)

      } else if (club.equals( "medinahcc" ) && parmp.posType.equals( "Abacus21" )) {    // if Medinah and Abacus21

         filename = String.valueOf( resnum2 );           // yymmdd
         temp = String.valueOf( filen );                 // nnn

         if (course.endsWith( "1" )) {                    // file name based on course (No 1, No 2, or No 3)

            filename = "C1-" + filename + "-" + temp + ".ASC";  // C1-yymmdd-nnn.ASC (where nnn = sequential value)

         } else {

            if (course.endsWith( "2" )) {

               filename = "C2-" + filename + "-" + temp + ".ASC";  // C2-yymmdd-nnn.ASC (where nnn = sequential value)

            } else {

               filename = "C3-" + filename + "-" + temp + ".ASC";  // C3-yymmdd-nnn.ASC (where nnn = sequential value)
            }
         }

      } else {     // NOT Medinah & Abacus

         filename = String.valueOf( filen );

         if (parmp.posType.equals( "ClubSoft" ) || parmp.posType.equals( "Jonas Generic" )) {

            filename = "ForeTees" + filename + ".CSV";         // name = ForeTeesnn.CSV
        //    filename = "ForeTees" + filename + ".ASC";         // changed for testing to fix a problem where leading zeros were stripped
        //    filename = "ForeTees" + filename + ".TXT";         // name = ForeTeesnn.TXT - changed per Club Soft's request

         } else {

            filename = "ForeTees" + filename + ".ASC";         // name = ForeTeesnn.ASC
         }
      }

      if (parmp.posType.equals( "TAI Club Management" ) || parmp.posType.equals( "ClubSoft" )) {

         if (daynum < 10) {

            parmp.sdate = String.valueOf(month) + "/0" + String.valueOf(daynum) + "/" + String.valueOf(year);  // date for file

         } else {

            parmp.sdate = String.valueOf(month) + "/" + String.valueOf(daynum) + "/" + String.valueOf(year);  // date for file
         }
      }


   } else if (parmp.posType.equals( "ClubSystems Group" )) {    // if CSG 

      parmp.count = 0;                 // init record counter

      parmp.sdate = String.valueOf((date-20000000));              // yymmdd

      //
      //  File name for new interface (AR Uload) is arupload.mas
      //
      filename = "arupload.mas";         // MUST use this name
      
      if (!caller.equals("timer")) {     // if not from custom timer (Olympic Club)

         //
         //  Set the output type to Text File - must do this now!!
         //
         // resp.setContentType("text/plain");                         // text file - this casues some browsers to add '.txt' to the end of the file name!!!!!!!!
         resp.setContentType("application/octet-stream");                   // bit stream - seems to work for all browsers tested (IE 6, 7, 8 & 9, Firefox, Safari)
         resp.setHeader("Content-Disposition", "attachment;filename=\"" +filename+ "\"");         // default file name
      }


   } else if (parmp.posType.equals( "IBS" )) {    // if IBS, all we need is the date

      parmp.count = 0;                 // init record counter

      parmp.sdate = String.valueOf(year + "-" + month + "-" + daynum);     // yyyy-mm-dd

   } else if (parmp.posType.equals( "PCS Group" )) {    // if PCS just set the filename

      if (!caller.equals("timer") && !club.equals("ironwood")) {     // if not from custom timer (Ironwood)

         //
         //  establish an ASCII filename       (foretees-yyyymmdd-hhmmss.csv)
         //
         String tempNS = "foretees-" + String.valueOf(year);

         if (month < 10) {

            tempNS += "0" + String.valueOf(month);

         } else {

            tempNS += String.valueOf(month);
         }

         if (daynum < 10) {

            tempNS += "0" + String.valueOf(daynum);

         } else {

            tempNS += String.valueOf(daynum);
         }

         if (hr < 10) {

            tempNS += "-0" + String.valueOf(hr);

         } else {

            tempNS += "-" + String.valueOf(hr);
         }

         if (min < 10) {

            tempNS += "0" + String.valueOf(min);

         } else {

            tempNS += String.valueOf(min);
         }

         if (sec < 10) {

            tempNS += "0" + String.valueOf(sec) + ".csv";

         } else {

            tempNS += String.valueOf(sec) + ".csv";
         }

         resp.setContentType("text/csv");                         // text file
         resp.setHeader("Content-Disposition", "attachment;filename=\"" +tempNS+ "\"");         // default file name
      }

   } else {     // NorthStar and maybe others

      parmp.count = 0;                 // init record counter
      
      filename = getFileName(date, course, parmp);    // build the file name (clubname-mmddyyyy-hhmmss.txt)

   }

   masterDone = 0;             // init master done flag

   //
   // create text file (one row per charge)
   //
   //  Get today's tee sheet and process the players one at a time.
   //
   try {

      String last_user = "";            // User assciated with the last charges sent
      String last_mNum = "";            // mNum associated with the last charge
      String sqlTable = "teecurr2";     // default to use teecurr2 (today)

      if (caller.equals("old")) {        // if called from Proshop_oldsheets

         sqlTable = "teepast2";       
      }       

      pstmt2s = con.prepareStatement (
         "SELECT * " +
         "FROM " +sqlTable+ " WHERE date = ? AND courseName = ? AND " +
         "((show1 = 1 AND pos1 = 0) OR (show2 = 1 AND pos2 = 0) OR (show3 = 1 AND pos3 = 0) OR (show4 = 1 AND pos4 = 0) OR (show5 = 1 AND pos5 = 0)) " +
         "ORDER BY time, fb");

      pstmt2s.clearParameters();        // clear the parms
      pstmt2s.setLong(1, date);
      pstmt2s.setString(2, course);


      rs = pstmt2s.executeQuery();      // execute the prepared stmt

      while (rs.next()) {

         ttid = rs.getInt("teecurr_id");       // get tid for CSG
         day = rs.getString("day");
         hr = rs.getInt("hr");
         min = rs.getInt("min");
         time = rs.getInt("time");
         player1 = rs.getString("player1");
         player2 = rs.getString("player2");
         player3 = rs.getString("player3");
         player4 = rs.getString("player4");
         user1 = rs.getString("username1");
         user2 = rs.getString("username2");
         user3 = rs.getString("username3");
         user4 = rs.getString("username4");
         p1cw = rs.getString("p1cw");
         p2cw = rs.getString("p2cw");
         p3cw = rs.getString("p3cw");
         p4cw = rs.getString("p4cw");
         show1 = rs.getInt("show1");
         show2 = rs.getInt("show2");
         show3 = rs.getInt("show3");
         show4 = rs.getInt("show4");
         fb = rs.getInt("fb");
         player5 = rs.getString("player5");
         user5 = rs.getString("username5");
         p5cw = rs.getString("p5cw");
         show5 = rs.getInt("show5");
         userg1 = rs.getString("userg1");
         userg2 = rs.getString("userg2");
         userg3 = rs.getString("userg3");
         userg4 = rs.getString("userg4");
         userg5 = rs.getString("userg5");
         mNum1 = rs.getString("mNum1");
         mNum2 = rs.getString("mNum2");
         mNum3 = rs.getString("mNum3");
         mNum4 = rs.getString("mNum4");
         mNum5 = rs.getString("mNum5");
         p91 = rs.getInt("p91");
         p92 = rs.getInt("p92");
         p93 = rs.getInt("p93");
         p94 = rs.getInt("p94");
         p95 = rs.getInt("p95");
         pos1 = rs.getInt("pos1");
         pos2 = rs.getInt("pos2");
         pos3 = rs.getInt("pos3");
         pos4 = rs.getInt("pos4");
         pos5 = rs.getInt("pos5");
         event = rs.getString("event");

         done = 0;            // init done some flag for this tee time
         singleDone = 0;      // init single tee time done flag

         parmp.day = day;       // save tee time values in parmp
         parmp.time = time;
         parmp.date = date;
         parmp.course = course;
         parmp.hist_fb = fb;

         parmp.charges.clear();     // init the charge save area for IBS
         parmp.chargesA.clear();    // and ClubSoft

         last_user = "";            // init player position users
         last_mNum = "";
         
         parmp.mempos = "";    // init POS item codes for event
         parmp.gstpos = "";
         
         //
         //  If tee time part of an event, go see if there are any item codes defined for the event
         //
         if (!event.equals("")) {
            
            getPOScodes(event, club, parmp, con);    // get parmp.mempos and parmp.gstpos if defined in event
         }
         

         if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

            //
            //  Determine the time and save string for charge records
            //
            StringBuffer tempSB = null;
            time2 = time;                    // save time

            if (time2 > 1159) {               // if PM

               if (time2 > 1259) {            // if 1 PM or later

                  time2 = time2 - 1200;
               }

               parmp.stime = String.valueOf( time2 );      // convert time to string value
               tempSB = new StringBuffer(parmp.stime);     // put in string buffer
               tempSB.append(",P,");                       // indicate PM

            } else {

               parmp.stime = String.valueOf( time2 );      // convert time to string value
               tempSB = new StringBuffer(parmp.stime);     // put in string buffer
               tempSB.append(",A,");                       // indicate AM
            }
            parmp.stime = tempSB.toString();               // save as string value

            //
            //  Set the output type to Text File - must do this now!!
            //
            resp.setContentType("text/csv");                         // text file
            resp.setHeader("Content-Disposition", "attachment;filename=\"" +filename+ "\"");         // default file name
         }

         if (parmp.posType.equals( "TAI Club Management" ) || parmp.posType.equals( "IBS" ) || parmp.posType.equals( "ClubSoft" )) {

            if (min < 10) {

               parmp.stime = String.valueOf(hr) + ":0" + String.valueOf(min);  // tee time for file

            } else {

               parmp.stime = String.valueOf(hr) + ":" + String.valueOf(min);  // tee time for file
            }

            if (!parmp.posType.equals( "IBS" )) {       // no file for IBS

               //
               //  Set the output type to Text File - must do this now!!
               //
               resp.setContentType("text/csv");                         // text file
               resp.setHeader("Content-Disposition", "attachment;filename=\"" +filename+ "\"");         // default file name
            }
         }


         //
         //  Process one player at a time to determine any charges
         //
         if (!player1.equalsIgnoreCase( "x" ) && !player1.equals( "" ) && show1 == 1) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user1.equals( "" )) {            // if no username for this player

               ploop1:
               while (i < parm.MAX_Guests) {
                  if (player1.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player1 is a guest name
                     break ploop1;
                  }
                  i++;
               }
            }
            parmp.pcw = p1cw;
            parmp.p9 = p91;
            
            if (parmp.posType.equals( "PCS Group" ) && pos1 == 0) {    // do this one separately

               parmp.player = player1;
               parmp.user = user1;
               
               if (guest == 1) parmp.user = userg1;

               done = buildPCS(parmp, out, con, club, caller, guest);
               
               if (done == 1) {        // if 'done some' returned
                  pos1 = 3;            // set as processed and sent
                  singleDone = 1;      // set single tee time done flag
                  masterDone = 1;      // set master done flag
               } else {
                  pos1 = 1;            // set as processed, not sent
               }
            }          

            //
            //  Check other POS Types
            //
            if (guest == 0) {        // if member

               if (!user1.equals( "" ) && pos1 == 0) {      // skip if no user name found or already processed

                  parmp.player = "";           // indicate member
                  parmp.user = user1;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.equals( "Jonas" )) {

                     done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                  }

                  if (parmp.posType.equals( "Jonas Generic" )) {

                     done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);                        
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos1 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = user1;              // user to get charged
                     last_mNum = mNum1;

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos1 = 1;            // set as processed, not sent
                  }
               }

            } else {          // else guest

               if (!userg1.equals( "" ) && pos1 == 0) {      // skip if no member associated with this guest

                  parmp.player = player1;       // indicate guest - pass the guest type
                  parmp.user = userg1;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.equals( "Jonas" )) {

                     done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                  }

                  if (parmp.posType.equals( "Jonas Generic" )) {

                     done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos1 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = userg1;              // user to get charged

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos1 = 1;            // set as processed, not sent
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null


         if (!player2.equalsIgnoreCase( "x" ) && !player2.equals( "" ) && show2 == 1) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user2.equals( "" )) {            // if no username for this player

               ploop2:
               while (i < parm.MAX_Guests) {
                  if (player2.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player2 is a guest name
                     break ploop2;
                  }
                  i++;
               }
            }
            parmp.pcw = p2cw;
            parmp.p9 = p92;

            if (parmp.posType.equals( "PCS Group" ) && pos2 == 0) {    // do this one separately

               parmp.player = player2;
               parmp.user = user2;
               
               if (guest == 1) parmp.user = userg2;

               done = buildPCS(parmp, out, con, club, caller, guest);
               
               if (done == 1) {        // if 'done some' returned
                  pos2 = 3;            // set as processed and sent
                  singleDone = 1;      // set single tee time done flag
                  masterDone = 1;      // set master done flag
               } else {
                  pos2 = 1;            // set as processed, not sent
               }
            }          

            //
            //  Check other POS Types
            //
            if (guest == 0) {        // if member

               if (!user2.equals( "" ) && pos2 == 0) {      // skip if no user name found

                  parmp.player = "";            // indicate member
                  parmp.user = user2;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

                     if (JonasResnumOpt == true && !mNum2.equals(last_mNum)) {   

                        resnum++;                 // new member to be charged - increment the resnum to start new chit
                        resn++;                   //    NOTE: this is used in conjunction with the "Combine Charges" option in Jonas

                        if (resn > 990) {         // don't let resn get too big

                           resn = 1;              // start over
                        }
                     }
                     
                     if (parmp.posType.equals( "Jonas Generic" )) {

                        done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                        
                     } else {

                        done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                     }
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos2 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = user2;              // user to get charged
                     last_mNum = mNum2;

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos2 = 1;            // set as processed, not sent
                  }
               }

            } else {          // else guest

               if (!userg2.equals( "" ) && pos2 == 0) {      // skip if no member associated with this guest

                  parmp.player = player2;   // indicate guest - pass the guest type
                  parmp.user = userg2;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

                     if (JonasResnumOpt == true && !userg2.equals(last_user)) {   

                        resnum++;                 // new member to be charged - increment the resnum to start new chit
                        resn++;                   //    NOTE: this is used in conjunction with the "Combine Charges" option in Jonas

                        if (resn > 990) {         // don't let resn get too big

                           resn = 1;              // start over
                        }
                     }

                     if (parmp.posType.equals( "Jonas Generic" )) {

                        done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                        
                     } else {

                        done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                     }
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos2 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = userg2;              // user to get charged

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos2 = 1;            // set as processed, not sent
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null


         if (!player3.equalsIgnoreCase( "x" ) && !player3.equals( "" ) && show3 == 1) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user3.equals( "" )) {            // if no username for this player

               ploop3:
               while (i < parm.MAX_Guests) {
                  if (player3.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player3 is a guest name
                     break ploop3;
                  }
                  i++;
               }
            }
            parmp.pcw = p3cw;
            parmp.p9 = p93;

            if (parmp.posType.equals( "PCS Group" ) && pos3 == 0) {    // do this one separately

               parmp.player = player3;
               parmp.user = user3;
               
               if (guest == 1) parmp.user = userg3;

               done = buildPCS(parmp, out, con, club, caller, guest);
               
               if (done == 1) {        // if 'done some' returned
                  pos3 = 3;            // set as processed and sent
                  singleDone = 1;      // set single tee time done flag
                  masterDone = 1;      // set master done flag
               } else {
                  pos3 = 1;            // set as processed, not sent
               }
            }          

            //
            //  Check other POS Types
            //
            if (guest == 0) {        // if member

               if (!user3.equals( "" ) && pos3 == 0) {      // skip if no user name found

                  parmp.player = "";   // indicate member
                  parmp.user = user3;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

                     if (JonasResnumOpt == true && !mNum3.equals(last_mNum)) {   

                        resnum++;                 // new member to be charged - increment the resnum to start new chit
                        resn++;                   //    NOTE: this is used in conjunction with the "Combine Charges" option in Jonas

                        if (resn > 990) {         // don't let resn get too big

                           resn = 1;              // start over
                        }
                     }

                     if (parmp.posType.equals( "Jonas Generic" )) {

                        done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                        
                     } else {

                        done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                     }
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos3 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = user3;              // user to get charged
                     last_mNum = mNum3;

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos3 = 1;            // set as processed, not sent
                  }
               }

            } else {          // else guest

               if (!userg3.equals( "" ) && pos3 == 0) {      // skip if no member associated with this guest

                  parmp.player = player3;   // indicate guest - pass the guest type
                  parmp.user = userg3;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

                     if (JonasResnumOpt == true && !userg3.equals(last_user)) {   

                        resnum++;                 // new member to be charged - increment the resnum to start new chit
                        resn++;                   //    NOTE: this is used in conjunction with the "Combine Charges" option in Jonas

                        if (resn > 990) {         // don't let resn get too big

                           resn = 1;              // start over
                        }
                     }

                     if (parmp.posType.equals( "Jonas Generic" )) {

                        done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                        
                     } else {

                        done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                     }
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos3 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = userg3;              // user to get charged                     

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos3 = 1;            // set as processed, not sent
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null


         if (!player4.equalsIgnoreCase( "x" ) && !player4.equals( "" ) && show4 == 1) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user4.equals( "" )) {            // if no username for this player

               ploop4:
               while (i < parm.MAX_Guests) {
                  if (player4.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player4 is a guest name
                     break ploop4;
                  }
                  i++;
               }
            }
            parmp.pcw = p4cw;
            parmp.p9 = p94;

            if (parmp.posType.equals( "PCS Group" ) && pos4 == 0) {    // do this one separately

               parmp.player = player4;
               parmp.user = user4;
               
               if (guest == 1) parmp.user = userg4;

               done = buildPCS(parmp, out, con, club, caller, guest);
               
               if (done == 1) {        // if 'done some' returned
                  pos4 = 3;            // set as processed and sent
                  singleDone = 1;      // set single tee time done flag
                  masterDone = 1;      // set master done flag
               } else {
                  pos4 = 1;            // set as processed, not sent
               }
            }          

            //
            //  Check other POS Types
            //
            if (guest == 0) {        // if member

               if (!user4.equals( "" ) && pos4 == 0) {      // skip if no user name found

                  parmp.player = "";   // indicate member
                  parmp.user = user4;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

                     if (JonasResnumOpt == true && !mNum4.equals(last_mNum)) {   

                        resnum++;                 // new member to be charged - increment the resnum to start new chit
                        resn++;                   //    NOTE: this is used in conjunction with the "Combine Charges" option in Jonas

                        if (resn > 990) {         // don't let resn get too big

                           resn = 1;              // start over
                        }
                     }

                     if (parmp.posType.equals( "Jonas Generic" )) {

                        done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                        
                     } else {

                        done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                     }
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos4 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = user4;              // user to get charged
                     last_mNum = mNum4;

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos4 = 1;            // set as processed, not sent
                  }
               }

            } else {          // else guest

               if (!userg4.equals( "" ) && pos4 == 0) {      // skip if no member associated with this guest

                  parmp.player = player4;   // indicate guest - pass the guest type
                  parmp.user = userg4;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

                     if (JonasResnumOpt == true && !userg4.equals(last_user)) {   

                        resnum++;                 // new member to be charged - increment the resnum to start new chit
                        resn++;                   //    NOTE: this is used in conjunction with the "Combine Charges" option in Jonas

                        if (resn > 990) {         // don't let resn get too big

                           resn = 1;              // start over
                        }
                     }

                     if (parmp.posType.equals( "Jonas Generic" )) {

                        done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                        
                     } else {

                        done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                     }
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos4 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = userg4;              // user to get charged

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos4 = 1;            // set as processed, not sent
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null


         if (!player5.equalsIgnoreCase( "x" ) && !player5.equals( "" ) && show5 == 1) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user5.equals( "" )) {            // if no username for this player

               ploop5:
               while (i < parm.MAX_Guests) {
                  if (player5.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player5 is a guest name
                     break ploop5;
                  }
                  i++;
               }
            }
            parmp.pcw = p5cw;
            parmp.p9 = p95;

            if (parmp.posType.equals( "PCS Group" ) && pos5 == 0) {    // do this one separately

               parmp.player = player5;
               parmp.user = user5;
               
               if (guest == 1) parmp.user = userg5;

               done = buildPCS(parmp, out, con, club, caller, guest);
               
               if (done == 1) {        // if 'done some' returned
                  pos5 = 3;            // set as processed and sent
                  singleDone = 1;      // set single tee time done flag
                  masterDone = 1;      // set master done flag
               } else {
                  pos5 = 1;            // set as processed, not sent
               }
            }          

            //
            //  Check other POS Types
            //
            if (guest == 0) {        // if member

               if (!user5.equals( "" ) && pos5 == 0) {      // skip if no user name found

                  parmp.player = "";   // indicate member
                  parmp.user = user5;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

                     if (JonasResnumOpt == true && !mNum5.equals(last_mNum)) {   

                        resnum++;                 // new member to be charged - increment the resnum to start new chit
                        resn++;                   //    NOTE: this is used in conjunction with the "Combine Charges" option in Jonas

                        if (resn > 990) {         // don't let resn get too big

                           resn = 1;              // start over
                        }
                     }

                     if (parmp.posType.equals( "Jonas Generic" )) {

                        done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                        
                     } else {

                        done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                     }
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos5 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = user5;              // user to get charged
                     last_mNum = mNum5;

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos5 = 1;            // set as processed, not sent
                  }
               }

            } else {          // else guest

               if (!userg5.equals( "" ) && pos5 == 0) {      // skip if no member associated with this guest

                  parmp.player = player5;   // indicate guest - pass the guest type
                  parmp.user = userg5;

                  if (parmp.posType.equals( "Abacus21" ) || parmp.posType.startsWith( "Jonas" )) {

                     if (JonasResnumOpt == true && !userg5.equals(last_user)) {   

                        resnum++;                 // new member to be charged - increment the resnum to start new chit
                        resn++;                   //    NOTE: this is used in conjunction with the "Combine Charges" option in Jonas

                        if (resn > 990) {         // don't let resn get too big

                           resn = 1;              // start over
                        }
                     }

                     if (parmp.posType.equals( "Jonas Generic" )) {

                        done = buildJonasGeneric(parmp, out, con, resnum, club, caller);
                        
                     } else {

                        done = buildJonas(parmp, out, con, resnum, ttidnum, club);
                     }
                  }

                  if (parmp.posType.equals( "TAI Club Management" )) {

                     done = buildTAI(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "IBS" )) {

                     done = buildIBS(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSoft" )) {

                     done = buildClubSoft(parmp, out, con, club);
                  }

                  if (parmp.posType.equals( "ClubSystems Group" )) {

                     done = buildCSG(parmp, out, con, club, ttid, caller);
                  }

                  if (parmp.posType.equals( "NorthStar" )) {

                     done = buildLineNS(parmp, filename, out, con, 0, caller);      // add charges to file, if any
                  }

                  if (done == 1) {        // if 'done some' returned
                     pos5 = 3;            // set as processed and sent
                     singleDone = 1;      // set single tee time done flag
                     masterDone = 1;      // set master done flag
                     last_user = userg5;              // user to get charged

                     ttidnum = ttidnum2 + ttidn;    // create new tee time id num

                  } else {

                     pos5 = 1;            // set as processed, not sent
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null

         //
         //  Now set this tee time as processed (if we did)
         //
         if (singleDone == 1) {          // if we did any in this tee time


            //
            // NOTE: used to do the pos1-5 update here but lets do it after we try to send the charges to IBS
            //


            //
            //  If POS uses Reservation Numbers (identifies each tee time)
            //
            //if (parmp.posType.equals( "Abacus21" ) || parmp.posType.equals( "Jonas" ) || parmp.posType.equals( "TAI Club Management" )) {
            //if (club.equals("altolakes") || club.equals("pattersonclub")) {
            //
            //  5/29/08 - NOT SURE why this was ever changed for Jonas, but some clubs want us to change the res num for each tee time.
            //            This is necessary to use the "Quick Check-In" feture in Jonas POS - see P. 20 of their user doc.
            //            We may need to change this to not update resnum for any club that complains.
            //
            if (parmp.posType.startsWith( "Jonas" )) {

               //
               //  Increment Reservation Number for next Tee Time
               //
               resnum++;             // res num for records in file (this can keep incrementing)
               resn++;

               if (resn > 990) {         // don't let resn get too big

                  resn = 1;              // start over
               }

            } else if (parmp.posType.equals( "IBS" )) {

               //
               //  IBS - send the charges after each tee time - process the responses when all done
               //
               IBSerror = Proshop_sheet_checkin.sendChargeIBS(parmp, con);
            }
            
            //
            //  if charges are to be combined, gather charges from parmp.chargesA, combine them, and place in file
            //
            if (parmp.combineCharges == true) {
                
                if (parmp.posType.equals( "ClubSoft" ) && parmp.chargesA.size() > 0) {  // process according to pos type
                    
                   buildClubSoft2(parmp, out, con, club);   // combine and move the charges to the POS file
                      
                }      // end of IF clubsoft
            }          // end of IF combineCharges


            //
            // Do the pos1-5 update here so we can check for additional failures before marking this tee time as 'done'
            //
            if (!IBSerror) { // add others to check?

                // update the tee time slot with new pos flag values
                try {

                    pstmt = con.prepareStatement (
                        "UPDATE " +sqlTable+ " SET pos1 = ?, pos2 = ?, pos3 = ?, pos4 = ?, pos5 = ? " +
                        "WHERE date = ? AND time = ? AND fb = ? AND courseName = ?");

                    pstmt.clearParameters();

                    pstmt.setInt(1, pos1);
                    pstmt.setInt(2, pos2);
                    pstmt.setInt(3, pos3);
                    pstmt.setInt(4, pos4);
                    pstmt.setInt(5, pos5);
                    pstmt.setLong(6, date);
                    pstmt.setInt(7, time);
                    pstmt.setInt(8, fb);
                    pstmt.setString(9, course);

                    pstmt.executeUpdate();

                } catch (Exception exc) {

                    Utilities.logError("Proshop_sheet_pos.sendCharges() Error setting pos flags for " + club + ", date=" + date + ", time=" + time + ", fb=" + fb + ", course=" + course + ", err=" + exc.toString());

                } finally {

                    try { pstmt.close(); }
                    catch (Exception ignore) {}

                }

            }



         }   // end of IF any charges found in this tee time

      }     // end of WHILE loop of tee times

      pstmt2s.close();

   } catch (Exception exc) {

      SystemUtils.logError("Error1 in Proshop_sheet_pos.sendCharges: "+ exc.getMessage());

   }

   
   if (caller.equals("timer")) {      // if initiated by the custom timer (SystemUtils) 
      
      if (masterDone == 1 && parmp.posType.equals( "NorthStar" )) {   // if we built any records and its NorthStar

         //
         //  NorthStar - close out the file (add counter and footer)
         //
         String counts = String.valueOf( parmp.count );     // create string value from count

         addLineNS(filename, counts, club, caller);         // put in file

         addLineNS(filename, "EOF", club, caller);          // add End Of File indicator (footer)
      }
      
   } else {    // NOT timer call - normal Send POS from tee sheet
      
      //
      //  Get current time (must get here to get an accurate time value)
      //
      cal = new GregorianCalendar();       // get todays date
      year = cal.get(Calendar.YEAR);
      month = cal.get(Calendar.MONTH) +1;
      daynum = cal.get(Calendar.DAY_OF_MONTH);
      hr = cal.get(Calendar.HOUR_OF_DAY);           // 24 hr clock (0 - 23)
      min = cal.get(Calendar.MINUTE);
      sec = cal.get(Calendar.SECOND);

      int today_date = (year * 10000) + (month * 100) + daynum;      // create a date field of yyyymmdd

      int end_time = (hr * 10000) + (min * 100) + sec;  

      try {

         //   end the send that was in process
         pstmt = con.prepareStatement (
            "UPDATE pos_progress SET end_time = ?, in_progress = 0 " +
            "WHERE date = ? AND in_progress = 1");

         pstmt.clearParameters();          
         pstmt.setInt(1, end_time);
         pstmt.setInt(2, today_date);
         pstmt.executeUpdate();           

         pstmt.close();

      } catch (Exception exc) {

         SystemUtils.logError("Error2 in Proshop_sheet_pos.promptPOS2 (end progress): "+ exc.getMessage());

      } finally {

           try { pstmt.close(); }
           catch (Exception ignore) {}

      }


      //
      // done with text file - check if we built any records
      //
      if (masterDone == 1) {   // if we built any records

         if (parmp.posType.equals( "NorthStar" )) {

            //
            //  NorthStar - close out the file (add counter and footer)
            //
            String counts = String.valueOf( parmp.count );     // create string value from count

            addLineNS(filename, counts, club, caller);         // put in file

            addLineNS(filename, "EOF", club, caller);          // add End Of File indicator (footer)

            resp.setContentType("text/html");                   // normal html response
            resp.setHeader("Content-Disposition", "inline");    // undo attachment change from above

            out.println(SystemUtils.HeadTitle("Proshop - POS Prompt"));
            out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
            out.println("<hr width=\"40%\">");
            out.println("<BR><H3>POS Charges Sent</H3>");
            out.println("<br>The POS charges have been sent to the POS system.");
            out.println("<BR><BR>");
            out.println("<input type=\"button\" style=\"text-decoration:underline; background:#8B8970\" Value=\"  Return  \" onClick='self.close()' alt=\"Close\">");
            out.println("</CENTER></BODY></HTML>");

         } else if (parmp.posType.equals( "IBS" ) || (!caller.equals("timer") && club.equals("ironwood"))) {   // IBS or PCS/Ironwood

            //
            //  IBS - inform user the charges have been sent.  Display any errors received.
            //
            resp.setContentType("text/html");                   // normal html response
            resp.setHeader("Content-Disposition", "inline");    // undo attachment change from above

            out.println(SystemUtils.HeadTitle("Proshop - POS Prompt"));
            out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
            out.println("<hr width=\"40%\">");
            
            // tell the user if we sent charges or not
            if (!IBSerror) {

                // no error
                out.println("<BR><H3>POS Charges Sent</H3>");
                out.println("<br>The POS charges have been sent to the POS system.");

            } else {

                // some type of error
                out.println("<BR><H3>POS Charges <i>NOT</i> Sent</H3>");
                out.println("<br>The POS charges have <b>NOT been sent</b> to the POS system due to an error.");
            }

            out.println("<BR><BR>");

            if (!parmp.returnCode1.equals("") && parmp.returnCode1 != null) {       // if any errors returned from IBS

               out.println("<strong>NOTICE:</strong> The following errors were received from the IBS System.");
               out.println("<BR>You may need to verify that the charges were properly processed in the IBS System.");
               out.println("<BR><BR>" +parmp.returnCode1);                     
            }
            out.println("<BR><BR>");            
            out.println("<input type=\"button\" style=\"text-decoration:underline; background:#8B8970\" Value=\"  Return  \" onClick='self.close()' alt=\"Close\">");
            out.println("</CENTER></BODY></HTML>");
         }

      } else {

         resp.setContentType("text/html");                   // normal html response
         resp.setHeader("Content-Disposition", "inline");    // undo attachment change from above

         out.println(SystemUtils.HeadTitle("Proshop - POS Prompt"));
         out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
         out.println("<hr width=\"40%\">");

         if (parmp.posType.equals( "PCS Group" )) {

            out.println("<BR><H3>No Player Data To Send</H3>");
            out.println("<br>There is no new player data to send at this time.");
            
         } else {
            
            out.println("<BR><H3>No POS Charges To Send</H3>");
            out.println("<br>There are no new POS charges to send at this time.");
         }
         out.println("<BR><BR>");
         out.println("<input type=\"button\" style=\"text-decoration:underline; background:#8B8970\" Value=\"  Return  \" onClick='self.close()' alt=\"Close\">");
         out.println("</CENTER></BODY></HTML>");
      }

      out.close();              // close the file

      try {

         resp.flushBuffer();      // make sure the repsonse completes

      }
      catch (Exception ignore) {
      }
   }      // end of IF Not timer

 }                   // end of sendCharges


 // ********************************************************************
 //  Process the Jonas Generic POS Interface
 //
 //  Build an ASCII file containing the following:
 //
 //   Columns:
 //       1 Member Number or POSID                       
 //       2 Date                            YYYY/MM/DD
 //       3 Chit #                          6 chars
 //       4 Item Group (Item Code - but really their Group Id) - 10 chars
 //       5 Description                     26 chars
 //       6 Total Amount
 //       7 Gratuity
 //       8 GST (Gov Sales Tax)
 //       9 PST (Provincial Sales Tax)
 //      10 Other
 //
 // ********************************************************************

 private static int buildJonasGeneric(parmPOS parmp, PrintWriter out, Connection con, long resnum, String club, String caller) {

   PreparedStatement pstmtc = null;
   ResultSet rs = null;

   String mship = "";
   String mnum = "";
   String posid = "";
   String fname = "";
   String lname = "";
   String tpos = "";
   String mpos = "";
   String mposc = "";
   String gpos = "";
   String gtype = "";
   String tmode = "";
   String tmodea = "";
   String item = "";
   String line = "";
   String fee = "";
   String errorMsg = "";
   String tax = "";
   String tax_hist = "";

   int i = 0;
   int p9c = 0;
   int done = 0;
   double salestax = 0;                          // tax rate from config
   double taxfee = 0;


   try {
       
      //  get the member's mship info
      pstmtc = con.prepareStatement (
         "SELECT name_last, name_first, m_ship, memNum, posid FROM member2b WHERE username= ?");

      pstmtc.clearParameters();        // clear the parms
      pstmtc.setString(1, parmp.user);

      rs = pstmtc.executeQuery();

      if (rs.next()) {

         lname = rs.getString(1);
         fname = rs.getString(2);
         mship = rs.getString(3);
         mnum = rs.getString(4);
         posid = rs.getString(5);
      }

   } catch (Exception e1) {

      errorMsg = "Error1 in Proshop_sheet_pos.buildJonasGeneric for club: " + club;
      errorMsg = errorMsg + ", Exception: " + e1.getMessage();    // build error msg

      SystemUtils.logError(errorMsg);    // log it
      
   } finally {
       Connect.close(rs, pstmtc);
   }

   if (posid.equals("")) {
      
      posid = mnum;     // use mNum if posid not secified
   }
   
   if (posid.equals("")) {
      
      return(done);     // return if no id 
   }
   
   try {

      //*******************************************************************************************
      //  First check if there is a charge amount associated with this member's mode of trans
      //*******************************************************************************************
      //
      i = 0;
      loop1:
      while (i < parmp.MAX_Tmodes) {

         if (parmp.tmodea[i].equals( parmp.pcw )) {     // if matching mode of trans found

            tmode = parmp.tmode[i];                // get full description of tmode
            if (parmp.p9 == 1) {                   // if 9 holes
               item = parmp.t9pos[i];              // get Item Group # for tmode
               fee = parmp.t9posc[i];              // get fee for tmode
            } else {
               item = parmp.tpos[i];               // get Item Group # for tmode
               fee = parmp.tposc[i];               // get fee for tmode
            }
            salestax = parmp.salestaxt[i];          // get sales tax rate if specified
            break loop1;
         }
         i++;
      }
   
      if (!item.equals( "" ) && !item.equals( "0" ) && item != null) {   // if pos charge found for Mode of Trans selected

         if (fee.equals("") || fee.equals(" ") || fee.equals("0")) {

             fee = "0.00";                            // use default if none provided
             tax = "0.00";
             tax_hist = "0.00";

         } else {
               
             fee = setFee(fee);                       // enasure dollar format (0.00)
             tax = calcSalesTax(salestax, fee);       // calculate the sales tax amount, if any
             tax_hist = getHistFee(tax);
         }
         
         if (caller.equals("prtReceipt")) {
             
             if (!fee.equals("")) {

                 fee = setFee(fee);                       // enasure dollar format (0.00)

                 parmp.item += ";" + fname + " " + lname + "," + posid + "," + tmode + "," + fee + "," + tax + "," + resnum;

                 done = 1;    // indicate charge added
             }
             
         } else {

             //  We can now build the charge string for Mode of Trans charge
             StringBuffer tempSB = new StringBuffer(posid);    // put member # in string buffer
             tempSB.append(",");
             tempSB.append(parmp.sdate);                       // date of tee time
             tempSB.append(",");
             tempSB.append(resnum);                            // Chit #
             tempSB.append(",");                          
             tempSB.append(item);                              // Item Group 
             tempSB.append(",");                           
             tempSB.append(tmode);                             // description
             tempSB.append(",");
             tempSB.append(fee);                               // amount
             tempSB.append(",0,0,");                             // gratuity
             tempSB.append(tax);                               // tax
             tempSB.append(",0");                            // others

             line = tempSB.toString();                         // save as string value

             out.print(line);
             out.println();      // output the line

             done = 1;           // indicate charge sent

             //
             //  Save charge data in pos_hist for reports
             //
             parmp.hist_posid = posid;
             if (!parmp.player.equals( "" )) {
                parmp.hist_player = parmp.player;          // if guest
             } else {
                parmp.hist_player = fname + " " + lname;   // else use member name
             }
             parmp.hist_price = fee;
             parmp.hist_tax = tax_hist.trim();
             parmp.hist_item_name = parmp.pcw;
             parmp.hist_item_num = item;

             add_POS_hist(parmp, con);       // go make the entry
         }
      }
   } catch (Exception e2) {

      errorMsg = "Error2 in Proshop_sheet_pos.buildJonasGeneric for club: " +club;
      errorMsg = errorMsg + ", Exception: " + e2.getMessage();                 // build error msg

      SystemUtils.logError(errorMsg);                                           // log it
   }


   //
   //*******************************************************************************************
   //  get the mship class and charge amount, if any and if member!
   //*******************************************************************************************
   //
   i = 0;
   item = "";

   if (parmp.player.equals( "" )) {       // if member

      try {

         loop2:
         while (i < parmp.MAX_Mships) {

            if (parmp.mship[i].equalsIgnoreCase( mship )) {     // if matching mode mship type

               if (parmp.p9 == 1) {                      // if 9 holes
                  item = parmp.mship9I[i];               // get mship item group #
                  fee = parmp.m9posc[i];                 // get Item Fee
               } else {
                  item = parmp.mshipI[i];               // get mship item group #
                  fee = parmp.mposc[i];                 // get Item Fee
               }
               salestax = parmp.salestaxm[i];          // get sales tax rate if specified
               break loop2;
            }
            i++;
         }

         if (!item.equals( "" ) && !item.equals( "0" ) && item != null) {   // if pos charge found for membership (non-golf mship charge)

            if (fee.equals("") || fee.equals(" ") || fee.equals("0")) {

                fee = "0.00";                            // use default if none provided
                tax = "0.00"; 
                tax_hist = "0.00";

            } else {

                fee = setFee(fee);                       // enasure dollar format (0.00)
                tax = calcSalesTax(salestax, fee);       // calculate the sales tax amount, if any
                tax_hist = getHistFee(tax);
            }
         
             if (caller.equals("prtReceipt")) {

                 if (!fee.equals("")) {

                     fee = setFee(fee);                       // enasure dollar format (0.00)

                     parmp.item += ";" + fname + " " + lname + "," + posid + ",Greens Fee " + item + "," + fee + "," + tax + "," + resnum;

                     done = 1;    // indicate charge added
                 }

             } else {

                   StringBuffer tempSB = new StringBuffer(posid);    // put member # in string buffer
                   tempSB.append(",");
                   tempSB.append(parmp.sdate);                       // date of tee time
                   tempSB.append(",");
                   tempSB.append(resnum);                            // Chit #
                   tempSB.append(",");
                   tempSB.append(item);                              // Item Group 
                   tempSB.append(",");
                   tempSB.append("Greens Fee");                      // description
                   tempSB.append(",");
                   tempSB.append(fee);                               // amount
                   tempSB.append(",0,0,");                             // gratuity
                   tempSB.append(tax);                               // tax
                   tempSB.append(",0");                            // others

                   line = tempSB.toString();                         // save as string value

                   out.print(line);
                   out.println();      // output the line

                   done = 1;           // indicate charge sent

                   //
                   //  Save charge data in pos_hist for reports
                   //
                   parmp.hist_posid = posid;
                   if (!parmp.player.equals("")) {
                       parmp.hist_player = parmp.player;          // if guest
                   } else {
                       parmp.hist_player = fname + " " + lname;   // else use member name
                   }
                   parmp.hist_price = fee;
                   parmp.hist_tax = tax_hist.trim();
                   parmp.hist_item_name = "Greens Fee";
                   parmp.hist_item_num = item;

                   add_POS_hist(parmp, con);       // go make the entry
               }
           }
       } catch (Exception e2) {

           errorMsg = "Error3 in Proshop_sheet_pos.buildJonasGeneric for club: " + club;
           errorMsg = errorMsg + ", Exception: " + e2.getMessage();                 // build error msg

           SystemUtils.logError(errorMsg);                                           // log it
       }

   } else {

      //
      //*******************************************************************************************
      //  player passed is a GUEST - charge the member for this too
      //*******************************************************************************************
      //
      try {

         loop3:
         while (i < parmp.MAX_Guests) {

            if (parmp.player.startsWith( parmp.gtype[i] )) {

               gtype = parmp.gtype[i];                // set guest type description
               if (parmp.p9 == 1) {                   // if 9 holes
                  item = parmp.gst9I[i];                 // set guest item group #
                  fee = parmp.g9pos[i];                  // get Item Fee
               } else {
                  item = parmp.gstI[i];                 // set guest item group #
                  fee = parmp.gpos[i];                  // get Item Fee
               }
               salestax = parmp.salestaxg[i];          // get sales tax rate if specified
               break loop3;
            }
            i++;
         }

           if (!item.equals("") && !item.equals("0") && item != null) {   // if pos charge found for membership (non-golf mship charge)

               if (fee.equals("") || fee.equals(" ") || fee.equals("0")) {

                   fee = "0.00";                            // use default if none provided
                   tax = "0.00";
                   tax_hist = "0.00";

               } else {

                   fee = setFee(fee);                       // enasure dollar format (0.00)
                   tax = calcSalesTax(salestax, fee);       // calculate the sales tax amount, if any
                   tax_hist = getHistFee(tax);
               }

               if (caller.equals("prtReceipt")) {

                   if (!fee.equals("")) {

                       fee = setFee(fee);                       // enasure dollar format (0.00)

                       parmp.item += ";" + fname + " " + lname + "," + posid + "," +parmp.player+ "," + fee + "," + tax + "," + resnum;

                       done = 1;    // indicate charge added
                   }

               } else {

                   StringBuffer tempSB = new StringBuffer(posid);    // put member # in string buffer
                   tempSB.append(",");
                   tempSB.append(parmp.sdate);                       // date of tee time
                   tempSB.append(",");
                   tempSB.append(resnum);                            // Chit #
                   tempSB.append(",");
                   tempSB.append(item);                              // Item Group 
                   tempSB.append(",");
                   tempSB.append("Guest Fee");                       // description
                   tempSB.append(",");
                   tempSB.append(fee);                               // amount
                   tempSB.append(",0,0,");                             // gratuity
                   tempSB.append(tax);                               // tax
                   tempSB.append(",0");                            // others

                   line = tempSB.toString();                         // save as string value

                   out.print(line);
                   out.println();      // output the line

                   done = 1;           // indicate charge sent

                   //
                   //  Save charge data in pos_hist for reports
                   //
                   parmp.hist_posid = posid;
                   parmp.hist_player = parmp.player;          // if guest
                   parmp.hist_price = fee;
                   parmp.hist_tax = tax_hist.trim();
                   parmp.hist_item_name = "Guest Fee";
                   parmp.hist_item_num = item;

                   add_POS_hist(parmp, con);       // go make the entry
               }
           }
       }
      catch (Exception e4) {

         errorMsg = "Error4 in Proshop_sheet_pos.buildJonasGeneric for club: " +club;
         errorMsg = errorMsg + ", Exception: " + e4.getMessage();                 // build error msg

         SystemUtils.logError(errorMsg);                                           // log it
      }

   }     // end of guest processing
   
   return(done);
   
 }    // end of buildJonasGeneric
   
   

 // ********************************************************************
 //  Process the Abacus or Jonas POS charges for an individual member
 //
 //  Build an ASCII file containing the following:
 //
 //   Columns:
 //       1 Member Number or POSID                                Alpha 10
 //       2 Member? (Y/N)     (always 'Y')                        Alpha 1
 //       3 Number Of Guests                                      Alpha 3
 //       4 Last Name                                             Alpha 30
 //       5 First Name                                            Alpha 20
 //       6 Telephone Number   (skip)                             Alpha 15
 //       7 Tee off Date                                          Date YYYYMMDD
 //       8 Tee Off Time                                          Alpha HHMM
 //       9 AM / PM (A or P)                                      Alpha 1
 //       10 Course Code       ('A' if only 1 course)             Alpha 2
 //       11 Start Tee/Group Number    (skip)                     Alpha 3
 //       12 UNUSED (reserved for Deposit Amount)                 Numeric 0000.00
 //       13 Credit Card Type          (skip)                     Alpha 4
 //       14 Credit Card Number        (skip)                     Alpha 20
 //       15 Credit Card Expiry        (skip)                     Alpha YYYYMM
 //       16 Tee Time Sales Item                                  Alpha 6
 //       17 Units Sold                                           Numeric 0000
 //       18 Confirmation/Reservation Number                      Alpha 10
 //       19 UNUSED (Tee Time Sales Item Price) (skip)            Numeric 0000.00
 //       20 Tee-Time ID number                                   Alpha 10
 //       21 Green Fee Credit Card Authorization Code  (skip)     Alpha 9
 //       22 Credit Card Authorization Date            (skip)     Date YYYYMMDD
 //       23 Prepaid Indicator (Y-yes, N-no)           ('N')      Alpha 1
 //       24 Res. Fee Credit Card Authorization Code   (skip)     Alpha 9
 //       25 Reservation Fee Amount                    (skip)     Numeric ####.00
 //       26 Checked In Indicator (Y-yes, N-no)        ('Y')      Alpha 1
 //
 //    Check the mode of trans for charges
 // ********************************************************************

 private static int buildJonas(parmPOS parmp, PrintWriter out, Connection con, long resnum, long ttidnum, String club) {


   PreparedStatement pstmtc = null;
   ResultSet rs = null;

   String mship = "";
   String mnum = "";
   String posid = "";
   String fname = "";
   String lname = "";
   String tpos = "";
   String mpos = "";
   String mposc = "";
   String gpos = "";
   String gtype = "";
   String tmode = "";
   String tmodea = "";
   String item = "";
   String line = "";
   String tcourse = "";        // temp course name for customs

   int i = 0;
   int p9c = 0;
   int done = 0;
   int daynum = (int)(parmp.date - ((parmp.date / 100) * 100));    // dd = yyyymmdd - yyyymm00


   try {
      //
      //  get the member's mship info
      //
      pstmtc = con.prepareStatement (
         "SELECT name_last, name_first, m_ship, memNum, posid FROM member2b WHERE username= ?");

      pstmtc.clearParameters();        // clear the parms
      pstmtc.setString(1, parmp.user);

      rs = pstmtc.executeQuery();

      if (rs.next()) {

         lname = rs.getString(1);
         fname = rs.getString(2);
         mship = rs.getString(3);
         mnum = rs.getString(4);
         posid = rs.getString(5);
      }

   } catch (Exception e1) {

      String errorMsg1 = "Error1 in Proshop_sheet_pos.buildJonas for club: " + club;
      errorMsg1 = errorMsg1 + ", Exception: " + e1.getMessage();      // build error msg

      SystemUtils.logError(errorMsg1);                                       // log it
   } finally {
       Connect.close(rs, pstmtc);
   }

   //
   //  some clubs use the posid field instead of the mnum
   //
   if ((club.equals( "lakewood" ) || club.equals( "pinnaclepeak" ) || club.equals("engineerscc") || club.equals("mesaverdecc") || club.equals("austincountryclub") || club.equals("trooncc")) & !posid.equals( "" )) {

      mnum = posid;
   }

   //
   //  Skip if no mNum/posid - otherwise entire file will fail
   //
   if (!mnum.equals( "" ) && mnum != null) {

      try {

         //*******************************************************************************************
         //  First check if there is a charge amount associated with this member's mode of trans
         //*******************************************************************************************
         //
         if (club.equals( "medinahcc" )) {      // if Medinah do manual item codes

            if (!parmp.player.startsWith( "Comp" ) && !parmp.player.startsWith( "PGA" ) &&
                !parmp.player.startsWith( "Country Club" ) && !parmp.player.startsWith( "Credit Card" )) {  // DO NOT charge these guest types

               if (parmp.pcw.equals( "4BG" )) {          // 4 Bagger

                  item = "20190";
               }

               if (parmp.pcw.equals( "CAR" )) {          // Half Cart

                  if (parmp.p9 == 1) {                   // if 9 holes
                     item = "20130";
                  } else {
                     item = "20110";
                  }
               }

               if (parmp.pcw.equals( "FCA" )) {          // Full Cart

                  if (parmp.p9 == 1) {                   // if 9 holes
                     item = "20120";
                  } else {
                     item = "20100";
                  }
               }

               if (parmp.pcw.equals( "2CA" )) {          //  Two Cart

                  item = "20000";
               }

               if (parmp.pcw.equals( "1.5" )) {         //  One & a half cart Cart

                  item = "20105";
               }

               if (parmp.pcw.equals( "PC" )) {          //  Pull Cart

                  item = "20140";
               }

            }

         } else {        // not Medinah

            i = 0;
            loop1:
            while (i < parmp.MAX_Tmodes) {

               if (parmp.tmodea[i].equals( parmp.pcw )) {     // if matching mode of trans found

                  tmode = parmp.tmode[i];             // get full description of tmode
                  if (parmp.p9 == 1) {                   // if 9 holes
                     item = parmp.t9pos[i];               // get Item Group # for tmode
                  } else {
                     item = parmp.tpos[i];               // get Item Group # for tmode
                  }
                  break loop1;
               }
               i++;
            }
         }

         //
         // If Long Cove and a certain Guest Type, then do not charge for mode of trans
         //
         if (club.equals( "longcove" )) {

            if (parmp.player.startsWith( "Comp A" ) || parmp.player.startsWith( "PGA" ) || parmp.player.startsWith( "Recip Guest" ) ||
                parmp.player.startsWith( "Employee" ) || parmp.player.startsWith( "Tournament Guest" )) {

               item = "";        // no charge
            }
         }


         //
         // If Virginia CC and a certain Guest Type, then do not charge for mode of trans
         //
         if (club.equals( "virginiacc" )) {

//            if (parmp.player.startsWith( "Employee" ) || parmp.player.startsWith( "Industry Comp" ) || parmp.player.startsWith( "Reciprocal" ) ||
//                parmp.player.startsWith( "Outing Guest" ) || parmp.player.startsWith( "Guest" ) || parmp.player.startsWith( "VCU" ) ||
//                parmp.player.startsWith( "U of R" ) || parmp.player.startsWith( "St Chris" ) || parmp.player.startsWith( "Collegiate" ) ||
//                parmp.player.startsWith( "St Catherines" ) || parmp.player.startsWith( "Assoc Guest" )) {

            if (parmp.player.startsWith( "Reciprocal" )) {

               item = "";        // no charge
            }
         }


         if (!item.equals( "" ) && !item.equals( "0" ) && item != null) {   // if pos charge found for Mode of Trans selected

            //
            //  We can now build the charge string for Mode of Trans charge
            //
            StringBuffer tempSB = new StringBuffer(mnum);     // put member # in string buffer
            tempSB.append(",Y,1,");                           // indicator, # of guests (players?)
            tempSB.append(lname);                             // last name
            tempSB.append(",");
            tempSB.append(fname);                             // first name
            tempSB.append(",,");                              // skip phone #
            tempSB.append(parmp.sdate);                       // date of tee time
            tempSB.append(",");
            tempSB.append(parmp.stime);                       // time (includes A or P for AM or PM and ,)
            tempSB.append(parmp.courseid);                    // Course Code
            tempSB.append(",,,,,,");                          // skips
            tempSB.append(item);                              // Sales Item #
            tempSB.append(",1,");                             // units sold
            tempSB.append(resnum);                            // Reservation #
            tempSB.append(",,");                              // unused
            tempSB.append(ttidnum);                           // Tee Time Id #
            tempSB.append(",,,N,,,Y");                        // units sold, skips, Prepaid, Checked-in

            line = tempSB.toString();                         // save as string value

            out.print(line);
            out.println();      // output the line

            done = 1;           // indicate charge sent

            ttidn++;            // bump tee time id number
            ttidnum++;

            //
            //  Save charge data in pos_hist for reports
            //
            parmp.hist_posid = mnum;
            if (!parmp.player.equals( "" )) {
               parmp.hist_player = parmp.player;          // if guest
            } else {
               parmp.hist_player = fname + " " + lname;   // else use member name
            }
            parmp.hist_price = "";
            parmp.hist_item_name = parmp.pcw;
            parmp.hist_item_num = item;

            add_POS_hist(parmp, con);       // go make the entry
         }

      }
      catch (Exception e2) {

         String errorMsg2 = "Error2 in Proshop_sheet_pos.buildJonas for club: " +club;
         errorMsg2 = errorMsg2 + ", Exception: " + e2.getMessage();                 // build error msg

         SystemUtils.logError(errorMsg2);                                           // log it
      }


      //
      //*******************************************************************************************
      //  get the mship class and charge amount, if any and if member!
      //*******************************************************************************************
      //
      i = 0;
      item = "";

      if (parmp.player.equals( "" )) {       // if member

         try {
         
            loop2:
            while (i < parmp.MAX_Mships) {

               if (parmp.mship[i].equalsIgnoreCase( mship )) {     // if matching mode mship type

                  if (parmp.p9 == 1) {                   // if 9 holes
                     item = parmp.mship9I[i];               // get mship item group #
                  } else {
                     item = parmp.mshipI[i];               // get mship item group #
                  }
                  break loop2;
               }
               i++;
            }

            if (!item.equals( "" ) && !item.equals( "0" ) && item != null) {   // if pos charge found for membership (non-golf mship charge)

               //
               //  IF Congressional - check for custom codes based on Course
               //
               if (club.equals( "congressional" )) {

                  if (mship.equals( "Non Resident" )) {

                     tcourse = congressionalCustom.getFullCourseName(parmp.date, daynum, parmp.course);   // get course name for this date

                     item = "000G39";                     // item code for Blue course

                     if (tcourse.endsWith( "Gold" )) {

                        item = "000G40";                 // item code for Gold course
                     }
                  }
               }       // end of IF Congressional


               //
               //  IF St. Clair CC - check for custom codes based on Course
               //
               if (club.equals( "stclaircc" )) {

                  if (parmp.course.equals( "Championship" )) {

                      if (mship.equals( "Voting" ) || mship.equals( "Senior" ) || mship.equals( "Intermediate" ) ||
                              mship.equals( "Spouse Golf" ) || mship.equals( "Junior Golf" ) || mship.equals( "Assoc20" ) ||
                              mship.equals( "Assoc Spouse20" ) || mship.equals( "Assoc Jr20" ) || mship.equals( "Associate Golf" ) ||
                              mship.equals( "Associate Spouse" ) || mship.equals( "Associate Jr" ) || mship.equals( "Spouse Golf 9" )) {

                          item = "18MNON";

                          if (parmp.p9 == 1) {                   // if 9 holes

                              item = "09MNON";
                          }

                     } else if (mship.equals( "Limited Golf" )  || mship.equals( "NR Golf" ) ||
                                mship.equals( "Limited Spouse" ) || mship.equals( "Limited Jr" )) {

                         item = "18MPAR";

                         if (parmp.p9 == 1) {                   // if 9 holes

                             item = "09MPAR";
                         }

                     } else if (mship.equals("Social Golf") || mship.equals("Soc Golf Spouse") || mship.equals("Soc Jr Golf") ||
                                mship.equals("Emeritus")) {

                         item = "18MFUL";

                         if (parmp.p9 == 1) {

                             item = "09MFUL";
                         }

                     } else {                // Social or others

                          item = "";           // others entered as guest
                     }

                  } else {     // Terrace course - same for most mships


                     if (mship.equals("Emeritus")) {

                         item = "18TFUL";

                         if (parmp.p9 == 1) {                   // if 9 holes

                            item = "09TFUL";
                         }

                     } else {

                         item = "18TNON";

                         if (parmp.p9 == 1) {                   // if 9 holes

                            item = "09TNON";
                         }
                     }
                  }
               }       // end of IF St. Clair CC
               
               
               // If Belfair CC - process by course (all mships the same)
               if (club.equals("belfair")) {
                   
                   if (parmp.course.equals("East Course")) {        // East Course
                       
                       item = "000119";
                       
                       if (parmp.p9 == 1) {
                           
                           item = "000120";
                       }
                       
                   } else {  // West Course
                       
                       item = "000110";
                       
                       if (parmp.p9 == 1) {
                           
                           item = "000111";
                       }
                   }
               }



               //
               //  If Royal Oaks Houston - process by mship and day
               //
               if (club.equals("royaloakscc")) {

                  if (mship.equals( "Golf" ) || mship.equals( "Sampler Golf" ) || mship.equals( "Preview Golf" )) {

                     if (parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                         parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3 ||
                         parmp.date == Hdate4 || parmp.date == Hdate5) {

                        item = "54GF03";

                        if (parmp.p9 == 1) {                   // if 9 holes

                           item = "54GF04";
                        }

                     } else {

                        if (parmp.day.equals( "Monday" ) || parmp.day.equals( "Tuesday" ) ||
                            parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {

                           item = "54GF21";

                           if (parmp.p9 == 1) {                   // if 9 holes

                              item = "54GF22";
                           }

                        } else {

                           if (parmp.time < 1200) {          // Friday - AM or PM?

                              item = "54GF23";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "54GF24";
                              }

                           } else {

                              item = "54GF25";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "54GF26";
                              }
                           }
                        }
                     }
                  }

                  if (mship.startsWith( "Executiv" ) || mship.endsWith( "Executive" )) {

                     if (parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                         parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3 ||
                         parmp.date == Hdate4 || parmp.date == Hdate5) {

                        item = "54GF07";

                        if (parmp.p9 == 1) {                   // if 9 holes

                           item = "54GF08";
                        }

                     } else {

                        if (parmp.day.equals( "Monday" ) || parmp.day.equals( "Tuesday" ) ||
                            parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {

                           item = "54GF11";

                           if (parmp.p9 == 1) {                   // if 9 holes

                              item = "54GF12";
                           }

                        } else {

                           if (parmp.time < 1200) {          // Friday - AM or PM?

                              item = "54GF13";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "54GF14";
                              }

                           } else {

                              item = "54GF15";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "54GF16";
                              }
                           }
                        }
                     }
                  }

                  if (mship.equals( "Honorary" )) {

                     if (parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                         parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3 ||
                         parmp.date == Hdate4 || parmp.date == Hdate5) {

                        item = "55GF03";

                        if (parmp.p9 == 1) {                   // if 9 holes

                           item = "55GF04";
                        }

                     } else {

                        if (parmp.day.equals( "Monday" ) || parmp.day.equals( "Tuesday" ) ||
                            parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {

                           item = "55GF10";

                           if (parmp.p9 == 1) {                   // if 9 holes

                              item = "55GF11";
                           }

                        } else {

                           if (parmp.time < 1200) {          // Friday - AM or PM?

                              item = "55GF12";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "55GF13";
                              }

                           } else {

                              item = "55GF14";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "55GF15";
                              }
                           }
                        }
                     }
                  }

                  if (mship.startsWith( "Sports Club" )) {

                     if (parmp.day.equals( "Monday" ) || parmp.day.equals( "Tuesday" ) ||
                         parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {

                        item = "54GF17";

                        if (parmp.p9 == 1) {                   // if 9 holes

                           item = "54GF18";
                        }

                     } else {

                        if (parmp.day.equals( "Friday" ) && parmp.time < 1200) {          // Friday - AM or PM?

                           item = "54GF19";

                           if (parmp.p9 == 1) {                   // if 9 holes

                              item = "54GF20";
                           }

                        } else {

                           item = "49GF03";
                        }
                     }
                  }
               }        // end of IF Royal Oaks CC
               
               if (club.equals("austincountryclub")) {
                   
                   if (mship.equalsIgnoreCase("Social") || mship.equalsIgnoreCase("Racquet")) {
                       
                       if (parmp.day.equals("Friday") || parmp.day.equals("Saturday") || parmp.day.equals("Sunday") 
                        || parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate2b || parmp.date == Hdate3) {
                           
                           item = "91WE01";
                       } else {
                           item = "91WD01";
                       }
                   }
               }



               if (!item.equals("") && item != null) {

                  //
                  //  We can now build the charge string
                  //
                  StringBuffer tempSB = new StringBuffer(mnum);     // put member # in string buffer
                  tempSB.append(",Y,1,");                           // indicator, # of guests (players?)
                  tempSB.append(lname);                             // last name
                  tempSB.append(",");
                  tempSB.append(fname);                             // first name
                  tempSB.append(",,");                              // skip phone #
                  tempSB.append(parmp.sdate);                       // date of tee time
                  tempSB.append(",");
                  tempSB.append(parmp.stime);                       // time (includes A or P for AM or PM and ,)
                  tempSB.append(parmp.courseid);                    // Course Code
                  tempSB.append(",,,,,,");                          // skips
                  tempSB.append(item);                              // Sales Item #
                  tempSB.append(",1,");                             // units sold
                  tempSB.append(resnum);                            // Reservation #
                  tempSB.append(",,");                              // unused
                  tempSB.append(ttidnum);                           // Tee Time Id #
                  tempSB.append(",,,N,,,Y");                        // units sold, skips, Prepaid, Checked-in

                  line = tempSB.toString();                         // save as string value

                  out.print(line);
                  out.println();      // output the line

                  done = 1;           // indicate charge sent

                  ttidn++;            // bump tee time id number
                  ttidnum++;

                  //
                  //  Save charge data in pos_hist for reports
                  //
                  parmp.hist_posid = mnum;
                  parmp.hist_player = fname + " " + lname;   // use member name
                  parmp.hist_price = "";
                  parmp.hist_item_name = "Green Fee";
                  parmp.hist_item_num = item;

                  add_POS_hist(parmp, con);       // go make the entry
               }

            }      // end of Mship Charge processing

         }
         catch (Exception e3) {

            String errorMsg3 = "Error3 in Proshop_sheet_pos.buildJonas for club: " +club;
            errorMsg3 = errorMsg3 + ", Exception: " + e3.getMessage();                 // build error msg

            SystemUtils.logError(errorMsg3);                                           // log it
         }


      } else {

         //
         //*******************************************************************************************
         //  player passed is a GUEST - charge the member for this too
         //*******************************************************************************************
         //
         try {
            
            loop3:
            while (i < parmp.MAX_Guests) {

               if (parmp.player.startsWith( parmp.gtype[i] )) {

                  gtype = parmp.gtype[i];               // set guest type description
                  if (parmp.p9 == 1) {                   // if 9 holes
                     item = parmp.gst9I[i];                 // set guest item group #
                  } else {
                     item = parmp.gstI[i];                 // set guest item group #
                  }
                  break loop3;
               }
               i++;
            }

            //
            //  Custom item codes
            //
            /*
            if (club.equals( "medinahcc" )) {      // if Medinah do manual item codes

               if (parmp.course.equals( "No 1" )) {         // Course #1

                  if (parmp.player.startsWith( "Guest" )) {         // normal Guest

                     if (parmp.time > 1600) {

                        item = "120100";              // after 4 PM

                     } else {

                        if ((parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                            parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3) && parmp.time < 1100) {
//                            parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3) && parmp.time < 1200) {  // changed 6/05/07

                           item = "130100";           // S-S-H before noon

                        } else {

                           item = "110100";           // T-F and others
                        }
                     }
                  }

                  if (parmp.player.startsWith( "Unaccom" )) {       // Unaccompanied Guest

                     item = "140100";
                  }

                  if (parmp.player.startsWith( "Replay" )) {        // Replay Guest

                     item = "140400";
                  }
               }                             // end of course #1

               if (parmp.course.equals( "No 2" )) {         // Course #2

                  if (parmp.player.startsWith( "Guest" )) {         // normal Guest

                     if (parmp.time > 1600) {

                        item = "120200";              // after 4 PM

                     } else {

                        if ((parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                            parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3) && parmp.time < 1100) {
//                            parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3) && parmp.time < 1200) {  // changed 6/05/07

                           item = "130200";           // S-S-H before noon

                        } else {

                           item = "110200";           // T-F and others
                        }
                     }
                  }

                  if (parmp.player.startsWith( "Unaccom" )) {       // Unaccompanied Guest

                     item = "140200";
                  }

                  if (parmp.player.startsWith( "Replay" )) {        // Replay Guest

                     item = "140400";
                  }
               }                             // end of course #2

               if (parmp.course.equals( "No 3" )) {         // Course #3

                  if (parmp.player.startsWith( "Guest" )) {         // normal Guest

                     //  changed on 10/16/07 as follows
                     //
                     //   1.  After 4:00 PM every day = 120300 CHANGE to After 2:00PM on Weekends and
                     //       Holidays and after 4:00PM on Weekdays
                     //
                     //   2.  Before 11:00 AM on Sat, Sun and holidays = 130300- CHANGE to 130400
                     //
                     //   3.  If not 1 or 2, then = 110300 CORRECT

                     item = "110300";             // default

                     if (parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                         parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3) {

                        if (parmp.time > 1400) {

                           item = "120300";              // after 2 PM on w/e & holidays

                        } else {

                           if (parmp.time < 1100) {

                              item = "130400";              // before 11 AM on w/e & holidays
                           }
                        }

                     } else {      // Week Day

                        if (parmp.time > 1600) {

                           item = "120300";              // after 4 PM on weekdays
                        }
                     }
                  }

                  if (parmp.player.startsWith( "Unaccom" )) {       // Unaccompanied Guest

                     item = "140300";
                  }
               }                             // end of course #3
            }
            * 
            */

            //
            //  Custom item codes for Virginia CC
            //
            if (club.equals( "virginiacc" )) {      // if Virginia CC do manual item codes

               item = "";                           // init item code

               if (parmp.course.equals( "James River" )) {         // James River Course

                  if (parmp.player.startsWith( "Weekday" )) {

                     item = "FEEGFJRWD";
                  }
                  if (parmp.player.startsWith( "Weekend" )) {

                     item = "FEEGFJRWE";
                  }
                  if (parmp.player.startsWith( "WkDay Family" )) {

                     item = "FEEGFJRFWD";

                     if (parmp.p9 == 1) {

                        item = "FEEGXFWDF";
                     }
                  }
                  if (parmp.player.startsWith( "WkEnd Family" )) {

                     item = "FEEGFWEF";

                     if (parmp.p9 == 1) {

                        item = "FEEGFJRWEF";
                     }
                  }
                  if (parmp.player.startsWith( "Junior WkDay" )) {

                     item = "FEEGFJRWDJ";
                  }
                  if (parmp.player.startsWith( "Junior WkEnd" )) {

                     item = "FEEGFJRWEJ";
                  }

                  if (!item.equals( "" )) {

                     if (parmp.p9 == 1) {                   // if 9 holes

                        item = item + "9";

                     } else {

                        item = item + "18";
                     }
                  }

                  if (parmp.player.startsWith( "Employee" ) || parmp.player.startsWith( "Industry Comp" ) ||
                      parmp.player.startsWith( "VCU" ) || parmp.player.startsWith( "Collegiate" ) ||
                      parmp.player.startsWith( "U of R" ) || parmp.player.startsWith( "St Chris" ) ||
                      parmp.player.startsWith( "Reciprocal" ) ||
                      parmp.player.startsWith( "St Catherines" ) || parmp.player.startsWith( "Assoc Guest" )) {

                     item = "FEEGFJRCOMP";
                  }
               }                             // end of James River

               if (parmp.course.equals( "Tuckahoe Creek" )) {         // Tuckahoe Creek Course

                  if (parmp.player.startsWith( "Weekday" )) {

                     item = "GFTCWD";

                     if (parmp.p9 == 1) {

                        item = "FEEGFTCWD";
                     }
                  }
                  if (parmp.player.startsWith( "Weekend" )) {

                     item = "FEEGFTCWE";
                  }
                  if (parmp.player.startsWith( "WkDay Family" )) {

                     item = "FEEGFTCWDF";
                  }
                  if (parmp.player.startsWith( "WkEnd Family" )) {

                     item = "FEEGFTCWEF";
                  }
                  if (parmp.player.startsWith( "Junior WkDay" )) {

                     item = "FEEGFTCWDJ";
                  }
                  if (parmp.player.startsWith( "Junior WkEnd" )) {

                     item = "FEEGFTCWEJ";
                  }


                  if (!item.equals( "" )) {

                     if (parmp.p9 == 1) {                   // if 9 holes

                        item = item + "9";

                     } else {

                        item = item + "18";
                     }
                  }

                  if (parmp.player.startsWith( "Employee" ) || parmp.player.startsWith( "Industry Comp" ) ||
                      parmp.player.startsWith( "VCU" ) || parmp.player.startsWith( "Collegiate" ) ||
                      parmp.player.startsWith( "U of R" ) || parmp.player.startsWith( "St Chris" ) ||
                      parmp.player.startsWith( "Reciprocal" ) ||
                      parmp.player.startsWith( "St Catherines" ) || parmp.player.startsWith( "Assoc Guest" )) {

                     item = "FEEGFTCCOMP";
                  }
               }                             // end of Tuckahoe Creek

               if (parmp.course.equals( "Westhampton" )) {         // Westhampton Course

                  if (parmp.player.startsWith( "Weekday" )) {

                     item = "FEEGFWHWK";

                     if (parmp.p9 == 1) {

                        item = "FEEGFWHWDAY";
                     }
                  }
                  if (parmp.player.startsWith( "Weekend" )) {

                     item = "FEEGFWHWE";
                  }
                  if (parmp.player.startsWith( "WkDay Family" )) {

                     item = "FEEGFWHWDF";

                     if (parmp.p9 == 1) {

                        item = "FEEGFWHWD";
                     }
                  }
                  if (parmp.player.startsWith( "WkEnd Family" )) {

                     item = "FEEGFWHWEF";
                  }
                  if (parmp.player.startsWith( "Junior WkDay" )) {

                     item = "FEEGFWHWDJ";
                  }
                  if (parmp.player.startsWith( "Junior WkEnd" )) {

                     item = "FEEGFWHWEJ";
                  }

                  if (!item.equals( "" )) {

                     if (parmp.p9 == 1) {                   // if 9 holes

                        item = item + "9";

                     } else {

                        item = item + "18";
                     }
                  }

                  if (parmp.player.startsWith( "Employee" ) || parmp.player.startsWith( "Industry Comp" ) ||
                      parmp.player.startsWith( "VCU" ) || parmp.player.startsWith( "Collegiate" ) ||
                      parmp.player.startsWith( "U of R" ) || parmp.player.startsWith( "St Chris" ) ||
                      parmp.player.startsWith( "Reciprocal" ) ||
                      parmp.player.startsWith( "St Catherines" ) || parmp.player.startsWith( "Assoc Guest" )) {

                     item = "FEEGFWHCOMP";
                  }
               }                             // end of Westhampton Course
            }        // end of Virginia CC


            //
            //  St. Clair CC - custom guest codes based on course
            //
            if (club.equals( "stclaircc" )) {

               if (parmp.course.equals( "Championship" )) {         // Championship Course

                  if (parmp.player.startsWith( "Regular GST" ) || parmp.player.startsWith( "Unaccomp" ) ||
                      parmp.player.startsWith( "Reciprocal" )) {

                     item = "18MFUL";

                     if (parmp.p9 == 1) {

                        item = "09MFUL";
                     }
                  }

                  if (parmp.player.startsWith( "Family GST" )) {

                     item = "18MPAR";

                     if (parmp.p9 == 1) {

                        item = "09MPAR";
                     }
                  }

                  if (parmp.player.startsWith( "PGA" ) || parmp.player.startsWith( "Employees" ) ||
                      parmp.player.startsWith( "Comp" ) || parmp.player.startsWith( "High School Golf" ) ) {

                     item = "18MNON";

                     if (parmp.p9 == 1) {

                        item = "09MNON";
                     }
                  }


               } else {


                  //
                  // Terrace Course
                  //
                  if (parmp.player.startsWith( "Regular GST" ) || parmp.player.startsWith( "Unaccomp" ) ||
                      parmp.player.startsWith( "Reciprocal" ) || parmp.player.startsWith( "Family GST" )) {

                     item = "18TFUL";

                     if (parmp.p9 == 1) {

                        item = "09TFUL";
                     }
                  }

                  if (parmp.player.startsWith( "PGA" ) || parmp.player.startsWith( "Employees" ) ||
                      parmp.player.startsWith( "Comp" ) || parmp.player.startsWith( "High School Golf" ) ) {

                     item = "18TNON";

                     if (parmp.p9 == 1) {

                        item = "09TNON";
                     }
                  }
               }
            }          // end of IF St. Clair CC


            //  If Belfair CC - custom guest codes based on course
            if (club.equals("belfair")) {
                
                if (parmp.course.equals("East Course")) {         // East Course
                
                    if (parmp.player.startsWith( "GST" )) {
                        
                        item = "000115";
                        
                        if (parmp.p9 == 1) {
                            
                            item = "000116";
                        }
                        
                    } else if (parmp.player.startsWith( "UG" )) {
                        
                        item = "000117";
                        
                        if (parmp.p9 == 1) {
                            
                            item = "000118";
                        }
                        
                    } else if (parmp.player.startsWith( "FG" )) {
                        
                        item = "000121";
                        
                        if (parmp.p9 == 1) {
                            
                            item = "000122";
                        }
                        
                    } else if (parmp.player.startsWith( "REPLAY" )) {
                        
                        item = "000127";
                        
                    } else if (parmp.player.startsWith( "RECIPROCAL" )) {
                        
                        item = "000098";
                        
                    } else if (parmp.player.startsWith( "JUNIOR GST" )) {
                        
                        item = "000177";

                        if (parmp.p9 == 1) {

                            item = "000178";
                        }
                        
                    } else if (parmp.player.startsWith( "MKT" )) {
                        
                        item = "000186";
                        
                    } else if (parmp.player.startsWith( "FOUNDING GST" )) {
                        
                        item = "000188";
                        
                    } else if (parmp.player.startsWith( "PGA" )) {
                        
                        item = "000125";
                        
                    } else if (parmp.player.startsWith( "TOURNEY" )) {
                        
                        item = "000129";
                        
                    } else if (parmp.player.startsWith( "STAFF" )) {
                        
                        item = "000126";
                        
                    } else if (parmp.player.startsWith( "RECIP GST" )) {
                        
                        item = "000190";
                        
                        if (parmp.p9 == 1) {
                            
                            item = "000191";
                        }
                        
                    } else if (parmp.player.startsWith( "REAL ESTATE" )) {
                        
                        item = "000123";
                    }
                    
                } else {        // West Course
                
                    if (parmp.player.startsWith( "GST" )) {
                        
                        item = "000100";
                        
                        if (parmp.p9 == 1) {
                            
                            item = "000101";
                        }
                        
                    } else if (parmp.player.startsWith( "UG" )) {
                        
                        item = "000102";
                        
                        if (parmp.p9 == 1) {
                            
                            item = "000103";
                        }
                        
                    } else if (parmp.player.startsWith( "FG" )) {
                        
                        item = "000106";
                        
                        if (parmp.p9 == 1) {
                            
                            item = "000107";
                        }
                        
                    } else if (parmp.player.startsWith( "REPLAY" )) {
                        
                        item = "000112";
                        
                    } else if (parmp.player.startsWith( "RECIPROCAL" )) {
                        
                        item = "000098";
                        
                    } else if (parmp.player.startsWith( "JUNIOR GST" )) {
                        
                        item = "000099";

                        if (parmp.p9 == 1) {

                            item = "000173";
                        }
                        
                    } else if (parmp.player.startsWith( "MKT" )) {
                        
                        item = "000187";
                        
                    } else if (parmp.player.startsWith( "FOUNDING GST" )) {
                        
                        item = "000189";
                        
                    } else if (parmp.player.startsWith( "PGA" )) {
                        
                        item = "000108";
                        
                    } else if (parmp.player.startsWith( "TOURNEY" )) {
                        
                        item = "000114";
                        
                    } else if (parmp.player.startsWith( "STAFF" )) {
                        
                        item = "000109";
                        
                    } else if (parmp.player.startsWith( "RECIP GST" )) {
                        
                        item = "000192";
                        
                        if (parmp.p9 == 1) {
                            
                            item = "000193";
                        }
                        
                    } else if (parmp.player.startsWith( "REAL ESTATE" )) {
                        
                        item = "000104";
                    }
                }
                
            } // end belfair
            
            

            //
            //  Continue if item code found
            //
            if (!item.equals( "" ) && !item.equals( "0" ) && item != null) {   // if GUEST pos charge found

               //
               //  IF Congressional - check for custom codes based on Course
               //
               /*
               if (club.equals( "congressional" )) {

                  tcourse = congressionalCustom.getFullCourseName(parmp.date, daynum, parmp.course);   // get course name for this date

                  if (parmp.player.startsWith( "Local Guest" )) {

                     item = "000G42";                     // item code for Blue course

                     if (tcourse.endsWith( "Gold" )) {

                        item = "000G43";                 // item code for Gold course
                     }
                  }
                  if (parmp.player.startsWith( "Non Local Guest" )) {

                     item = "000G42";                     // item code for Blue course

                     if (tcourse.endsWith( "Gold" )) {

                        item = "000G43";                 // item code for Gold course
                     }
                  }
                  if (parmp.player.startsWith( "Blue Coupon" ) || parmp.player.startsWith( "Gold Coupon" )) {

                     item = "000G42";                     // item code for Blue course

                     if (tcourse.endsWith( "Gold" )) {

                        item = "000G43";                 // item code for Gold course
                     }
                  }
                  if (parmp.player.startsWith( "Unaccomp Guest" )) {

                     item = "000G52";                     // item code for Blue course

                     if (tcourse.endsWith( "Gold" )) {

                        item = "000G53";                 // item code for Gold course
                     }
                  }
                  if (parmp.player.startsWith( "Cert Jr" )) {

                     item = "000G45";                     // item code for Blue course

                     if (tcourse.endsWith( "Gold" )) {

                        item = "000G44";                 // item code for Gold course
                     }
                  }
               }
               * 
               */



               //
               //  If Royal Oaks Houston - process by guest type and day
               //
               if (club.equals("royaloakscc")) {

                  if (parmp.player.startsWith( "Guest" )) {

                     if (parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                         parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3 ||
                         parmp.date == Hdate4 || parmp.date == Hdate5) {

                        item = "49GF03";

                        if (parmp.p9 == 1) {                   // if 9 holes

                           item = "49GF04";
                        }

                     } else {

                        if (parmp.day.equals( "Monday" ) || parmp.day.equals( "Tuesday" ) ||
                            parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {

                           item = "49GF15";

                           if (parmp.p9 == 1) {                   // if 9 holes

                              item = "49GF16";
                           }

                        } else {

                           if (parmp.time < 1200) {          // Friday - AM or PM?

                              item = "49GF17";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "49GF18";
                              }

                           } else {

                              item = "49GF19";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "49GF20";
                              }
                           }
                        }
                     }
                  }

                  if (parmp.player.startsWith( "Hon Guest" )) {

                     if (parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                         parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3 ||
                         parmp.date == Hdate4 || parmp.date == Hdate5) {

                        item = "55GF16";

                        if (parmp.p9 == 1) {                   // if 9 holes

                           item = "55GF17";
                        }

                     } else {

                        if (parmp.day.equals( "Monday" ) || parmp.day.equals( "Tuesday" ) ||
                            parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {

                           item = "55GF18";

                           if (parmp.p9 == 1) {                   // if 9 holes

                              item = "55GF19";
                           }

                        } else {

                           if (parmp.time < 1200) {          // Friday - AM or PM?

                              item = "55GF20";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "55GF21";
                              }

                           } else {

                              item = "55GF22";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "55GF23";
                              }
                           }
                        }
                     }
                  }

                  if (parmp.player.startsWith( "Ext Family" )) {

                     if (parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                         parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3 ||
                         parmp.date == Hdate4 || parmp.date == Hdate5) {

                        item = "49GF07";

                        if (parmp.p9 == 1) {                   // if 9 holes

                           item = "49GF08";
                        }

                     } else {

                        if (parmp.day.equals( "Monday" ) || parmp.day.equals( "Tuesday" ) ||
                            parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {

                           item = "49GF21";

                           if (parmp.p9 == 1) {                   // if 9 holes

                              item = "49GF22";
                           }

                        } else {

                           if (parmp.time < 1200) {          // Friday - AM or PM?

                              item = "49GF23";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "49GF24";
                              }

                           } else {

                              item = "49GF25";

                              if (parmp.p9 == 1) {                   // if 9 holes

                                 item = "49GF26";
                              }
                           }
                        }
                     }
                  }

                  if (parmp.player.startsWith( "Unaccomp" )) {

                     if (parmp.day.equals( "Saturday" ) || parmp.day.equals( "Sunday" ) ||
                         parmp.date == Hdate1 || parmp.date == Hdate2 || parmp.date == Hdate3 ||
                         parmp.date == Hdate4 || parmp.date == Hdate5) {

                        item = "49GF33";

                     } else {

                        if (parmp.day.equals( "Monday" ) || parmp.day.equals( "Tuesday" ) ||
                            parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {

                           item = "49GF27";

                        } else {

                           if (parmp.time < 1200) {          // Friday - AM or PM?

                              item = "49GF29";

                           } else {

                              item = "49GF31";
                           }
                        }
                     }
                  }
               }      // end of IF Royal Oaks CC




               //
               //  We can now build the charge string
               //
               StringBuffer tempSB = new StringBuffer(mnum);     // put member # in string buffer
               tempSB.append(",Y,1,");                           // indicator, # of guests (players?)
               tempSB.append(lname);                             // last name
               tempSB.append(",");
               tempSB.append(fname);                             // first name
               tempSB.append(",,");                              // skip phone #
               tempSB.append(parmp.sdate);                       // date of tee time
               tempSB.append(",");
               tempSB.append(parmp.stime);                       // time (includes A or P for AM or PM and ,)
               tempSB.append(parmp.courseid);                    // Course Code
               tempSB.append(",,,,,,");                          // skips
               tempSB.append(item);                              // Sales Item #
               tempSB.append(",1,");                             // units sold
               tempSB.append(resnum);                            // Reservation #
               tempSB.append(",,");                              // unused
               tempSB.append(ttidnum);                           // Tee Time Id #
               tempSB.append(",,,N,,,Y");                        // units sold, skips, Prepaid, Checked-in

               line = tempSB.toString();                         // save as string value

               out.print(line);
               out.println();      // output the line

               done = 1;           // indicate charge sent

               ttidn++;            // bump tee time id number
               ttidnum++;

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = mnum;
               parmp.hist_player = parmp.player;          // if guest
               parmp.hist_price = "";
               parmp.hist_item_name = "Guest Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry
            }
            
         }
         catch (Exception e4) {

            String errorMsg4 = "Error4 in Proshop_sheet_pos.buildJonas for club: " +club;
            errorMsg4 = errorMsg4 + ", Exception: " + e4.getMessage();                 // build error msg

            SystemUtils.logError(errorMsg4);                                           // log it
         }
            
      }     // end of guest processing

   }        // end of IF posid/mnum

   return(done);
 }                   // end of buildJonas


 // ********************************************************************
 //  Process the TAI POS charges for an individual member
 //
 //  Build an ASCII file containing the following:
 //
 //   Columns:
 //       1 Course Id
 //       2 Date of Tee Time (mm/dd/yyyy)
 //       3 Time of Tee Time (hh:mm)
 //       4 Member Id (mNum)
 //       5 Member Name (member responsible for the charge)
 //       6 Quantity (always 1)
 //       7 SKU Number (item charge code)
 //
 //    Check the mode of trans for charges
 // ********************************************************************

 private static int buildTAI(parmPOS parmp, PrintWriter out, Connection con, String club) {


   ResultSet rs = null;

   String mship = "";
   String mnum = "";
   String posid = "";
   String fname = "";
   String lname = "";
   String tpos = "";
   String mpos = "";
   String mposc = "";
   String gpos = "";
   String gtype = "";
   String tmode = "";
   String tmodea = "";
   String item = "";
   String line = "";
   String eventItem = "";

   int i = 0;
   int p9c = 0;
   int done = 0;


   try {
      //
      //  get the member's mship info
      //
      PreparedStatement pstmtc = con.prepareStatement (
         "SELECT name_last, name_first, m_ship, memNum, posid FROM member2b WHERE username= ?");

      pstmtc.clearParameters();        // clear the parms
      pstmtc.setString(1, parmp.user);

      rs = pstmtc.executeQuery();

      if (rs.next()) {

         lname = rs.getString(1);
         fname = rs.getString(2);
         mship = rs.getString(3);
         mnum = rs.getString(4);
         posid = rs.getString(5);
      }
      pstmtc.close();

   }
   catch (Exception e1) {

      String errorMsg1 = "Error1 in Proshop_sheet_pos.buildTAI for club: " + club;
      errorMsg1 = errorMsg1 + ", Exception: " + e1.getMessage();      // build error msg

      SystemUtils.logError(errorMsg1);                                       // log it
   }

   //
   //  Skip if no mNum/posid - otherwise entire file will fail
   //
   if (!mnum.equals( "" )) {

      try {

         //
         //  First check if there is a charge amount associated with this member's mode of trans
         //
         i = 0;
         loop1:
         while (i < parmp.MAX_Tmodes) {

            if (parmp.tmodea[i].equals( parmp.pcw )) {     // if matching mode of trans found

               tmode = parmp.tmode[i];             // get full description of tmode
               if (parmp.p9 == 1) {                   // if 9 holes
                  item = parmp.t9pos[i];               // get Item Group # for tmode
               } else {
                  item = parmp.tpos[i];               // get Item Group # for tmode
               }
               break loop1;
            }
            i++;
         }

         if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found for Mode of Trans selected

            //
            //  We can now build the charge string
            //
            StringBuffer tempSB = new StringBuffer(parmp.courseid);  // put Course Id in string buffer
            tempSB.append(",");
            tempSB.append(parmp.sdate);                              // date of tee time
            tempSB.append(",");
            tempSB.append(parmp.stime);                              // time (includes A or P for AM or PM and ,)
            tempSB.append(",");
            tempSB.append(mnum);                                     // member number
            tempSB.append(",");
            tempSB.append(fname);                                    // first name
            tempSB.append(" ");                                      // space
            tempSB.append(lname);                                    // last name
            tempSB.append(",1,");                                    // quantity
            tempSB.append(item);                                     // Sales Item Code

            line = tempSB.toString();                         // save as string value

            out.print(line);
            out.println();      // output the line

            done = 1;           // indicate charge sent

            //
            //  Save charge data in pos_hist for reports
            //
            parmp.hist_posid = mnum;
            if (!parmp.player.equals( "" )) {
               parmp.hist_player = parmp.player;          // if guest
            } else {
               parmp.hist_player = fname + " " + lname;   // else use member name
            }
            parmp.hist_price = "";
            parmp.hist_item_name = parmp.pcw;
            parmp.hist_item_num = item;

            add_POS_hist(parmp, con);       // go make the entry
         }

         //
         //  get the mship class and charge amount, if any and if player is a member!
         //
         if (parmp.player.equals( "" )) {    // if member
            
            eventItem = parmp.mempos;        // get event item code if configured (used below)

            i = 0;
            item = "";
            loop2:
            while (i < parmp.MAX_Mships) {

               if (parmp.mship[i].equalsIgnoreCase( mship )) {     // if matching mode mship type

                  if (parmp.p9 == 1) {                   // if 9 holes
                     item = parmp.mship9I[i];               // get mship item group #
                  } else {
                     item = parmp.mshipI[i];               // get mship item group #
                  }
                  break loop2;
               }
               i++;
            }

            if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found for membership (non-golf mship charge)

               //
               //  We can now build the charge string
               //
               StringBuffer tempSB = new StringBuffer(parmp.courseid);  // put Course Id in string buffer
               tempSB.append(",");
               tempSB.append(parmp.sdate);                              // date of tee time
               tempSB.append(",");
               tempSB.append(parmp.stime);                              // time (includes A or P for AM or PM and ,)
               tempSB.append(",");
               tempSB.append(mnum);                                     // member number
               tempSB.append(",");
               tempSB.append(fname);                                    // first name
               tempSB.append(" ");                                      // space
               tempSB.append(lname);                                    // last name
               tempSB.append(",1,");                                    // quantity
               tempSB.append(item);                                     // Sales Item Code

               line = tempSB.toString();                         // save as string value

               out.print(line);
               out.println();      // output the line

               done = 1;           // indicate charge sent

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = mnum;
               parmp.hist_player = fname + " " + lname;   // use member name
               parmp.hist_price = "";
               parmp.hist_item_name = "Green Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry

            }      // end of Mship Charge processing

         } else {

            //
            //  player passed is a guest - charge the member for this too
            //
            eventItem = parmp.gstpos;        // get event item code if configured (used below)

            //
            //  First check if there is a charge amount associated with this guest type
            //
            i = 0;
            item = "";
            loop3:
            while (i < parmp.MAX_Guests) {

               if (parmp.player.startsWith( parmp.gtype[i] )) {

                  gtype = parmp.gtype[i];               // set guest type description
                  if (parmp.p9 == 1) {                   // if 9 holes
                     item = parmp.gst9I[i];                 // set guest item group #
                  } else {
                     item = parmp.gstI[i];                 // set guest item group #
                  }
                  break loop3;
               }
               i++;
            }

            if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found

               //
               //  We can now build the charge string
               //
               StringBuffer tempSB = new StringBuffer(parmp.courseid);  // put Course Id in string buffer
               tempSB.append(",");
               tempSB.append(parmp.sdate);                              // date of tee time
               tempSB.append(",");
               tempSB.append(parmp.stime);                              // time (includes A or P for AM or PM and ,)
               tempSB.append(",");
               tempSB.append(mnum);                                     // member number
               tempSB.append(",");
               tempSB.append(fname);                                    // first name
               tempSB.append(" ");                                      // space
               tempSB.append(lname);                                    // last name
               tempSB.append(",1,");                                    // quantity
               tempSB.append(item);                                     // Sales Item Code

               line = tempSB.toString();                         // save as string value

               out.print(line);
               out.println();      // output the line

               done = 1;           // indicate charge sent

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = mnum;
               parmp.hist_player = parmp.player;          // if guest
               parmp.hist_price = "";
               parmp.hist_item_name = "Guest Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry
            }
         }     // end of guest processing
         
         
         //
         //  Now check for an event item code - if this tee time is part of an event and a charge code has been configured for the event
         //
         if (!eventItem.equals( "" ) && !eventItem.equals( "0" )) {   // if pos charge found

            StringBuffer tempSB = new StringBuffer(parmp.courseid);  // put Course Id in string buffer
            tempSB.append(",");
            tempSB.append(parmp.sdate);                              // date of tee time
            tempSB.append(",");
            tempSB.append(parmp.stime);                              // time (includes A or P for AM or PM and ,)
            tempSB.append(",");
            tempSB.append(mnum);                                     // member number
            tempSB.append(",");
            tempSB.append(fname);                                    // first name
            tempSB.append(" ");                                      // space
            tempSB.append(lname);                                    // last name
            tempSB.append(",1,");                                    // quantity
            tempSB.append(eventItem);                                // Sales Item Code for the event (member item or guest item)

            line = tempSB.toString();                                // save as string value

            out.print(line);
            out.println();      // output the line

            done = 1;           // indicate charge sent

            //
            //  Save charge data in pos_hist for reports
            //
            parmp.hist_posid = mnum;
            if (parmp.player.equals("")) {
               parmp.hist_player = fname + " " + lname;   // use member name
            } else {
               parmp.hist_player = parmp.player;          // use guest name
            }
            parmp.hist_price = "";
            parmp.hist_item_name = "Event Fee";
            parmp.hist_item_num = eventItem;

            add_POS_hist(parmp, con);       // go make the entry
         }
         
      }
      catch (Exception e2) {

         String errorMsg2 = "Error2 in Proshop_sheet_pos.buildTAI for club: " +club;
         errorMsg2 = errorMsg2 + ", Exception: " + e2.getMessage();                 // build error msg

         SystemUtils.logError(errorMsg2);                                           // log it
      }
      
   }   // end of IF mNum provided

   return(done);
 }                   // end of buildTAI


 
 // ********************************************************************
 //  Process the IBS POS charges for an individual member
 //
 //  Build individual charges into arrays to be placed into an XML file later:
 //
 //   Columns:
 //       1 Member Number
 //       2 Extension (000, 001, 002, etc. - 000 is default)
 //       3 Date of Tee Time (mm/dd/yyyy)
 //       4 Batch Code (Item Code)
 //       5 Fee (charge amount for item - dd.cc)
 //       6 Sales Tax amount
 //       7 Item Description
 //       8 Ticket # (we use the time)
 //
 // ********************************************************************

 private static int buildIBS(parmPOS parmp, PrintWriter out, Connection con, String club) {


   ResultSet rs = null;
   PreparedStatement pstmtc = null;

   String mship = "";
   String mnum = "";
   String posid = "";
   String fname = "";
   String lname = "";
   String tpos = "";
   String tposc = "";
   String mpos = "";
   String mposc = "";
   String gpos = "";
   String gtype = "";
   String tmode = "";
   String tmodea = "";
   String item = "";
   String cost = "";
   String line = "";
   String ext = "";
   String temp = "";

   int i = 0;
   int p9c = 0;
   int done = 0;

   double fee = 0;
   double salestax = 0;

   long sdate = parmp.date - ((parmp.date / 10000) * 10000);       // get mmdd (short date)
   

   try {
       
      //
      //  get the member's mship info
      //
      pstmtc = con.prepareStatement (
         "SELECT name_last, name_first, m_ship, memNum, posid FROM member2b WHERE username= ?");

      pstmtc.clearParameters();
      pstmtc.setString(1, parmp.user);

      rs = pstmtc.executeQuery();

      if (rs.next()) {

         lname = rs.getString(1);
         fname = rs.getString(2);
         mship = rs.getString(3);
         mnum = rs.getString(4);
         posid = rs.getString(5);
      }

   } catch (Exception exc) {

      Utilities.logError("Error1 in Proshop_sheet_pos.buildIBS for club: " + club + ", Exception: " + exc.getMessage());
      
   } finally {

        try { rs.close(); }
        catch (SQLException ignored) {}

        try { pstmtc.close(); }
        catch (SQLException ignored) {}

   }

   //
   //  Skip if no posid or missing hyphen - posid MUST be mnum-ext (i.e.  6700-000)
   //
   if (!posid.equals( "" ) && posid.indexOf("-") != -1) {

      try {

         //
         //  Check if there is a charge amount associated with this member's mode of trans
         //
         i = 0;
         loop1:
         while (i < parmp.MAX_Tmodes) {

            if (parmp.tmodea[i].equals( parmp.pcw )) {     // if matching mode of trans found

               salestax = parmp.salestaxt[i];          // get the sales tax rate for this tmode
               if (parmp.p9 == 1) {                    // if 9 holes
                  item = parmp.t9pos[i];               // get Item Group # for tmode
                  cost = parmp.t9posc[i];              // get Item Fee for tmode
               } else {
                  item = parmp.tpos[i];                // get Item Group # for tmode
                  cost = parmp.tposc[i];               // get Item Fee for tmode
               }
               break loop1;
            }
            i++;
            
         } // end tmode loop

         if (!item.equals( "" ) && !item.equals( "0" ) && item != null) {   // if pos charge found for Mode of Trans selected

            if (cost == null || cost.equals("")) {

               cost = "0";
               fee = 0;

            } else {

               fee = Double.parseDouble(cost);               // convert the item cost
            }
               
            if (salestax != 0 && !cost.equals( "0" )) {     // if sales tax required

               salestax = (fee * (salestax / 100));         // calculate the sales tax amount

               salestax = roundST(salestax);        // round to dd.cc value
            }
               
               
            // add the charge to parmp
            addCharge(parmp, posid, item, fee, salestax, 1);

            // indicate charge sent
            done = 1;

            // save charge data in pos_hist for reports
            parmp.hist_posid = posid;
            parmp.hist_price = "$" + cost;
            parmp.hist_tax = String.valueOf(salestax);
            parmp.hist_item_name = parmp.pcw;
            parmp.hist_item_num = item;
            // use guest name (parmp.player) or member name
            parmp.hist_player = (!parmp.player.equals( "" )) ? parmp.player : fname + " " + lname;
            
            // go make the entry
            add_POS_hist(parmp, con);
            
         } // end if charge found for tmode

         
         //
         //  get the mship class and charge amount, if any and if player is a member!
         //
         if (parmp.player.equals( "" )) {    // if member

            i = 0;
            salestax = 0;
            item = "";
            
            
            if (parmp.club.equals( "baltusrolgc" )) {

               //
               //  Baltusrol - certain mship types are charged at all times based on the course
               //
               salestax = 0;        // never a sales tax for Baltusrol
               cost = "0";          // default cost is zero
               
               if (parmp.course.equals( "Upper" )) {

                  if (mship.equals( "House" ) || mship.equals( "Provisional Golf" ) || mship.equals( "Special House" )) {

                     item = "1042001001";     
                     cost = "100.00"; 

                  } else if (parmp.p9 == 1) {       // if 9-hole round (all the same)

                     item = "1040001001";           // item code, but no fee 

                  } else if (mship.equals( "Class A" )) {

                     item = "1040001002";           // item code, but no fee 

                  } else if (mship.equals( "Emeritus" )) {

                     item = "1040001003";           // item code, but no fee 

                  } else if (mship.equals( "Executive" )) {

                     item = "1040001004";           // item code, but no fee 

                  } else if (mship.equals( "Exempt" )) {

                     item = "1040001005";           // item code, but no fee 

                  } else if (mship.equals( "Full Golf" )) {

                     item = "1040001006";           // item code, but no fee 

                  } else if (mship.equals( "Honorary" )) {

                     item = "1040001007";           // item code, but no fee 

                  } else if (mship.equals( "Junior" )) {

                     item = "1040001008";           // item code, but no fee 

                  } else if (mship.equals( "National" )) {

                     item = "1040001009";           // item code, but no fee 

                  } else if (mship.equals( "Non-Resident" )) {

                     item = "1040001010";           // item code, but no fee 

                  } else if (mship.equals( "Permit" )) {

                     item = "1040001011";           // item code, but no fee 

                  } else if (mship.equals( "Permit Holder" )) {

                     item = "1040001012";           // item code, but no fee 

                  } else if (mship.equals( "Senior" )) {

                     item = "1040001013";           // item code, but no fee 

                  } else if (mship.equals( "Special" )) {

                     item = "1040001014";           // item code, but no fee 
                     
                  } else if (mship.equals( "Links Privileges" )) {
                     
                     item = "1040001019";           // item code, but no fee 
                  }
                  
               } else {       // Lower course
                  
                  if (mship.equals( "House" ) || mship.equals( "Provisional Golf" ) || mship.equals( "Special House" )) {

                     item = "1002001001";     
                     cost = "100.00"; 

                  } else if (parmp.p9 == 1) {       // if 9-hole round (all the same)

                     item = "1000001001";           // item code, but no fee 

                  } else if (mship.equals( "Class A" )) {

                     item = "1000001002";           // item code, but no fee 

                  } else if (mship.equals( "Emeritus" )) {

                     item = "1000001003";           // item code, but no fee 

                  } else if (mship.equals( "Executive" )) {

                     item = "1000001004";           // item code, but no fee 

                  } else if (mship.equals( "Exempt" )) {

                     item = "1000001005";           // item code, but no fee 

                  } else if (mship.equals( "Full Golf" )) {

                     item = "1000001006";           // item code, but no fee 

                  } else if (mship.equals( "Honorary" )) {

                     item = "1000001007";           // item code, but no fee 

                  } else if (mship.equals( "Junior" )) {

                     item = "1000001008";           // item code, but no fee 

                  } else if (mship.equals( "National" )) {

                     item = "1000001009";           // item code, but no fee 

                  } else if (mship.equals( "Non-Resident" )) {

                     item = "1000001010";           // item code, but no fee 

                  } else if (mship.equals( "Permit" )) {

                     item = "1000001011";           // item code, but no fee 

                  } else if (mship.equals( "Permit Holder" )) {

                     item = "1000001012";           // item code, but no fee 

                  } else if (mship.equals( "Senior" )) {

                     item = "1000001013";           // item code, but no fee 

                  } else if (mship.equals( "Special" )) {

                     item = "1000001014";           // item code, but no fee 
                     
                  } else if (mship.equals( "Links Privileges" )) {
                     
                     item = "1000001021";           // item code, but no fee 
                  }
               }

            } else {   // NOT a custom

               loop2:
               while (i < parmp.MAX_Mships) {

                  if (parmp.mship[i].equalsIgnoreCase( mship )) {     // if matching mode mship type

                     salestax = parmp.salestaxm[i];            // get the sales tax rate for this mship type

                     if (parmp.p9 == 1) {                      // if 9 holes
                        item = parmp.mship9I[i];               // get mship item group #
                        cost = parmp.m9posc[i];                // get Item Fee
                     } else {
                        item = parmp.mshipI[i];                // get mship item group #
                        cost = parmp.mposc[i];                 // get Item Fee
                     }
                     break loop2;
                  }
                  i++;
               }
            }

            if (!item.equals( "" ) && !item.equals( "0" ) && item != null) {    // if pos charge found for membership (non-golf mship charge)

               if (cost == null || cost.equals("")) {
                  
                  cost = "0";
                  fee = 0;
                  
               } else {

                  fee = Double.parseDouble(cost);               // convert the item cost
               }
               
               if (salestax != 0 && !cost.equals( "0" )) {      // if sales tax required

                  salestax = (fee * (salestax / 100));          // calculate the sales tax amount
                  salestax = roundST(salestax);                 // round to dd.cc value
               }

               // add the charge to parmp
               addCharge(parmp, posid, item, fee, salestax, 1);
            
               // indicate charge sent
               done = 1;

               // save charge data in pos_hist for reports
               parmp.hist_posid = posid;
               parmp.hist_player = fname + " " + lname;   // use member name
               parmp.hist_price = "$" + cost;
               parmp.hist_tax = String.valueOf(salestax);
               parmp.hist_item_name = "Green Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry

            }      // end of Mship Charge processing

            
         } else {

            
            //
            //  player passed is a guest - charge the member for this too
            //
            //
            //  First check if there is a charge amount associated with this guest type
            //
            i = 0;
            salestax = 0;
            item = "";
            
            
            if (parmp.club.equals( "baltusrolgc" )) {

               //
               //  Baltusrol -  guest fees are based on the course (9 & 18 hole rounds are all charged the same)
               //
               salestax = 0;        // never a sales tax for Baltusrol
               cost = "0";          // default cost is zero
               
               if (parmp.course.equals( "Upper" )) {

                  if (parmp.player.startsWith( "Regular GST" )) {

                     item = "1044001001";     
                     cost = "150.00"; 

                  } else if (parmp.player.startsWith( "Family GST" )) {

                     item = "1046001001";        
                     cost = "75.00"; 

                  } else if (parmp.player.startsWith( "Winter GST" )) {

                     item = "1050001001";        
                     cost = "75.00"; 

                  } else if (parmp.player.startsWith( "Mini Outing" )) {

                     item = "1056001001";        
                     cost = "300.00"; 

                  } else if (parmp.player.startsWith( "Premier GST" )) {

                     item = "1058001001";        
                     cost = "350.00"; 

                  } else if (parmp.player.startsWith( "Outing" )) {

                     item = "9900001002";        
                     cost = "450.00"; 

                  } else if (parmp.player.startsWith( "Twilight Guest" )) {

                     item = "1048001001";        
                     cost = "100.00";          // was 90 (9/04/12)

                  } else if (parmp.player.startsWith( "Club GST" )) {

                     item = "1044001002";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "PGA Comp" )) {

                     item = "1090001001";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "Family Links" )) {

                     item = "1040001018";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "NJ State Seniors" )) {

                     item = "1052001001";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "NCAA" ) || parmp.player.startsWith( "WMGA" ) || parmp.player.startsWith( "GCSAA" ) || 
                             parmp.player.startsWith( "BGC Invitational" ) || parmp.player.startsWith( "Carter Cup" ) || 
                             parmp.player.startsWith( "Junior Interclub" ) || parmp.player.startsWith( "Dayton High" ) ) {

                     item = "1044001002";        
                     cost = "0"; 
                     
                  } else if (parmp.player.startsWith("Replay Guest")) {
                      
                     item = "1004001003";
                     cost = "0";
                  }
                  
               } else {       // Lower course
                  
                  if (parmp.player.startsWith( "Regular GST" )) {

                     item = "1004001001";     
                     cost = "150.00"; 

                  } else if (parmp.player.startsWith( "Family GST" )) {

                     item = "1006001001";        
                     cost = "75.00"; 

                  } else if (parmp.player.startsWith( "Winter GST" )) {

                     item = "1010001001";        
                     cost = "75.00"; 

                  } else if (parmp.player.startsWith( "Mini Outing" )) {

                     item = "1016001002";        
                     cost = "300.00"; 

                  } else if (parmp.player.startsWith( "Premier GST" )) {

                     item = "1018001001";        
                     cost = "350.00"; 

                  } else if (parmp.player.startsWith( "Outing" )) {

                     item = "1014001001";        
                     cost = "600.00"; 

                  } else if (parmp.player.startsWith( "Twilight Guest" )) {

                     item = "1008001001";        
                     cost = "100.00";               // was 90 (9/04/12)

                  } else if (parmp.player.startsWith( "Club GST" )) {

                     item = "1000001019";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "PGA Comp" )) {

                     item = "1080001001";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "Family Links" )) {

                     item = "1000001018";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "NJ State Seniors" )) {

                     item = "1000001020";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "Mayors Day" )) {

                     item = "1012001001";        
                     cost = "0"; 

                  } else if (parmp.player.startsWith( "NCAA" ) || parmp.player.startsWith( "WMGA" ) || parmp.player.startsWith( "GCSAA" ) || 
                             parmp.player.startsWith( "BGC Invitational" ) || parmp.player.startsWith( "Carter Cup" ) || 
                             parmp.player.startsWith( "Junior Interclub" ) || parmp.player.startsWith( "Dayton High" ) ) {

                     item = "1000001019";        
                     cost = "0"; 
                     
                  } else if (parmp.player.startsWith("Replay Guest")) {
                      
                     item = "1004001004";
                     cost = "0";
                  }
               }

            } else {   // NOT a custom

               loop3:
               while (i < parmp.MAX_Guests) {

                  if (parmp.player.startsWith( parmp.gtype[i] )) {

                     salestax = parmp.salestaxg[i];            // get the sales tax rate for this guest type

                     if (parmp.p9 == 1) {                      // if 9 holes
                        item = parmp.gst9I[i];                 // set guest item group #
                        cost = parmp.g9pos[i];                 // get Item Fee
                     } else {
                        item = parmp.gstI[i];                  // set guest item group #
                        cost = parmp.gpos[i];                  // get Item Fee
                     }
                     break loop3;
                  }
                  i++;
               }
            }       // end of IF custom

            if (!item.equals( "" ) && !item.equals( "0" ) && item != null) {    // if pos charge found
               
               if (cost == null || cost.equals("")) {
                  
                  cost = "0";
                  fee = 0;
                  
               } else {

                  fee = Double.parseDouble(cost);               // convert the item cost
               }
               
               if (salestax != 0 && !cost.equals( "0" )) {      // if sales tax required

                  salestax = (fee * (salestax / 100));          // calculate the sales tax amount
                  salestax = roundST(salestax);                 // round to dd.cc value
               }

               // add the charge to parmp
               addCharge(parmp, posid, item, fee, salestax, 1);

               // indicate charge sent
               done = 1;

               // save charge data in pos_hist for reports
               parmp.hist_posid = posid;
               parmp.hist_player = parmp.player;          // use guest name
               parmp.hist_price = "$" + cost;
               parmp.hist_tax = String.valueOf(salestax);
               parmp.hist_item_name = "Guest Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry
            }
         }     // end of guest processing

      } catch (Exception exc) {

          Utilities.logError("Error2 in Proshop_sheet_pos.buildIBS for club: " + club + ", i=" +i+ ", tax=" +salestax+ ", Exc: " + exc.getMessage()+ ", Exc: " + exc.toString());
         
      }
   }

   return(done);

 } // end of buildIBS


 
 
 
 // ********************************************************************
 //  Process the ClubSoft POS charges for an individual member
 //
 //  Build an ASCII file containing the following:
 //
 //   Columns:
 //       1 Member Number
 //       2 Date of Tee Time (mm/dd/yyyy)
 //       3 Time of Tee Time (hh:mm)
 //       4 Batch Code (Item Code)
 //       5 Quantity (always 1 - unless parmp.combineCharges = true)
 //
 //   File Name = ForeTeesnn.CSV (nn = 01, 02, 03, etc)
 //
 // ********************************************************************

 private static int buildClubSoft(parmPOS parmp, PrintWriter out, Connection con, String club) {


   ResultSet rs = null;

   String mship = "";
   String mnum = "";
   String posid = "";
   String fname = "";
   String lname = "";
   String tpos = "";
   String tposc = "";
   String mpos = "";
   String mposc = "";
   String gpos = "";
   String gtype = "";
   String tmode = "";
   String tmodea = "";
   String item = "";
   String line = "";
   String temp = "";
   String msub_type = "";

   int i = 0;
   int p9c = 0;
   int done = 0;

   long sdate = parmp.date - ((parmp.date / 10000) * 10000);       // get mmdd (short date)


   try {
      //
      //  get the member's mship info
      //
      PreparedStatement pstmtc = con.prepareStatement (
         "SELECT name_last, name_first, m_ship, memNum, posid, msub_type FROM member2b WHERE username= ?");

      pstmtc.clearParameters();        // clear the parms
      pstmtc.setString(1, parmp.user);

      rs = pstmtc.executeQuery();

      if (rs.next()) {

         lname = rs.getString(1);
         fname = rs.getString(2);
         mship = rs.getString(3);
         mnum = rs.getString(4);       // get both mNum & posid in case we need to use the other
         posid = rs.getString(5);
         msub_type = rs.getString(6);
      }
      pstmtc.close();

   }
   catch (Exception e1) {

      String errorMsg1 = "Error1 in Proshop_sheet_pos.buildClubSoft for club: " + club;
      errorMsg1 = errorMsg1 + ", Exception: " + e1.getMessage();      // build error msg

      SystemUtils.logError(errorMsg1);                                       // log it
   }

   if (posid.equals("")) {        // if POSID not present

      posid = mnum;               // use mNum
   }

   //
   //  Skip if no mNum/posid - otherwise entire file will fail
   //
   if (!posid.equals( "" )) {

      try {

         //
         //  Check if there is a charge amount associated with this member's mode of trans
         //
         i = 0;
         loop1:
         while (i < parmp.MAX_Tmodes) {

            if (parmp.tmodea[i].equals( parmp.pcw )) {     // if matching mode of trans found

               if (parmp.p9 == 1) {                    // if 9 holes
                  item = parmp.t9pos[i];               // get Item Group # for tmode
               } else {
                  item = parmp.tpos[i];                // get Item Group # for tmode
               }
               break loop1;
            }
            i++;
         }

         if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found for Mode of Trans selected

            //
            //  We can now build the charge string
            //
            StringBuffer tempSB = new StringBuffer(posid);           // put Member Id in string buffer
            tempSB.append(",");
            
            if (parmp.combineCharges == false) { 
            
                tempSB.append(parmp.sdate);                              // date of tee time (mm/dd/yyyy)
                tempSB.append(",");
                tempSB.append(parmp.stime);                              // time of tee time (hh:mm)
                tempSB.append(",");
                tempSB.append(item);                                     // Sales Item Code
                tempSB.append(",1");                                     // quantity

                line = tempSB.toString();                         // save as string value

                out.print(line);
                out.println();      // output the line
                
            } else {              // club wants to combine like charges - put this charge info into an arrayList instead
                
                tempSB.append(item);            // We only need the posid and Sales Item Code at this time
                
                line = tempSB.toString();       // save as string value

                parmp.chargesA.add(line);        // add this charge info to charges
            }

            done = 1;           // indicate charge sent

            //
            //  Save charge data in pos_hist for reports
            //
            parmp.hist_posid = posid;
            if (!parmp.player.equals( "" )) {
               parmp.hist_player = parmp.player;          // use guest name
            } else {
               parmp.hist_player = fname + " " + lname;   // use member name
            }
            parmp.hist_price = "";
            parmp.hist_item_name = parmp.pcw;
            parmp.hist_item_num = item;

            add_POS_hist(parmp, con);       // go make the entry
         }

         //
         //  get the mship class and charge amount, if any and if player is a member!
         //
         if (parmp.player.equals( "" )) {    // if member

            i = 0;
            item = "";
            
            if (!club.equals("overlakegcc") || !msub_type.equals("Past President")) {
                
                loop2:
                while (i < parmp.MAX_Mships) {

                   if (parmp.mship[i].equalsIgnoreCase( mship )) {     // if matching mode mship type

                      if (parmp.p9 == 1) {                      // if 9 holes
                         item = parmp.mship9I[i];               // get mship item group #
                      } else {
                         item = parmp.mshipI[i];                // get mship item group #
                      }
                      break loop2;
                   }
                   i++;
                }
            }

            if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found for membership (non-golf mship charge)

               //
               //  We can now build the charge string
               //
               StringBuffer tempSB = new StringBuffer(posid);            // put Member Id in string buffer
               tempSB.append(",");
            
               if (parmp.combineCharges == false) { 

                    tempSB.append(parmp.sdate);                              // date of tee time (mm/dd/yyyy)
                    tempSB.append(",");
                    tempSB.append(parmp.stime);                              // time of tee time (hh:mm)
                    tempSB.append(",");
                    tempSB.append(item);                                     // Sales Item Code
                    tempSB.append(",1");                                     // quantity

                    line = tempSB.toString();                         // save as string value

                    out.print(line);
                    out.println();      // output the line

               } else {              // club wants to combine like charges - put this charge info into an arrayList instead

                    tempSB.append(item);            // We only need the posid and Sales Item Code at this time

                    line = tempSB.toString();       // save as string value

                    parmp.chargesA.add(line);        // add this charge info to charges
               }

               done = 1;           // indicate charge sent

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = posid;
               parmp.hist_player = fname + " " + lname;   // use member name
               parmp.hist_price = "";
               parmp.hist_item_name = "Green Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry

            }      // end of Mship Charge processing

         } else {

            //
            //  player passed is a guest - charge the member for this too
            //
            //
            //  First check if there is a charge amount associated with this guest type
            //
            i = 0;
            item = "";
            loop3:
            while (i < parmp.MAX_Guests) {

               if (parmp.player.startsWith( parmp.gtype[i] )) {

                  if (parmp.p9 == 1) {                      // if 9 holes
                     item = parmp.gst9I[i];                 // set guest item group #
                  } else {
                     item = parmp.gstI[i];                  // set guest item group #
                  }
                  break loop3;
               }
               i++;
            }

            if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found

               //
               //  We can now build the charge string
               //
               StringBuffer tempSB = new StringBuffer(posid);            // put Member Id in string buffer
               tempSB.append(",");
            
               if (parmp.combineCharges == false) { 

                   tempSB.append(parmp.sdate);                              // date of tee time (mm/dd/yyyy)
                   tempSB.append(",");
                   tempSB.append(parmp.stime);                              // time of tee time (hh:mm)
                   tempSB.append(",");
                   tempSB.append(item);                                     // Sales Item Code
                   tempSB.append(",1");                                     // quantity

                   line = tempSB.toString();                         // save as string value

                   out.print(line);
                   out.println();      // output the line

               } else {              // club wants to combine like charges - put this charge info into an arrayList instead

                   tempSB.append(item);            // We only need the posid and Sales Item Code at this time

                   line = tempSB.toString();       // save as string value

                   parmp.chargesA.add(line);        // add this charge info to charges
               }

               done = 1;           // indicate charge sent

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = posid;
               parmp.hist_player = parmp.player;          // use guest name
               parmp.hist_price = "";
               parmp.hist_item_name = "Guest Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry
            }
         }     // end of guest processing

      }
      catch (Exception e2) {

         String errorMsg2 = "Error2 in Proshop_sheet_pos.buildClubSoft for club: " +club;
         errorMsg2 = errorMsg2 + ", Exception: " + e2.getMessage();                 // build error msg

         SystemUtils.logError(errorMsg2);                                           // log it
      }
   }

   return(done);
 }                   // end of buildClubSoft

 
 
 
 // ********************************************************************
 //  Process the ClubSoft POS charges 
 //
 //  Move the charges from an arrayList to the POS file.  This is done
 //  when the club wants to combine like charges (use the quantity field).
 //
 // ********************************************************************

 private static void buildClubSoft2(parmPOS parmp, PrintWriter out, Connection con, String club) {

     
   String line = "";
   String posid = "";
   String item = "";
   String chargeS = "";
   String quantityS = "";
   int quantity = 0;
   int i = 0;
   int i2 = 0;
   
   //
   //  Process each individual charge - look for matching charges and combine them
   //
   //  Each charge string contains posid and item code
   //
   for (i = 0; i < parmp.chargesA.size(); i++) {

        if (!parmp.chargesA.get(i).equals("")) {

            quantity = 1;            // we have one charge

            chargeS = parmp.chargesA.get(i);    // get the charge string

            for (i2 = i+1; i2 < parmp.chargesA.size(); i2++) {   // look for matches (same posid & item code) 

                if (parmp.chargesA.get(i2).equals(chargeS)) {   // if matching charge found

                    quantity++;                        // count it
                    parmp.chargesA.set(i2,"");         // remove dup charge
                }
            }

            chargeS += "," + quantity;            // add quantity to the charge info
            parmp.chargesA.set(i,chargeS);        // save it
        }
   }        // end of FOR loop to cycle thru charges

   //  cycle through the list again and place the charges into the POS file

   for (i = 0; i < parmp.chargesA.size(); i++) {

        if (!parmp.chargesA.get(i).equals("")) {

            chargeS = parmp.chargesA.get(i);    // get the charge string

            StringTokenizer tok = new StringTokenizer( chargeS, "," );     // separate the fields (posid, item, quantity)

            int tokcount = tok.countTokens();

            if (tokcount == 3) {                   // make sure we are good to go

                posid = tok.nextToken();           // get charge info
                item = tok.nextToken();            
                quantityS = tok.nextToken();  
                
                //  Build the record and place in the POS file
                
                StringBuffer tempSB = new StringBuffer(posid);  // put Member Id in string buffer
                tempSB.append(",");
                tempSB.append(parmp.sdate);                     // date of tee time (mm/dd/yyyy)
                tempSB.append(",");
                tempSB.append(parmp.stime);                     // time of tee time (hh:mm)
                tempSB.append(",");
                tempSB.append(item);                            // Sales Item Code
                tempSB.append(",");
                tempSB.append(quantityS);                       // quantity

                line = tempSB.toString();                       // save as string value

                out.print(line);
                out.println();                      // output the line
            }
            
        }  // end of IF charge exists      
        
   }       // end of 2nd FOR loop to build charge file
 
 }                   // end of buildClubSoft2

 
 
 
 
 // ********************************************************************
 //  Process the PCS Group POS for an individual member
 //
 //  Build an CSV file containing the following for every player:
 //
 //   Columns:
 //       1 Date
 //       2 Time
 //       3 Course
 //       4 Member Number (if username provided)
 //       5 Player
 //       6 Member/Guest Indicator (0 = member, 1 = guest)
 //       7 Mode of Trans
 //       8 9 Hole Indicator (1 = 9-hole)
 //       9 Guest Type Item Code (Ironwood Only)
 //      10 Guest Type Value (Ironwood Only!)
 //
 //   File Name = ForeTees-yyyymmdd-hhmmss.CSV 
 //
 // ********************************************************************

 private static int buildPCS(parmPOS parmp, PrintWriter out, Connection con, String club, String caller, int guest) {


   ResultSet rs = null;

   String mnum = "";
   String player = "";
   String item = " ";       
   String gtype = "";
       
   int done = 0;

   try {
      //
      //  get the member's mship info
      //
      PreparedStatement pstmtc = con.prepareStatement (
         "SELECT memNum FROM member2b WHERE username= ?");

      pstmtc.clearParameters();        // clear the parms
      pstmtc.setString(1, parmp.user);

      rs = pstmtc.executeQuery();

      if (rs.next()) {
         mnum = rs.getString(1);   
      } else {
         mnum = "";
      }
      pstmtc.close();

   }
   catch (Exception e1) {

      String errorMsg1 = "Error1 in Proshop_sheet_pos.buildPCS for club: " + club;
      errorMsg1 = errorMsg1 + ", Exception: " + e1.getMessage();      // build error msg

      SystemUtils.logError(errorMsg1);                                       // log it
   }
   
   player = parmp.player;       // get member or guest value
   

   if (club.equals("ironwood")) {         //  Ironwood - separate Guest Type and Guest Name, and get the Guest Item Code    
       
       item = "";           // default
       gtype = "";

       if (guest == 1) {             
           
           int i = 0;
        
           loop3:
           while (i < parmp.MAX_Guests) {
               
               if (player.startsWith( parmp.gtype[i] )) {
                   
                   if (parmp.p9 == 1) {                     // if 9 holes
                       item = parmp.gst9I[i];               // set guest item code
                   } else {
                       item = parmp.gstI[i];                // set guest item code
                   }
                   
                   player = player.substring(parmp.gtype[i].length());
                   
                   while (player.startsWith(" ")) {  // remove any leading spaces
                       player = player.substring(1);
                   }
                      
                   break loop3;
               }
               
               i++;
           }
       }       
   }         // end of IF ironwood  
       
       
   //
   //  Buikld the record
   //
   String temp = String.valueOf(parmp.date);         // get date of tee time
   StringBuffer tempSB = new StringBuffer(temp);           // put in string buffer
   tempSB.append(",");
   
   temp = String.valueOf(parmp.time);               // get time of tee time
   tempSB.append(temp);
   tempSB.append(",");
      
   tempSB.append(parmp.course);                    // course name
   tempSB.append(",");
   tempSB.append(mnum);                           
   tempSB.append(",");
   tempSB.append(player);                                   
   tempSB.append(",");
   tempSB.append(guest);                         // guest indicator (0=member, 1=guest)                                   
   tempSB.append(",");
   
   tempSB.append(parmp.pcw);                           
   
   if (parmp.p9 == 1) {     // if 9-hole round
   
      tempSB.append(",1");        
      
   } else {           // 18 hole
      
      tempSB.append(",0");        
   } 
   
   //
   //  If Ironwood - provide guest item code for guests
   //
   //if (caller.equals("timer") && club.equals("ironwood")) {             
   if (club.equals("ironwood")) {             
       
       tempSB.append(",");
       tempSB.append(item);       // add the item code                             
       tempSB.append(",");
       tempSB.append(gtype);      // add the guest type                         
   }
   
   String line = tempSB.toString();               // save as string value

   if (caller.equals("timer") || club.equals("ironwood")) {  // if initiated by custom timer or Ironwood

      addPCSLine(line, parmp);                    // add charge to the file for this course

   } else {

      out.print(line);
      out.println();      // output the line
   }

   done = 1;           // indicate charge sent

   return(done);
 }                   // end of buildPCS


 
 
 
 

 // ********************************************************************
 //  Process the CSG POS charges for an individual member
 //
 //  For AR UPLOAD interface
 //
 //  Build a file (arupload.mas) containing the following:
 //
 //   This is the file format for clubs added prior to Nov 2011 (format 1):
 //
 //   Columns:
 //       1 Account Number (mnum) - Required                   9 chars
 //       2 Dependent Number (optional) example = 01           2 chars                               
 //       3 Transaction Date (Required) YYMMDD                 6 chars
 //       4 Item Code (Required) example = P01                 3 chars
 //       5 Amount or Fee (Required) example = 85.00           11 chars
 //       6 Service Charge (optional)                          11 chars
 //       7 Sales Tax (optional)                               11 chars
 //       8 Number Served (optional) example = 001              3 chars
 //       9 Server #1 (optional) - employee #                   4 chars
 //       10 Server #2 (optional)                               4 chars
 //       11 Server #3 (optional)                               4 chars
 //       12 Chit or Check # (optional - use teecurrid)         8 chars 
 //       13 CR LF                                              2 chars
 //
 //   This is the file format for clubs added after Nov 2011 (format 2):
 //
 //   Columns:
 //       1 Dependent Number (optional) example = 01           2 chars                               
 //       2 Item Code (Required) example = P01                 3 chars
 //       3 Transaction Date (Required) YYMMDD                 6 chars
 //       4 Number Served (optional) example = 001             3 chars
 //       5 Server #1 (optional) - employee #                  4 chars
 //       6 Server #2 (optional)                               4 chars
 //       7 Server #3 (optional)                               4 chars
 //       8 Amount or Fee (Required) example = 85.00           11 chars
 //       9 Service Charge (optional)                          11 chars
 //       10 Sales Tax (optional)                              11 chars
 //       11 Chit or Check # (optional - use teecurrid)         8 chars 
 //       12 Account Number (mnum) - Required                   9 chars
 //       13 CR LF                                              2 chars
 //
 //    Check for charges and build the record
 // ********************************************************************

 private static int buildCSG(parmPOS parmp, PrintWriter out, Connection con, String club, int ttid, String caller) {


   ResultSet rs = null;

   String lname = "";
   String fname = "";
   String mship = "";
   String mnum = "";
   String mtype = "";
   String posid = "";
   String sub_type = "";
   String tpos = "";
   String mpos = "";
   String mposc = "";
   String gpos = "";
   String gtype = "";
   String tmode = "";
   String tmodea = "";
   String line = "";
   String item = "";
   String fee = "";
   String fee_hist = "";
   String amount = "       0.00";                              // space filled
   String dependent = "00";                                    // 00 (not used at this time)
   String numServed = "000";                                   // not used
   String serverNum = "0000";                                  // not used
   //String chit = "00000000";                                   // unused
   String chit = String.valueOf( ttid );                       // chit number - uses teecurrid
   String tax = "";                                            // sales tax value for file
   String tax_hist = "";
   String temp = "";

   int i = 0;
   int len = 0;
   int p9c = 0;
   int done = 0;
   int format = 1;                               // default (format prior to Nov 2011
   double salestax = 0;                          // tax rate from config
   double taxfee = 0;
   
   int shortDatei = (int)(parmp.date - ((parmp.date / 10000) * 10000));   // get mmdd (i.e.  20060512 - 20060000 = 512)
   
   
   //
   //  Check which file format to use
   //
   if (club.equals("atlantacountryclub") || club.equals("tavistockcc")) {
      
      format = 2;          // format used after Nov 2011
   }


   //
   //  Force the length of the chit (teecurrid) to 8 chars
   //
   len = chit.length();                   // get length of chit id

   if (len < 8) {                         // if < 8 characters

      while (len < 8) {

         chit = chit + " ";               // add a space filler (left justified)
         len++;
      }

   } else {

      if (len > 8) {                         // if > 8 characters

         while (len > 8) {

            chit = stripOne(chit);         // strip the first char from chit id
            len--;
         }
      }
   }


   try {
      //
      //  get the member's mship info
      //
      PreparedStatement pstmtc = con.prepareStatement (
         "SELECT name_last, name_first, m_ship, m_type, memNum, posid, msub_type " +
         "FROM member2b WHERE username= ?");

      pstmtc.clearParameters();        // clear the parms
      pstmtc.setString(1, parmp.user);

      rs = pstmtc.executeQuery();

      if (rs.next()) {

         lname = rs.getString(1);
         fname = rs.getString(2);
         mship = rs.getString(3);
         mtype = rs.getString(4);
         mnum = rs.getString(5);
         posid = rs.getString(6);
         sub_type = rs.getString(7);
      }
      pstmtc.close();

   }
   catch (Exception e1) {

      String errorMsg1 = "Error1 in Proshop_sheet_pos.buildCSG for club: " + club;
      errorMsg1 = errorMsg1 + ", Exception: " + e1.getMessage();      // build error msg

      SystemUtils.logError(errorMsg1);                                       // log it
   }

   //
   //  Atlanta CC - set the Dependent Number so charges are sent to the actual player
   //
   if (club.equals("atlantacountryclub") || club.equals("tavistockcc")) {
       
       StringTokenizer tok = new StringTokenizer( posid, "-" );     // see if dependent extension provided

       int tokcount = tok.countTokens();
         
       if (tokcount > 1) {          // if extension
            
            posid = tok.nextToken();      // isolate posid (mnum)
            temp = tok.nextToken();       // get dependent value
                           
            if (!temp.equals("0") && temp.length() == 1) {      // if dependent (should be single digit)
                    
                dependent = "0" + temp;     // i.e.  01
            }      // just use mnum if primary or invalid value
       }
        
   } else {     // not Atlanta CC
      
       //
       //  Use mnum if posid does not exist
       //
       if (posid.equals( "" )) posid = mnum;
   }

   if (!posid.equals( "" )) {

      //
      //  Build the POS ID field (9 chars)
      //
      len = posid.length();                   // get length of pos id

      if (len < 9) {                         // if < 9 characters

         while (len < 9) {

            posid = posid + " ";             // add a space filler (left justified)
            len++;
         }

      } else {

         if (len > 9) {                         // if > 9 characters

            while (len > 9) {

               posid = stripOne(posid);         // strip the first char from id
               len--;
            }
         }
      }


      try {

         //
         //  First check if there is a charge amount associated with this player's mode of trans
         //
         i = 0;
         loop1:
         while (i < parmp.MAX_Tmodes) {

            if (parmp.tmodea[i].equals( parmp.pcw )) {     // if matching mode of trans found

               tmode = parmp.tmode[i];             // get full description of tmode
               
               if (club.equals("tavistockcc")) {
                   
                   if (parmp.tmodea[i].equals("CAR")) {  
                       
                       if (shortDatei >= 1101 || shortDatei <= 331) {    // Winter Season
                           
                           if (parmp.player.equals( "" )) {      // if member
                               if (parmp.p9 == 1) {              // if 9 holes
                                   item = "601";              
                               fee = "16.50";  
                                   salestax = 7;
                               } else {                         // 18 holes
                                   item = "601";              
                               fee = "28.00";  
                                   salestax = 7;
                               }    
                           } else {                          // player is a guest
                               if (parmp.p9 == 1) {              // if 9 holes
                                   item = "601";              
                               fee = "16.50";  
                                   salestax = 7;
                               } else {                         // 18 holes
                                   item = "601";              
                               fee = "28.00";  
                                   salestax = 7;
                               }    
                           }                 
                       } else {    // Summer Season
                           
                           if (parmp.player.equals( "" )) {      // if member
                               if (parmp.p9 == 1) {              // if 9 holes
                                   item = "601";              
                                   fee = "16.50";  
                                   salestax = 7;
                               } else {                         // 18 holes
                                   item = "601";              
                                   fee = "28.00";  
                                   salestax = 7;
                               }    
                           } else {                          // player is a guest
                               if (parmp.p9 == 1) {              // if 9 holes
                                   item = "601";              
                                   fee = "16.50";  
                                   salestax = 7;
                               } else {                         // 18 holes
                                   item = "601";              
                                   fee = "28.00";  
                                   salestax = 7;
                               }    
                           }  
                       }
                   } else if (parmp.tmodea[i].equals("TRL")) {
                       
                       if (shortDatei >= 1101 || shortDatei <= 331) {    // Winter Season
                       
                           if (parmp.p9 == 1) {              // if 9 holes
                               item = "610";              
                               fee = "5.00";  
                               salestax = 7;
                           } else {                         // 18 holes
                               item = "610";              
                               fee = "10.00";  
                               salestax = 7;
                           }                     
                       } else {    // Summer Season
                           
                           if (parmp.p9 == 1) {              // if 9 holes
                               item = "610";              
                               fee = "8.00";  
                               salestax = 7;
                           } else {                         // 18 holes
                               item = "610";              
                               fee = "13.00";  
                               salestax = 7;
                           }           
                       }
                   } else if (parmp.tmodea[i].equals("CRY")) {  
                       item = "607";              
                       fee = "0";  
                       salestax = 7;                   
                   } else if (parmp.tmodea[i].equals("CAD")) {
                       item = "608";              
                       fee = "0";  
                       salestax = 7;
                   } else {
                       item = "";
                   }                // end of Tavistock custom
                    
               } else {   // all other clubs
               
                   if (parmp.p9 == 1) {                   // if 9 holes
                      item = parmp.t9pos[i];               // get Item Group # for tmode
                      fee = parmp.t9posc[i];               // get fee for tmode
                   } else {
                      item = parmp.tpos[i];                // get Item Group # for tmode
                      fee = parmp.tposc[i];                // get fee for tmode
                   }
                   salestax = parmp.salestaxt[i];          // get sales tax rate if specified
               }
               break loop1;
            }
            i++;
         }

         if (!item.equals( "" ) && !item.equals( " " ) && !item.equals( "0" )) {   // if pos charge found for Mode of Trans selected

            //
            //  Build the Item/SKU field (3 chars)
            //
            len = item.length();                   // get length of item code

            if (len < 3) {                         // if < 3 characters

               while (len < 3) {

                  item = item + " ";             // add a space filler (left justified)
                  len++;
               }

            } else {

               if (len > 3) {                         // if > 3 characters

                  while (len > 3) {

                     item = stripOne(item);         // strip the first char
                     len--;
                  }
               }
            }

            //
            //  Build the Item Amount field (11 chars) and associated sales tax amount 
            //
            if (fee.equals("") || fee.equals(" ") || fee.equals("0")) {
               
               fee = amount;      // use default if none provided
               fee_hist = "0";    // value to use in history
               tax = amount; 
               tax_hist = "0";    // value to use in history
               
            } else {
               
               fee = setFee(fee);                       // enasure dollar format (0.00)
            
               tax = calcSalesTax(salestax, fee);       // calculate the sales tax amount, if any

               len = fee.length();                      // get length of item fee

               if (len < 11) {                          // if < 11 characters

                  while (len < 11) {

                     fee = "0" + fee;                // add a filler (right justified, zero filled)
                     len++;
                  }

               } else {

                  if (len > 11) {                      // if > 11 characters

                     while (len > 11) {

                        fee = stripOne(fee);           // strip the first char
                        len--;
                     }
                  }
               }
               
               fee_hist = getHistFee(fee);             // value to use in history      
               tax_hist = getHistFee(tax);
            }

            //
            //  Build the charge record
            //
            if (caller.equals("prtReceipt")) {           // if priniting a receipt for Olympic Club (now using NorthStar)
               
               parmp.item += ";" +fname+ " " +lname+ "," +posid+ "," +tmode+ "," +fee+ "," +tax+ "," +chit; 
               
            } else {

               //
               //  We can now build the charge string
               //
               if (format == 1) {
                  
                  StringBuffer tempSB = new StringBuffer(posid);    // put member id in string buffer
                  tempSB.append(dependent);                         // dependent id (00)
                  tempSB.append(parmp.sdate);                       // date - yymmdd
                  tempSB.append(item);                              // item code
                  tempSB.append(fee);                               // charge amount
                  tempSB.append(amount);                            // service charge (0)
                  tempSB.append(tax);                               // sales tax
                  tempSB.append(numServed);                         // number served (0)
                  tempSB.append(serverNum);                         // server 1 employee id (0)
                  tempSB.append(serverNum);                         // server 2 employee id (0)
                  tempSB.append(serverNum);                         // server 3 employee id (0)
                  tempSB.append(chit);                              // chit number (0)
                  
                  line = tempSB.toString();                         // save as string value

               } else {      // format 2
 
                  StringBuffer tempSB = new StringBuffer(dependent);   // Dependent code  
                  tempSB.append(item);                              //  Item code
                  tempSB.append(parmp.sdate);                       // Date yymmdd
                  tempSB.append(numServed);                         // number served (0)
                  tempSB.append(serverNum);                         // server 1 employee id (0)
                  tempSB.append(serverNum);                         // server 2 employee id (0)
                  tempSB.append(serverNum);                         // server 3 employee id (0)
                  tempSB.append(fee);                               // 
                  tempSB.append(amount);                           
                  tempSB.append(tax);                               // sales tax
                  tempSB.append(chit);                              // chit number (0)
                  tempSB.append(posid);       
                  
                  line = tempSB.toString();                         // save as string value
               }  
                  
               if (caller.equals("timer")) {                  // if initiated by custom timer for Olympic Club

                  addOlyLine(line, parmp);                    // add charge to the file for this course

               } else {

                  out.print(line);
                  out.println();      // output the line
               }
            }

            done = 1;           // indicate charge sent

            //
            //  Save charge data in pos_hist for reports
            //
            parmp.hist_posid = posid;
            if (parmp.player.equals("")) {                // if player is a member
               parmp.hist_player = fname + " " + lname;
            } else {                                      // or guest
               parmp.hist_player = parmp.player;
            }
            parmp.hist_price = fee_hist;
            parmp.hist_tax = tax_hist.trim();
            parmp.hist_item_name = parmp.pcw;
            parmp.hist_item_num = item;

            add_POS_hist(parmp, con);       // go make the entry
         }
         
         

         //
         //  get the mship class and charge amount, if any and if player is a member!
         //
         if (parmp.player.equals( "" )) {      // if member

            i = 0;
            item = "";
            
            //
            //  Check for custom processing of mship types
            //
            if (club.equals("tavistockcc")) {   // if Tavistock CC
                   
                if (mship.equals("NRG")) {
                    
                     // Winter Season Rates
                     if (shortDatei >= 1101 || shortDatei <= 331) {
                         if (parmp.p9 == 1) {                   // if 9 holes
                            item = "510";            
                            fee = "35.00";              
                         } else {                                  // 18 holes
                            if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {
                                item = "510";            
                                fee = "45.00";     
                            } else {
                                item = "510";            
                                fee = "55.00";     
                            }
                         }
                     } else {    // Summer Season Rates
                         if (parmp.p9 == 1) {                   // if 9 holes
                            item = "510";            
                            fee = "50.00";              
                         } else {                                  // 18 holes
                            if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {
                                item = "510";            
                                fee = "85.00";     
                            } else {
                                item = "510";            
                                fee = "95.00";     
                            }
                         }
                     }
                }/* else if (mship.equals("SOA") && parmp.date <= 20121231) {      // winter only
                    if (shortDatei >= 1101 || shortDatei <= 331) {  
                        item = "510";            
                        fee = "35.00";              
                     } else {                
                        item = "";
                     }
                }*/ else if (mship.equals("SOG") || mship.equalsIgnoreCase("Social Only")) {
                    
                     // Winter Season Rates
                     if (shortDatei >= 1101 || shortDatei <= 331) {
                         if (parmp.p9 == 1) {                   // if 9 holes
                            item = "510";            
                            fee = "35.00";              
                         } else {                               // 18 holes
                            if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {
                                item = "510";            
                                fee = "55.00";     
                            } else {
                                item = "510";            
                                fee = "65.00";     
                            }
                         }  
                     } else {    // Summer Season Rates
                         if (parmp.p9 == 1) {                   // if 9 holes
                            item = "510";            
                            fee = "50.00";              
                         } else {                               // 18 holes
                            if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {
                                item = "510";            
                                fee = "85.00";     
                            } else {
                                item = "510";            
                                fee = "95.00";     
                            }
                         }                
                     }
                } else {               
                    item = "";
                }
                salestax = 0;
                
            } else if (club.equals("whippoorwillclub") && mship.equals("Associate") && !parmp.day.equals("Saturday") && !parmp.day.equals("Sunday")) {
                
                // Associate members do not incurr greens fees on weekdays, otherwise, we need to default to the standard processing!
                item = "";
                
            } else {   // Not Tavistock
            
               //
               //  no custom required - checked the mship config settings
               //
               loop2:
               while (i < parmp.MAX_Mships) {

                  if (parmp.mship[i].equalsIgnoreCase( mship )) {     // if matching mode mship type

                     if (parmp.p9 == 1) {                   // if 9 holes
                        item = parmp.mship9I[i];               // get mship item group #
                        fee = parmp.m9posc[i];                 // get Item Fee
                     } else {
                        item = parmp.mshipI[i];               // get mship item group #
                        fee = parmp.mposc[i];                 // get Item Fee
                     }
                     salestax = parmp.salestaxm[i];          // get sales tax rate if specified
                     break loop2;
                  }
                  i++;
               }
            }
            

            if (!item.equals( "" ) && !item.equals( " " ) && !item.equals( "0" )) {   // if pos charge found for mship

               //
               //  Build the Item/SKU field (3 chars)
               //
               len = item.length();                   // get length of item code

               if (len < 3) {                         // if < 3 characters

                  while (len < 3) {

                     item = item + " ";             // add a space filler (left justified)
                     len++;
                  }

               } else {

                  if (len > 3) {                         // if > 3 characters

                     while (len > 3) {

                        item = stripOne(item);         // strip the first char
                        len--;
                     }
                  }
               }

               //
               //  Build the Item Amount field (11 chars) and associated Sales Tax amount
               //
               if (fee.equals("") || fee.equals(" ") || fee.equals("0")) {
                  
                  fee = amount;             // use default if none provided
                  fee_hist = "0";           // value to use in history
                  tax = amount;
                  tax_hist = "0";           // value to use in history
                  
               } else {

                  fee = setFee(fee);                       // enasure dollar format (0.00)
            
                  tax = calcSalesTax(salestax, fee);       // calculate the sales tax amount, if any

                  len = fee.length();                      // get length of item code

                  if (len < 11) {                          // if < 11 characters

                     while (len < 11) {

                        fee = "0" + fee;                // add a filler (right justified, zero filled)
                        len++;
                     }

                  } else {

                     if (len > 11) {                      // if > 11 characters

                        while (len > 11) {

                           fee = stripOne(fee);           // strip the first char
                           len--;
                        }
                     }
                  }
               
                  fee_hist = getHistFee(fee);             // value to use in history      
                  tax_hist = getHistFee(tax);
               }

               //
               //  Build the charge record
               //
               if (caller.equals("prtReceipt")) {           // if priniting a receipt for Olympic Club (now using NorthStar)

                  parmp.item += ";" +fname+ " " +lname+ "," +posid+ ",Green Fee " +item+ "," +fee+ "," +tax+ "," +chit; 

               } else {

                  //
                  //  We can now build the charge string
                  //
                  if (format == 1) {         // file format prior to Nov 2011
                     
                     StringBuffer tempSB = new StringBuffer(posid);    // put member id in string buffer
                     tempSB.append(dependent);                         // dependent id (00)
                     tempSB.append(parmp.sdate);                       // date - yymmdd
                     tempSB.append(item);                              // item code
                     tempSB.append(fee);                               // charge amount
                     tempSB.append(amount);                            // service charge (0)
                     tempSB.append(tax);                               // sales tax 
                     tempSB.append(numServed);                         // number served (0)
                     tempSB.append(serverNum);                         // server 1 employee id (0)
                     tempSB.append(serverNum);                         // server 2 employee id (0)
                     tempSB.append(serverNum);                         // server 3 employee id (0)
                     tempSB.append(chit);                              // chit number (0)

                     line = tempSB.toString();                         // save as string value
                     
                  } else {            // file format after Nov 2011
                  
                     StringBuffer tempSB = new StringBuffer(dependent);    // dependent id (00)
                     tempSB.append(item);                              // item code
                     tempSB.append(parmp.sdate);                       // date - yymmdd
                     tempSB.append(numServed);                         // number served (0)
                     tempSB.append(serverNum);                         // server 1 employee id (0)
                     tempSB.append(serverNum);                         // server 2 employee id (0)
                     tempSB.append(serverNum);                         // server 3 employee id (0)
                     tempSB.append(fee);                               // charge amount
                     tempSB.append(amount);                            // service charge (0)
                     tempSB.append(tax);                               // sales tax 
                     tempSB.append(chit);                              // chit number (0)
                     tempSB.append(posid);                             // posid

                     line = tempSB.toString();                         // save as string value
                  }                                   

                  if (caller.equals("timer")) {           // if initiated by custom timer for Olympic Club

                     addOlyLine(line, parmp);                    // add charge to the file for this course

                  } else {

                     out.print(line);
                     out.println();      // output the line
                  }
               }

               done = 1;           // indicate charge sent

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = posid;
               parmp.hist_player = fname + " " + lname;
               parmp.hist_price = fee_hist;
               parmp.hist_tax = tax_hist.trim();
               parmp.hist_item_name = "Green Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry

            }      // end of Mship Charge processing

         } else {

            //
            //  player passed is a guest - charge the member for this too
            //
            //
            //  First check if there is a charge amount associated with this guest type
            //
            i = 0;
            item = "";
            
            //
            //  Check for custom processing of guest types
            //
            if (club.equals("tavistockcc")) {   // if Tavistock CC
                   
                if (parmp.player.startsWith("Regular Guest")) {
                    
                     if (shortDatei >= 1101 || shortDatei <= 331) {
                         if (parmp.p9 == 1) {                   // if 9 holes
                            item = "510";            
                            fee = "35.00";              
                         } else {                               // 18 holes
                            if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {
                                item = "510";            
                                fee = "55.00";     
                            } else {
                                item = "510";            
                                fee = "65.00";     
                            }
                         }
                     } else {
                         if (parmp.p9 == 1) {                   // if 9 holes
                            item = "510";            
                            fee = "50.00";              
                         } else {                               // 18 holes
                            if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) {
                                item = "510";            
                                fee = "85.00";     
                            } else {
                                item = "510";            
                                fee = "95.00";     
                            }
                         }
                     }
                } else if (parmp.player.startsWith("Comp Guest")) {   
                    item = "510";            
                    fee = "0";              
                } else {               
                    item = "";
                }
                salestax = 0;
                
            } else {   // Not Tavistock
            
               loop3:
               while (i < parmp.MAX_Guests) {

                  if (parmp.player.startsWith( parmp.gtype[i] )) {

                     gtype = parmp.gtype[i];               // set guest type description
                     if (parmp.p9 == 1) {                   // if 9 holes
                        item = parmp.gst9I[i];                 // set guest item group #
                        fee = parmp.g9pos[i];                  // get Item Fee
                     } else {
                        item = parmp.gstI[i];                  // set guest item group #
                        fee = parmp.gpos[i];                   // get Item Fee
                     }
                     salestax = parmp.salestaxg[i];            // get sales tax rate if specified
                     break loop3;
                  }
                  i++;
               }
            }

            if (!item.equals( "" ) && !item.equals( " " ) && !item.equals( "0" )) {   // if pos charge found for guest

               //
               //  Build the Item/SKU field (3 chars)
               //
               len = item.length();                   // get length of item code

               if (len < 3) {                         // if < 3 characters

                  while (len < 3) {

                     item = item + " ";             // add a space filler (left justified)
                     len++;
                  }

               } else {

                  if (len > 3) {                         // if > 3 characters

                     while (len > 3) {

                        item = stripOne(item);         // strip the first char
                        len--;
                     }
                  }
               }

               //
               //  Build the Item Amount field (11 chars) and associated Sales Tax amount
               //
               if (fee.equals("") || fee.equals(" ") || fee.equals("0")) {
                  
                  fee = amount;      // use default if none provided
                  fee_hist = "0";    // value to use in history
                  tax = amount;
                  tax_hist = "0";    // value to use in history
                  
               } else {

                  fee = setFee(fee);                       // enasure dollar format (0.00)
            
                  tax = calcSalesTax(salestax, fee);       // calculate the sales tax amount, if any

                  len = fee.length();                      // get length of item code

                  if (len < 11) {                          // if < 11 characters

                     while (len < 11) {

                        fee = "0" + fee;                // add a filler (right justified, zero filled)
                        len++;
                     }

                  } else {

                     if (len > 11) {                      // if > 11 characters

                        while (len > 11) {

                           fee = stripOne(fee);           // strip the first char
                           len--;
                        }
                     }
                  }
               
                  fee_hist = getHistFee(fee);             // value to use in history               
                  tax_hist = getHistFee(tax);
               }

               //
               //  Build the charge record
               //
               if (caller.equals("prtReceipt")) {           // if priniting a receipt for Olympic Club (now using NorthStar)

                  parmp.item += ";" +fname+ " " +lname+ "," +posid+ "," +parmp.player+ "," +fee+ "," +tax+ "," +chit; 

               } else {

                  //
                  //  We can now build the charge string
                  //
                  if (format == 1) {                   // file format prior to Nov 2011
                     
                     StringBuffer tempSB = new StringBuffer(posid);    // put member id in string buffer
                     tempSB.append(dependent);                         // dependent id (00)
                     tempSB.append(parmp.sdate);                       // date - yymmdd
                     tempSB.append(item);                              // item code
                     tempSB.append(fee);                               // charge amount
                     tempSB.append(amount);                            // service charge (0)
                     tempSB.append(tax);                               // sales tax
                     tempSB.append(numServed);                         // number served (0)
                     tempSB.append(serverNum);                         // server 1 employee id (0)
                     tempSB.append(serverNum);                         // server 2 employee id (0)
                     tempSB.append(serverNum);                         // server 3 employee id (0)
                     tempSB.append(chit);                              // chit number (0)

                     line = tempSB.toString();                         // save as string value
                     
                  } else {            // format after Nov 2011

                     StringBuffer tempSB = new StringBuffer(dependent);    // dependent id (00)
                     tempSB.append(item);                              // item code
                     tempSB.append(parmp.sdate);                       // date - yymmdd
                     tempSB.append(numServed);                         // number served (0)
                     tempSB.append(serverNum);                         // server 1 employee id (0)
                     tempSB.append(serverNum);                         // server 2 employee id (0)
                     tempSB.append(serverNum);                         // server 3 employee id (0)
                     tempSB.append(fee);                               // charge amount
                     tempSB.append(amount);                            // service charge (0)
                     tempSB.append(tax);                               // sales tax 
                     tempSB.append(chit);                              // chit number (0)
                     tempSB.append(posid);                             // posid

                     line = tempSB.toString();                         // save as string value
                  }                  
                  
                  if (caller.equals("timer")) {           // if initiated by custom timer for Olympic Club

                     addOlyLine(line, parmp);                    // add charge to the file for this course

                  } else {

                     out.print(line);
                     out.println();      // output the line
                  }
               }

               done = 1;           // indicate charge sent

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = posid;
               parmp.hist_player = parmp.player;
               parmp.hist_price = fee_hist;
               parmp.hist_tax = tax_hist.trim();
               parmp.hist_item_name = "Guest Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry

            }
         }     // end of guest processing

      }
      catch (Exception e2) {

         String errorMsg2 = "Error2 in Proshop_sheet_pos.buildCSG for club: " +club;
         errorMsg2 = errorMsg2 + ", Exception: " + e2.getMessage();                 // build error msg

         SystemUtils.logError(errorMsg2);                                           // log it
      }
   }

   return(done);
 }                   // end of buildCSG


 // ********************************************************************
 //  CSG - Convert Item Fee or Sales Tax amount to 0.00 format
 // ********************************************************************

 private static String setFee(String fee) {

   BigDecimal bd = new BigDecimal(fee);    // convert fee to a big decimal value
   
   bd = bd.setScale(2, RoundingMode.HALF_UP);   // force value to 2 decimal digits, rounded up
   
   fee = String.valueOf( bd );            // create back to string value

   return(fee);
 }                   // end of setFee
 
 
 
 
 // ********************************************************************
 //  CSG - reduce the length of the fee string so it fits in the POS History table
 // ********************************************************************

 private static String getHistFee(String fee) {

   fee = fee.trim();               // trim any spaces
   
   while (fee.length() > 8) {
      
      fee = stripOne(fee);               // strip a char from the start of the value (should be zeros) 
   }

   return(fee);
 }                   // end of setFee
 
 


 // ********************************************************************
 //  CSG - Calculate the sales tax amount
 // ********************************************************************

 private static String calcSalesTax(double salestax, String fee) {

   String tax = "";
   String amount = "       0.00";          // default tax amount - space filled
   double taxfee = 0;

   if (salestax != 0) {                     // if sales tax rate specified
      
      salestax = salestax/100;                // convert percentage to decimal value (i.e.  6.5% = .0065)

      taxfee = Double.parseDouble(fee);       // convert the fee to a double for the math

      taxfee = (taxfee * salestax);           // calculate the sales tax amount (item cost x the tax rate)

      tax = String.valueOf( taxfee );         // create string value of the sales tax amount

      tax = setFee(tax);                      // Round the tax amount to 00.00 value

      int len = tax.length();                 // get length of sales tax

      if (len < 11) {                         // if < 11 characters

         while (len < 11) {

            tax = "0" + tax;                // add a filler (right justified, zero filled)
            len++;
         }

      } else {

         if (len > 11) {                      // if > 11 characters

            while (len > 11) {

               tax = stripOne(tax);           // strip the first char
               len--;
            }
         }
      }

   } else {

      tax = amount; 
   }

   return(tax);
 }                   // end of calcSalesTax


 // *********************************************************
 //   Round the sales tax amount to dd.cc (used in IBS POS)
 // *********************************************************
 //
 private static double roundST(double salestax) {


    if (salestax != 0) {

       // round up or leave alone (cc.dd)

       salestax = (salestax * 100);       // increment for rounding to work

       salestax = Math.round(salestax);   // round to whole number

       salestax = (salestax / 100);       // convert back to dd.cc
    }

    return(salestax);
 }

 
 
 // ********************************************************************
 //  Process the NorthStar POS charges for an individual member
 //
 //  Build an ASCII file containing the following (this will build one record):
 //
 //
 //      mm/dd/yyyy hh:mm:ss                    (current date & time)
 //      mNum, mm/dd/yyyy, pos item#, quantity  (one record per charge)
 //      #                                      (total # of records included)
 //      EOF
 //
 //
 //    Check the mode of trans for charges
 // ********************************************************************
    
 private static int buildLineNS(parmPOS parmp, String filename, PrintWriter out, Connection con, int ttid, String caller) {  


   ResultSet rs = null;

   String mship = "";
   String posid = "";
   String fname = "";
   String lname = "";
   String tpos = "";
   String mpos = "";
   String mposc = "";
   String gpos = "";
   String gtype = "";
   String tmode = "";
   String tmodea = "";
   String item = "";
   String line = "";
   String mnum = "";
   String mtype = "";
   String sub_type = "";
   String fee = "";                                    // for Olyclub prtRecipt
   String tax = "0";                                   // default sales tax
   String chit = String.valueOf( ttid );               // chit number - uses teecurrid for prtReceipt

   int i = 0;
   int p9c = 0;
   int done = 0;


   try {
      //
      //  get the member's mship info
      //
      PreparedStatement pstmtc = con.prepareStatement (
         "SELECT name_last, name_first, m_ship, m_type, memNum, posid, msub_type " +
         "FROM member2b WHERE username= ?");

      pstmtc.clearParameters();        // clear the parms
      pstmtc.setString(1, parmp.user);

      rs = pstmtc.executeQuery();

      if (rs.next()) {

         lname = rs.getString(1);
         fname = rs.getString(2);
         mship = rs.getString(3);
         mtype = rs.getString(4);
         mnum = rs.getString(5);
         posid = rs.getString(6);
         sub_type = rs.getString(7);
      }
      pstmtc.close();

      
      if (parmp.club.equals("olyclub")) {
         
         //
         //  Use mnum if posid does not exist
         //
         if (posid.equals( "" )) posid = mnum;
      }
      

      //
      //  Skip if no posid - otherwise entire file will fail
      //
      if (!posid.equals( "" )) {

         //
         //  First check if there is a charge amount associated with this player's mode of trans
         //
         i = 0;
         loop1:
         while (i < parmp.MAX_Tmodes) {

            if (parmp.tmodea[i].equals( parmp.pcw )) {     // if matching mode of trans found

               tmode = parmp.tmode[i];                // get full description of tmode
               if (parmp.p9 == 1) {                   // if 9 holes
                  item = parmp.t9pos[i];              // get Item Group # for tmode
               } else {
                  item = parmp.tpos[i];               // get Item Group # for tmode
               }
               break loop1;
            }
            i++;
         }

         if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found for Mode of Trans selected

            if (caller.equals("prtReceipt") && parmp.club.equals( "olyclub" )) {   // if priniting a receipt for Olympic Club
               
               if (parmp.tmodea[i].equals("MHC")) {
                  fee = "16.00";
               } else if (parmp.tmodea[i].equals("MFC")) {
                  fee = "29.00";
               } else if (parmp.tmodea[i].equals("4BG")) {
                  fee = "7.25";
               } else if (parmp.tmodea[i].equals("3BG")) {
                  fee = "9.50";
               } else if (parmp.tmodea[i].equals("MC9")) {
                  if (parmp.course.equals( "Lake" )) {        // if the Lake course
                     fee = "8.00";
                  } else {
                     fee = "7.25"; 
                  }
               } else if (parmp.tmodea[i].equals("MSC")) {
                  fee = "16.50";
               } else if (parmp.tmodea[i].equals("UGC")) {
                  fee = "16.00";
               } else if (parmp.tmodea[i].equals("PC")) {
                  fee = "7.00";
               }
               
               if (!fee.equals("")) {
                  
                  fee = setFee(fee);                       // enasure dollar format (0.00)

                  parmp.item += ";" +fname+ " " +lname+ "," +posid+ "," +tmode+ "," +fee+ "," +tax+ "," +chit; 
                  
                  done = 1;           // indicate charge added
               }
               
            } else {

               if (parmp.count == 0) {                         // if first item to be charged

                  addHdrNS(parmp, filename, parmp.club, caller);                   // go create the file and build the header
               }

               //
               //  We can now build the charge string
               //
               StringBuffer tempSB = new StringBuffer(posid);     // put member's posid in string buffer
               tempSB.append(",");
               tempSB.append(parmp.sdate);                        // date (mm/dd/yyyy)
               tempSB.append(",");
               tempSB.append(item);                               // item's POS Id
               tempSB.append(",1");                               // quantity = 1

               line = tempSB.toString();                         // save as string value

               addLineNS(filename, line, parmp.club, caller);                        // go add this record
               
               done = 1;                                         // indicate charge sent
            }
            
            if (done > 0) {

               parmp.count++;      // bump record counter

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = posid;
               if (!parmp.player.equals( "" )) {
                  parmp.hist_player = parmp.player;          // if guest
               } else {
                  parmp.hist_player = fname + " " + lname;   // else use member name
               }
               parmp.hist_price = "";
               parmp.hist_item_name = parmp.pcw;
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry
            }
         }

         //
         //  get the mship class and charge amount, if any and if player is a member!
         //
         if (parmp.player.equals( "" )) {     // if player is a member

            i = 0;
            item = "";

            //
            //  Check for custom processing of mship types
            //
            if (parmp.club.equals( "olyclub" )) {        // if Olympic Club
                
                // Check to see if we're in DST or not, and, if so, if it's before or after 9/01
                int yy = 0;
                int mm = 0;
                int dd = 0;

                try {

                    yy = (int) (parmp.date / 10000);                           // get year
                    mm = (int) ((parmp.date - (yy * 10000)) / 100);            // month
                    dd = (int) (parmp.date - ((yy * 10000) + (mm * 100)));     // day                        
                    mm = mm - 1;

                } catch (Exception exc) {
                    Utilities.logError("Proshop_sheet_pos.buildLineNS - " + parmp.club + " - Error determining DST dates - Err: " + exc.toString());
                }

                Calendar cal = new GregorianCalendar();

                cal.set(yy, mm, dd);

                boolean isDST = false;

                if (cal.get(Calendar.DST_OFFSET) != 0) {
                    isDST = true;
                }
               
               if (parmp.course.equals( "Lake" )) {        // if the Lake course
                  
                  if (sub_type.equals("AP") || sub_type.equals("BG") || sub_type.equals("NP") || sub_type.equals("WG") || 
                      sub_type.equals("WN") || sub_type.equals("FJ") || sub_type.equals("FN") || sub_type.equals("IG") || 
                      sub_type.equals("JR")) {
                     
                     //item = "402";         // Green Fee code (old)
                     fee = "0.00";         // no charge        
                     item = "";            // suppress zero charges for now !!!  (per Ruby's request on 6/09/2011)
               
                  } else if (sub_type.equals("MN") || sub_type.equals("NN") || sub_type.equals("GWL") 
                          || sub_type.equals("G80") || sub_type.equals("IM") || sub_type.equals("JJ") 
                          || sub_type.equals("GWJ")) {
                     
                     item = "1313380756";         // Green Fee code
                     fee = "110.00";              // fee amount       Club refers to this as "MNHGP"
                  }
               
               } else if (parmp.course.equals( "Ocean" )) {     // if the Ocean course

                  if (sub_type.equals("GWJ") && (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) && parmp.time >= 1530) {      // Junior GWL - per Ruby's instructions
                  
                     item = "190893545";         // Green Fee code
                     fee = "20.00";             // Jr GWL Rate fee amount
                  
                 } else if (sub_type.equals("MN") || sub_type.equals("NN") || sub_type.equals("GWL") || 
                      sub_type.equals("G80") || sub_type.equals("IM") || sub_type.equals("JJ") || sub_type.equals("GWJ")) {
                     
                     item = "916477043";         // Green Fee code     Club refers to this as "MNHGP"

                     int twilightTime = 0;
                     
                     if (isDST) {

                         int shortDate = ((mm + 1) * 100) + dd;

                         if (shortDate <= 831) {
                             twilightTime = 1600;
                         } else {
                             twilightTime = 1500;
                         }

                     } else {
                         twilightTime = 1400;
                     }

                     if (parmp.time >= twilightTime) {   // if 2:00/3:00/4:00 PM or later (Twilight) - Time depends on DST and before/after 9/01

                        item = "221812304";
                        fee = "40.00";        // Twilight fee amount
                        
                     } else {
                        
                        fee = "95.00";        // normal fee amount  // Club refers to this as "MNHGP"
                     }                   
                  }
                    
               } else {         // Cliffs course
                  
                  if (sub_type.equals("AP") || sub_type.equals("NP") || sub_type.equals("WG") || 
                      sub_type.equals("WN") || sub_type.equals("FJ") || sub_type.equals("FN") ||  
                      sub_type.equals("BG")) {
                     
                     //item = "496";         // Green Fee code
                     fee = "0.00";         // no charge
                     item = "";            // suppress zero charges for now !!!  (per Ruby's request on 6/09/2011)               
                     
                  } else if ((mship.equals("Jr Golf") && !sub_type.equals("JR") && !sub_type.equals("IG")) 
                          || ((sub_type.equals("GWJ") || sub_type.equals("JJ")) && ((parmp.time >= 900 && parmp.time <= 1130) 
                              || ((parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" )) && ((isDST && parmp.time >= 1600) || (!isDST && parmp.time >= 1500)))))) {
                     
                     item = "823064415";         // Green Fee code
                     fee = "15.75";              // Certified Juniors Green Fee Amount
                     
                  } else if (sub_type.equals("MN") || sub_type.equals("NN") || sub_type.equals("GWL") || 
                      sub_type.equals("G80") || sub_type.equals("IM") || sub_type.equals("JJ") || sub_type.equals("GWJ")) {
                     
                     item = "2093429451";         // Green Fee code
                     fee = "22.00";               // Green Fee Amount
                     
                  }
               }       // emnd of Olyclub custom for members
               
               
            } else if (parmp.club.equals( "baltimore" )) {

               //
               //  Baltimore CC - certain mship types are charged at all times based on the course
               //
               if (mship.equals( "No Package" ) || mship.equals( "Non Golf" )) {

                  if (parmp.course.startsWith( "West" )) {

                     item = "1620450185";          // West Course Code

                  } else {

                     item = "1785145609";          // East Course Code
                  }

               } else {

                  if (mship.equals( "Non Resident No Package" )) {

                     if (parmp.course.startsWith( "West" )) {

                        item = "1897823435";          // West Course Code

                     } else {

                        item = "997456107";          // East Course Code
                     }

                  } else {

                     if (mship.equals( "Non Season Golfer" )) {

                        if (parmp.course.startsWith( "West" )) {

                           if (parmp.p9 == 1) {                // if 9 holes

                              item = "603561154";              // West Course Code - 9 holes

                           } else {

                              item = "1801649527";              // West Course Code - 18 holes
                           }

                        } else {

                           if (parmp.p9 == 1) {                // if 9 holes

                              item = "1421916998";             // East Course Code - 9 holes

                           } else {

                              item = "1225472267";              // East Course Code - 18 holes
                           }
                        }
                     }
                  }
               }

            } else if (parmp.club.equals( "philcricket" )) {

               //
               //  Philly Cricket Club - certain mship types are charged at all times based on the course and day
               //
               if (mship.equals( "St Martins Golf" ) || mship.equals( "No Golf" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKND";     // Weekend Code        

                     if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" ) || parmp.day.equals("Friday")) {
                     
                        item = "WWKDY";     // Weekday Code
                     }

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKND";     // Weekend Code        

                     if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" ) || parmp.day.equals("Friday")) {
                     
                        item = "MHWKDY";     // Weekday Code
                     }

                  } else if (parmp.course.equals( "St Martins" ) && mship.equals( "No Golf" )) {

                     item = "SMGUEST";     // Weekend Code        

                     if (parmp.day.equals( "Tuesday" ) || parmp.day.equals( "Wednesday" ) || parmp.day.equals( "Thursday" ) || parmp.day.equals("Friday")) {
                     
                        item = "SMGUEST";     // Weekday Code
                     }
                  }
               }

            } else {   // NOT Baltimore or Philly Cricket

               loop2:
               while (i < parmp.MAX_Mships) {

                  if (parmp.mship[i].equalsIgnoreCase( mship )) {     // if matching mode mship type

                     if (parmp.p9 == 1) {                   // if 9 holes
                        item = parmp.mship9I[i];               // get mship item group #
                     } else {
                        item = parmp.mshipI[i];               // get mship item group #
                     }
                     break loop2;
                  }
                  i++;
               }
            }

            if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found for membership (non-golf mship charge)

               //
               //  Build the charge record
               //
               if (caller.equals("prtReceipt")) {           // if priniting a receipt for Olympic Club

                  fee = setFee(fee);                       // enasure dollar format (0.00)
            
                  parmp.item += ";" +fname+ " " +lname+ "," +posid+ ",Green Fee " +item+ "," +fee+ "," +tax+ "," +chit; 

               } else {

                  if (parmp.count == 0) {                         // if first item to be charged

                     addHdrNS(parmp, filename, parmp.club, caller);                   // go create the file and build the header
                  }

                  //
                  //  We can now build the charge string
                  //
                  StringBuffer tempSB = new StringBuffer(posid);     // put member's posid in string buffer
                  tempSB.append(",");
                  tempSB.append(parmp.sdate);                        // date (mm/dd/yyyy)
                  tempSB.append(",");
                  tempSB.append(item);                               // item's POS Id
                  tempSB.append(",1");                               // quantity = 1

                  line = tempSB.toString();                         // save as string value

                  addLineNS(filename, line, parmp.club, caller);                        // go add this record
               }

               parmp.count++;      // bump record counter

               done = 1;           // indicate charge sent

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = posid;
               parmp.hist_player = fname + " " + lname;   // else use member name
               parmp.hist_price = "";
               parmp.hist_item_name = "Green Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry

            }      // end of Mship Charge processing

         } else {

            //
            //  player passed is a guest - charge the member for this too
            //

            //
            //  First check if there is a charge amount associated with this guest type
            //
            i = 0;
            item = "";
            
            //
            //  Check for custom processing of guest types
            //
            if (parmp.club.equals( "olyclub" )) {        // if Olympic Club
               
               if (parmp.course.equals( "Lake" )) {        // if the Lake course
                  
                  if (parmp.player.startsWith("MHGP w/guest")) {
                     
                     item = "527513530";           // Green Fee code
                     fee = "125.00";               // guest fee charge
               
                  } else if (parmp.player.startsWith("Unacc Gst")) {
                     
                     item = "1247790648";         // Green Fee code
                     fee = "395.00";              // fee amount
                     
                  } else if (parmp.player.startsWith("Unacc Low Fee")) {
                     
                     item = "2141423388";         // Green Fee code
                     fee = "120.00";              // fee amount
                     
                  } else if (parmp.player.startsWith("Discretionary") || 
                             parmp.player.startsWith("PGA") || 
                             parmp.player.startsWith("Clergy") || 
                             parmp.player.startsWith("Fireman/Pol") || 
                             parmp.player.startsWith("Employee") || 
                             parmp.player.startsWith("GM/Super") || 
                             parmp.player.startsWith("USGA")) {   
                     
                     //item = "402";         // Green Fee code
                     fee = "0.00";         // no charge
                     item = "";            // suppress zero charges for now !!!  (per Ruby's request on 6/09/2011)               
                  }
               
               } else if (parmp.course.equals( "Ocean" )) {     // if the Ocean course
               
                  if (parmp.player.startsWith("MHGP w/guest")) {
                     
                     item = "1144964196";           // Green Fee code
                     fee = "110.00";                // guest fee charge  NOTE:  this had been changed to $85 on 10/02/12 per the club's request (Rob said it was a mistake)
               
                  } else if (parmp.player.startsWith("Member w/Guest")) {         // was MNHGP w/guest - changed 11/01/13
                     
                     item = "1769305506";         // Green Fee code
                     fee = "110.00";              // fee amount  NOTE:  this had been changed to $85 on 10/02/12 per the club's request (Rob said it was a mistake)
                     
                  } else if (parmp.player.startsWith("MHGP Guest Outing")) {
                     
                     item = "1819757532";         // Green Fee code   
                     fee = "110.00";               // fee amount
                     
                  } else if (parmp.player.startsWith("Twilight Gst")) {
                     
                     item = "870155347";         // Green Fee code 
                     fee = "40.00";              // fee amount
                     
                  } else if (parmp.player.startsWith("Coach Staff")) {
                     
                     item = "18649954";         // Green Fee code
                     fee = "76.00";             // fee amount
                     
                  } else if (parmp.player.startsWith("Unacc Gst")) {
                     
                     item = "1607484045";         // Green Fee code
                     fee = "265.00";              // fee amount
                     
                  } else if (parmp.player.startsWith("Unacc Low Fee")) {
                     
                     item = "179799724";         // Green Fee code
                     fee = "105.00";             // fee amount
                     
                  } else if (parmp.player.startsWith("Family Rate")) {
                     
                     item = "425510628";         // Green Fee code
                     fee = "10.00";              // fee amount
                     
                  } else if (parmp.player.startsWith("Discretionary") || 
                             parmp.player.startsWith("PGA") || 
                             parmp.player.startsWith("Clergy") || 
                             parmp.player.startsWith("Fireman/Pol") || 
                             parmp.player.startsWith("Employee") || 
                             parmp.player.startsWith("GM/Super") || 
                             parmp.player.startsWith("USGA")) {   
                     
                     //item = "495";         // Green Fee code
                     fee = "0.00";         // no charge
                     item = "";            // suppress zero charges for now !!!  (per Ruby's request on 6/09/2011)               
                  }
                    
               } else {         // Cliffs course
                  
                  if (parmp.player.startsWith("MHGP w/guest")) {
                     
                     item = "1931055113";           // Green Fee code  (changed from 493 on 6/16/11 per Ruby Chin)
                     fee = "30.00";                 // guest fee charge
               
                  } else if (parmp.player.startsWith("Member w/Guest")) {        // was MNHGP w/guest - changed 11/01/13
                     
                     item = "1794675599";         // Green Fee code
                     fee = "30.00";               // fee amount
                     
                  } else if (parmp.player.startsWith("Discretionary") || 
                             parmp.player.startsWith("PGA") || 
                             parmp.player.startsWith("Fireman/Pol") || 
                             parmp.player.startsWith("Employee") || 
                             parmp.player.startsWith("GM/Super")) {   
                     
                     //item = "495";         // Green Fee code
                     fee = "0.00";         // no charge
                     item = "";            // suppress zero charges for now !!!  (per Ruby's request on 6/09/2011)               
                  }
               }         // end of olyclub custom guest processing
               
               
            } else if (parmp.club.equals( "philcricket" )) {

               //
               //  Philly Cricket Club - certain guest types are charged at all times based on the course and day
               //
               if (parmp.player.startsWith( "Wkday" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKDY";         
                     
                     if (parmp.p9 == 1) {                // if 9 holes
                         
                         item = "W9WKDY";
                     }

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKDY"; 
                     
                     if (parmp.p9 == 1) {                // if 9 holes
                         
                         item = "MH9WKDY";
                     }
                     
                  } else {
                     
                     item = "SMGUEST";     // St Martins
                  }
                  
               } else if (parmp.player.startsWith( "Wkend" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKND";   
                     
                     if (parmp.p9 == 1) {                // if 9 holes
                         
                         item = "W9WKND";
                     }        

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKND";  
                     
                     if (parmp.p9 == 1) {                // if 9 holes
                         
                         item = "MH9WKND";
                     }        
                     
                  } else {
                     
                     item = "SMGUEST";     // St Martins
                  }
                  
               } else if (parmp.player.startsWith( "*Wkdayfam" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKDYFG";         

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKDYFG";          
                     
                  } else {
                     
                     item = "SMGUEST";     // St Martins
                  }
                  
               } else if (parmp.player.startsWith( "*Wkendfam" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKNDFG";     // Weekend Code        

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKNDFG";     // Weekend Code        
                     
                  } else {
                     
                     item = "SMGUEST";     // St Martins
                  }
                  
               }/* else if (parmp.player.startsWith( "Unaccweekday" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKDYUN";        

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKDYUN";           
                     
                  } else {
                     
                     item = "SMGUEST";     // St Martins
                  }
                  
               } else if (parmp.player.startsWith( "Unaccwkend" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKNDUN";     

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKNDUN";        
                     
                  } else {
                     
                     item = "SMGUEST";     // St Martins
                  }
                  
               }*/ else if (parmp.player.startsWith( "Recip" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WRECIP";         

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHRECIP";         
                  }
                  
               } else if (parmp.player.startsWith( "JrWkday" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKDYJR";    

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKDYJR";           
                     
                  } else {
                     
                     item = "SMGUEST";     // St Martins
                  }
                  
               } else if (parmp.player.startsWith( "JrWkend" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WWKNDJR";    

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHWKNDJR";           
                     
                  } else {
                     
                     item = "SMGUEST";     // St Martins
                  }       
                  
               } else if (parmp.player.startsWith( "SponsUnacc" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WSPONS";    

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHSPONS";           
                     
                  }    
                  
               } else if (parmp.player.startsWith( "Unaccompanied" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WUNSPONS";    

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHUNSPONS";           
                     
                  }    
                  
               }/* else if (parmp.player.startsWith( "UnsponsUnacc" )) {

                  if (parmp.course.equals( "Wissahickon" )) {

                     item = "WUNSPONS";    

                  } else if (parmp.course.equals( "Militia Hill" )) {

                     item = "MHUNSPONS";           
                     
                  }                  
               }*/

            } else {    // end of IF Philly Cricket            
            
               //
               //   All others - check guest type
               //
               loop3:
               while (i < parmp.MAX_Guests) {

                  if (parmp.player.startsWith( parmp.gtype[i] )) {

                     gtype = parmp.gtype[i];               // set guest type description
                     if (parmp.p9 == 1) {                   // if 9 holes
                        item = parmp.gst9I[i];                 // set guest item group #
                     } else {
                        item = parmp.gstI[i];                 // set guest item group #
                     }
                     break loop3;
                  }
                  i++;
               }
            }

            if (!item.equals( "" ) && !item.equals( "0" )) {   // if pos charge found

               //
               //  Build the charge record
               //
               if (caller.equals("prtReceipt")) {           // if priniting a receipt for Olympic Club

                  fee = setFee(fee);                       // enasure dollar format (0.00)
            
                  parmp.item += ";" +fname+ " " +lname+ "," +posid+ "," +parmp.player+ "," +fee+ "," +tax+ "," +chit; 

               } else {

                  if (parmp.count == 0) {                         // if first item to be charged

                     addHdrNS(parmp, filename, parmp.club, caller);                   // go create the file and build the header
                  }

                  //
                  //  We can now build the charge string
                  //
                  StringBuffer tempSB = new StringBuffer(posid);     // put member's posid in string buffer
                  tempSB.append(",");
                  tempSB.append(parmp.sdate);                        // date (mm/dd/yyyy)
                  tempSB.append(",");
                  tempSB.append(item);                               // item's POS Id
                  tempSB.append(",1");                               // quantity = 1

                  line = tempSB.toString();                         // save as string value

                  addLineNS(filename, line, parmp.club, caller);                        // go add this record
               }

               parmp.count++;      // bump record counter

               done = 1;           // indicate charge sent

               //
               //  Save charge data in pos_hist for reports
               //
               parmp.hist_posid = posid;
               parmp.hist_player = parmp.player;          // if guest
               parmp.hist_price = "";
               parmp.hist_item_name = "Guest Fee";
               parmp.hist_item_num = item;

               add_POS_hist(parmp, con);       // go make the entry
            }
         }     // end of guest processing

      }        // end of IF no posid

   }
   catch (Exception e1) {

      String errorMsg1 = "Error1 in Proshop_sheet_pos.buildLineNS: ";
      errorMsg1 = errorMsg1 + e1.getMessage();                                // build error msg

      SystemUtils.logError(errorMsg1);                                       // log it
   }

   return(done);
 }                   // end of buildLineNS


 // ********************************************************************
 //
 //  NorthStar POS - Create a new ASCII file and add the header.
 //
 // ********************************************************************

 private static void addHdrNS(parmPOS parmp, String filename, String club, String caller) {


    addLineNS(filename, parmp.sdate, club, caller);                // go create file and add header

    //
    //  Now strip the time stamp from sdate so we can use the date for each record
    //
    //   "mm/dd/yyyy hh:mm:ss" -> "mm/dd/yyyy"
    //
    StringTokenizer tok = new StringTokenizer( parmp.sdate, " " );     // delimiters are space

    parmp.sdate = tok.nextToken();        // date only
 }


 // *********************************************************
 //  Create POS History entry in pos_hist table
 // *********************************************************

 private static void add_POS_hist(parmPOS parmp, Connection con) {


   //
   //   Use the info in parmp to create a history entry
   try {

      PreparedStatement pstmt = con.prepareStatement (
        "INSERT INTO pos_hist (date, time, course, fb, member_id, player, " +
        "item_num, item_name, price, salestax, p9, date_time) " +
        "VALUES (?,?,?,?,?,?,?,?,?,?,?,now())");

      pstmt.clearParameters();        // clear the parms
      pstmt.setLong(1, parmp.date);
      pstmt.setInt(2, parmp.time);
      pstmt.setString(3, parmp.course);
      pstmt.setInt(4, parmp.hist_fb);
      pstmt.setString(5, parmp.hist_posid);
      pstmt.setString(6, parmp.hist_player);
      pstmt.setString(7, parmp.hist_item_num);
      pstmt.setString(8, parmp.hist_item_name);
      pstmt.setString(9, parmp.hist_price);
      pstmt.setString(10, parmp.hist_tax);
      pstmt.setInt(11, parmp.p9);

      pstmt.executeUpdate();          // execute the prepared stmt

      pstmt.close();   // close the stmt

   }
   catch (Exception exc) {

     SystemUtils.logError("Proshop_sheet_pos - exception in add_POS_hist. Error = " +exc.getMessage());
     return;
   }

 }



 //************************************************************************
 //  addLineNS - create a text file (if not already done) and add a line to it.
 //
 //  Text file = clubname__.txt for NorthStar POS charges (__ is date and time)
 //
 //    The file is built as "clubname__.temp".  Once it is complete it is renamed.
 //    This prevents the possibility of NS picking up the file before it is complete.
 //
 //************************************************************************

 private static void addLineNS(String fname, String line, String club, String caller) {

   String dirname = "//home//northstar//pos//";  // create directory name
   String filename = fname + ".temp";            // create full file name (temp file)
   String filename2 = fname + ".txt";            // create full file name (complete file)

   //
   //  If Olympic Club and charges from Old Sheets, change the directory so NS won't pick up the file.
   //  NS does not process the date and assumes all charges are for the same day they get the charges.
   //  Olympic Club wants to get the file via email so they can run them manually.
   //
   if (club.equals("olyclub") && caller.equals("old")) {
      
      dirname = "//home//olyclubpos//";      //  holding area until we download it manually
   }
   
   String fileDest = dirname + filename;         // destination (temp file)
   String fileDest2 = dirname + filename2;       // destination (complete file)
   

   try {
      //
      //  Dir path for the real server
      //
      PrintWriter fout1 = new PrintWriter(new FileWriter(fileDest, true));

      //
      //  Put header line in text file
      //
      fout1.print(line);
      fout1.println();                            // output the line

      fout1.close();

      //
      //  Rename the file if this is the end
      //
      if (line.equals( "EOF" )) {                  // if end of the file

         File tempf = new File(fileDest);          // get temp file
         File tempf2 = new File(fileDest2);        // get complete file name
         tempf.renameTo(tempf2);                   // rename it (file is now complete and ready)
      }

   }
   catch (Exception e2) {

      Utilities.logError("Proshop_sheet_pos.addLineNS: Error adding line to file (NorthStar POS).  Exception=" + e2.getMessage() + ", " + e2.toString());
   }

 }  // end of addLineNS


 
 //************************************************************************
 //  addOlyLine - create a text file (if not already done) and add a line to it.
 //
 //  Text file = arupload.mas (one per course) - for The Olympic Club
 //
 //  Each night we process the POS charges for each course and store
 //  a file.  The club then FTPs in and pulls the files down to process.
 //
 //************************************************************************
 //
 //
 //   NOTE:  Olympic Club is switching from CSG to NorthStar and 9/01/2013 and will no longer need this!!!!
 //

 private static void addOlyLine(String line, parmPOS parmp) {

    
   String buname = "";                           // backup file name
   String folder = "cliffs";                     // folder for these charges (one per course under the home/olyclubpos folder)
   
   if (parmp.course.equals("Lake")) {
      
      folder = "lakes";
      
   } else if (parmp.course.equals("Ocean")) {
      
      folder = "ocean";
   }
   
   Calendar cal = new GregorianCalendar();       // get todays date
   int year = cal.get(Calendar.YEAR);
   int month = cal.get(Calendar.MONTH) +1;
   int day = cal.get(Calendar.DAY_OF_MONTH);

   //
   //  Use the date/time to create an extension for the backup file name
   //
   buname = "arupload_" +year+ "-" +month+ "-" +day+ ".txt";  
   
   
   String fileDest1 = "//home//olyclubpos//" +folder+ "//arupload.mas";           // destination for real files

   String fileDest2 = "//home//olyclubpos//archive//" +folder+ "//" +buname;      // destination for backup files


   try {
      
      //
      //  Dir path for the original files
      //
      PrintWriter fout1 = new PrintWriter(new FileWriter(fileDest1, true));

      //
      //  Put line in mas file
      //
      fout1.print(line);
      fout1.println();                            // output the line

      fout1.close();

      //
      //  Dir path for the backup files
      //
      fout1 = new PrintWriter(new FileWriter(fileDest2, true));

      //
      //  Put line in backup text file
      //
      fout1.print(line);
      fout1.println();                            // output the line

      fout1.close();

   }
   catch (Exception e2) {

      Utilities.logError("Proshop_sheet_pos.addOlyLine: Error adding line to file (Olympic Club POS).  Exception=" + e2.getMessage() + ", " + e2.toString());
   }

 }  // end of addOlyLine


 
 //************************************************************************
 //  addPCSLine - create a text file (if not already done) and add a line to it.
 //
 //  Text file =  (one per course) - for Ironwood
 //
 //  Each night we process the POS charges for each course and store
 //  a file.  The club then FTPs in and pulls the files down to process.
 //
 //************************************************************************

 private static void addPCSLine(String line, parmPOS parmp) {

    
   String buname = "";                           // backup file name
   String folder = "south";                     // folder for these charges (one per course under the home/ironwoodpos folder)
   
   if (parmp.course.equals("North")) {
      
      folder = "north";
   }
   
   Calendar cal = new GregorianCalendar();       // get todays date
   int year = cal.get(Calendar.YEAR);
   int month = cal.get(Calendar.MONTH) +1;
   int day = cal.get(Calendar.DAY_OF_MONTH);
   int hr = cal.get(Calendar.HOUR_OF_DAY);
   int min = cal.get(Calendar.MINUTE);

   //
   //  Use the date/time to create an extension for the backup file name
   //
   //buname = "ironwoodpos_" +year+ "-" +month+ "-" +day+ ".txt";  
   buname = "ironwoodpos_" +year+ "-" +month+ "-" +day+ "-" +hr+ ":" +min+ ".txt";    // add hr & min so they can send manually now
   
   //
   //  establish an ASCII filename       (foretees-yyyymmdd.csv)
   //
   String tempNS = "foretees-" + String.valueOf(year);

   if (month < 10) {

      tempNS += "0" + String.valueOf(month);

   } else {

      tempNS += String.valueOf(month);
   }

   if (day < 10) {

      tempNS += "0" + String.valueOf(day) + ".csv";

   } else {

      tempNS += String.valueOf(day) + ".csv";
   }

   //  add hr & min so they can send manually now
   
   if (hr < 10) {

      tempNS += "0" + String.valueOf(hr) + ".csv";

   } else {

      tempNS += String.valueOf(hr) + ".csv";
   }

   if (min < 10) {

      tempNS += "0" + String.valueOf(min) + ".csv";

   } else {

      tempNS += String.valueOf(min) + ".csv";
   }

   
   String fileDest1 = "//home//ironwoodpos//" +folder+ "//" +tempNS;           // destination for real files

   String fileDest2 = "//home//ironwoodpos//archive//" +folder+ "//" +buname;      // destination for backup files


   try {
      
      //
      //  Dir path for the original files
      //
      PrintWriter fout1 = new PrintWriter(new FileWriter(fileDest1, true));

      //
      //  Put line in mas file
      //
      fout1.print(line);
      fout1.println();                            // output the line

      fout1.close();

      //
      //  Dir path for the backup files
      //
      fout1 = new PrintWriter(new FileWriter(fileDest2, true));

      //
      //  Put line in backup text file
      //
      fout1.print(line);
      fout1.println();                            // output the line

      fout1.close();

   }
   catch (Exception e2) {

      Utilities.logError("Proshop_sheet_pos.addPCSLine: Error adding line to file (PCS Group POS).  Exception=" + e2.getMessage() + ", " + e2.toString());
   }

 }  // end of addPCSLine


 
 
 
 //
 //  Add charges to POS array for IBS I/F
 //
 private static void addCharge(parmPOS parm, String posid, String invNumber, double price, double tax, int qty) {

    try {

        //int x = (parm.charges.size() > 0) ? parm.charges.size() - 1 : 0;

        if (parm.charges.size() == 0) {

            parm.charges.add(new ArrayList<String>());
            parm.charges.get(0).add(posid);

        } else {

            // there are already charges in the array so let's check the last posid and see if it's the same as this incoming one
            if (posid != parm.charges.get(parm.charges.size() - 1).get(0)) {

                // it's a different posid than the last one
                parm.charges.add(new ArrayList<String>());
                parm.charges.get(parm.charges.size() - 1).add(posid);
            }

        }
 /*
        if (posid != null) {

            parm.charges.add(new ArrayList<String>());

            parm.charges.get(x).add(posid); // parm.charges.size() - 1

        }
*/
        parm.charges.get(parm.charges.size() - 1).add(invNumber + "|" + price + "|" + tax + "|" + qty);
        //Utilities.logError("addCharge(" + (parm.charges.size() - 1) + ") - Adding: " + invNumber + "|" + price + "|" + tax + "|" + qty);

    } catch (Exception exc) {

        Utilities.logError("Proshop_sheet_pos.addCharge(): Error adding charge to ArrayList.  Exception=" + exc.getMessage() + ", " + exc.toString());
        
    }
 }       // end of IBS addCharge

 
 
 
 // ********************************************************************
 //  Print a receipt for the Olympic Club
 // ********************************************************************

 public static void printReceipt(HttpServletRequest req, HttpServletResponse resp, PrintWriter out, HttpSession session,
                           Connection con) {
    
    printReceipt(req, resp, out, session, con, false);      // go process for current tee sheet
 }
 

 public static void printReceipt(HttpServletRequest req, HttpServletResponse resp, PrintWriter out, HttpSession session,
                           Connection con, boolean oldsheets) {

   Statement stmt = null;
   PreparedStatement pstmt2s = null;

   ResultSet rs = null;

   String player1 = "";
   String player2 = "";
   String player3 = "";
   String player4 = "";
   String player5 = "";
   String user1 = "";
   String user2 = "";
   String user3 = "";
   String user4 = "";
   String user5 = "";
   String p1cw = "";
   String p2cw = "";
   String p3cw = "";
   String p4cw = "";
   String p5cw = "";
   String userg1 = "";
   String userg2 = "";
   String userg3 = "";
   String userg4 = "";
   String userg5 = "";
   String mNum1 = "";
   String mNum2 = "";
   String mNum3 = "";
   String mNum4 = "";
   String mNum5 = "";
   String course = "";
   String temp = "";
   String day = "";
   String ampm = "";
   String stime = "";
   String tee_id = "";

   int guest = 0;
   int p91 = 0;
   int p92 = 0;
   int p93 = 0;
   int p94 = 0;
   int p95 = 0;
   int show1 = 0;
   int show2 = 0;
   int show3 = 0;
   int show4 = 0;
   int show5 = 0;
   int i = 0;
   int ttid = 0;
   int fb = 0;
   int time = 0;
   int time2 = 0;
   int hr = 0;
   int min = 0;
   int charges1 = 0;
   int charges2 = 0;
   int charges3 = 0;
   int charges4 = 0;
   int charges5 = 0;
   int mm = 0;
   int dd = 0;
   int yy = 0;
   long date = 0;
   
   boolean checkP1 = false;
   boolean checkP2 = false;
   boolean checkP3 = false;
   boolean checkP4 = false;
   boolean checkP5 = false;
   boolean checkAll = false;
   
   String caller = "prtReceipt";
   
   String club = (String)session.getAttribute("club");      // get club name

   //
   //  Get the tee time parms passed
   //
   if (req.getParameter("teecurr_id") != null) {
      
      tee_id = req.getParameter("teecurr_id");
      
   } else if (req.getParameter("teepast_id") != null) {
      
      tee_id = req.getParameter("teepast_id");
   }   
   
   ttid = Integer.parseInt(tee_id);

   //
   //  parm block to hold the club parameters
   //
   parmClub parm = new parmClub(0, con);
   
   //
   //  parm block to hold the POS parameters
   //
   parmPOS parmp = new parmPOS();

   //
   //   Save club name in parmp
   //
   parmp.club = club;

   parmp.count = 0;                 // init record counter
   
   
   //
   //  Determine if this is the first call (check for charges & prompt) or 2nd call (list the charges for selected players)
   //
   if (req.getParameter("prtReceipt2") != null) {
      
      checkAll = false;
      
      //  get the players to list
      
      if (req.getParameter("p1") != null && req.getParameter("p1").equalsIgnoreCase("1")) {
         
         checkP1 = true;
      }
      if (req.getParameter("p2") != null && req.getParameter("p2").equalsIgnoreCase("1")) {
         
         checkP2 = true;
      }
      if (req.getParameter("p3") != null && req.getParameter("p3").equalsIgnoreCase("1")) {
         
         checkP3 = true;
      }
      if (req.getParameter("p4") != null && req.getParameter("p4").equalsIgnoreCase("1")) {
         
         checkP4 = true;
      }
      if (req.getParameter("p5") != null && req.getParameter("p5").equalsIgnoreCase("1")) {
         
         checkP5 = true;
      }          
      
   } else {     // this is the 1st call
      
      checkAll = true;      // check all players for charges and prompt user 
   }
   
         
   //
   //  Get the players for this tee time and then get their charges
   //
   try {

      if (oldsheets == false) {
         
         pstmt2s = con.prepareStatement (
            "SELECT * " +
            "FROM teecurr2 WHERE teecurr_id = ?");

      } else {
         
         pstmt2s = con.prepareStatement (
            "SELECT * " +
            "FROM teepast2 WHERE teepast_id = ?");
      }
         
      pstmt2s.clearParameters();        // clear the parms
      pstmt2s.setInt(1, ttid);

      rs = pstmt2s.executeQuery();      // execute the prepared stmt

      if (rs.next()) {

         date = rs.getLong("date");
         mm = rs.getInt("mm");
         dd = rs.getInt("dd");
         yy = rs.getInt("yy");
         day = rs.getString("day");
         hr = rs.getInt("hr");
         min = rs.getInt("min");
         time = rs.getInt("time");
         player1 = rs.getString("player1");
         player2 = rs.getString("player2");
         player3 = rs.getString("player3");
         player4 = rs.getString("player4");
         user1 = rs.getString("username1");
         user2 = rs.getString("username2");
         user3 = rs.getString("username3");
         user4 = rs.getString("username4");
         p1cw = rs.getString("p1cw");
         p2cw = rs.getString("p2cw");
         p3cw = rs.getString("p3cw");
         p4cw = rs.getString("p4cw");
         show1 = rs.getInt("show1");
         show2 = rs.getInt("show2");
         show3 = rs.getInt("show3");
         show4 = rs.getInt("show4");
         fb = rs.getInt("fb");
         player5 = rs.getString("player5");
         user5 = rs.getString("username5");
         p5cw = rs.getString("p5cw");
         course = rs.getString("courseName");
         show5 = rs.getInt("show5");
         userg1 = rs.getString("userg1");
         userg2 = rs.getString("userg2");
         userg3 = rs.getString("userg3");
         userg4 = rs.getString("userg4");
         userg5 = rs.getString("userg5");
         mNum1 = rs.getString("mNum1");
         mNum2 = rs.getString("mNum2");
         mNum3 = rs.getString("mNum3");
         mNum4 = rs.getString("mNum4");
         mNum5 = rs.getString("mNum5");
         p91 = rs.getInt("p91");
         p92 = rs.getInt("p92");
         p93 = rs.getInt("p93");
         p94 = rs.getInt("p94");
         p95 = rs.getInt("p95");
         
         try {
             //
             // Get the Guest Types from the club db
             //
             getClub.getParms(con, parm);        // get the club parms
             
             //
             //  Get the POS System Parameters for this Club & Course
             //
             getClub.getPOS(con, parmp, course);
             
         }
         catch (Exception e1) {
         }
         
         parmp.day = day;       // save tee time values in parmp
         parmp.time = time;
         parmp.date = date;
         parmp.sdate = String.valueOf((date-20000000));              // yymmdd
         parmp.course = course;
         parmp.item = "";                // use this field for the player charge information
         
         
         String filename = getFileName(date, course, parmp);    // build the file name (clubname-mmddyyyy-hhmmss.txt)
   
         //
         //  Process one player at a time to determine any charges
         //
         if (!player1.equalsIgnoreCase( "x" ) && !player1.equals( "" ) && (checkAll == true || checkP1 == true)) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user1.equals( "" )) {            // if no username for this player

               ploop1:
               while (i < parm.MAX_Guests) {
                  if (player1.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player1 is a guest name
                     break ploop1;
                  }
                  i++;
               }
            }
            parmp.pcw = p1cw;
            parmp.p9 = p91;

            if (guest == 0) {        // if member

               if (!user1.equals( "" )) {      // skip if no user name found or already processed

                  parmp.player = "";           // indicate member
                  parmp.user = user1;

                  if (parmp.posType.equals("ClubSystems Group")) {
                      
                     charges1 = buildCSG(parmp, out, con, club, ttid, caller);
                     
                  } else if (parmp.posType.equals("NorthStar")) {
                      
                     charges1 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {
                      
                     charges1 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }

            } else {          // else guest

               if (!userg1.equals( "" )) {      // skip if no member associated with this guest

                  parmp.player = player1;       // indicate guest - pass the guest type
                  parmp.user = userg1;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges1 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges1 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges1 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null

         if (!player2.equalsIgnoreCase("x") && !player2.equals("") && (checkAll == true || checkP2 == true)) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user2.equals( "" )) {            // if no username for this player

               ploop1:
               while (i < parm.MAX_Guests) {
                  if (player2.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player1 is a guest name
                     break ploop1;
                  }
                  i++;
               }
            }
            parmp.pcw = p2cw;
            parmp.p9 = p92;

            if (guest == 0) {        // if member

               if (!user2.equals( "" )) {      // skip if no user name found or already processed

                  parmp.player = "";           // indicate member
                  parmp.user = user2;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges2 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges2 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges2 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }

            } else {          // else guest

               if (!userg2.equals( "" )) {      // skip if no member associated with this guest

                  parmp.player = player2;       // indicate guest - pass the guest type
                  parmp.user = userg2;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges2 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges2 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges2 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null

         if (!player3.equalsIgnoreCase( "x" ) && !player3.equals( "" ) && (checkAll == true || checkP3 == true)) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user3.equals( "" )) {            // if no username for this player

               ploop1:
               while (i < parm.MAX_Guests) {
                  if (player3.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player1 is a guest name
                     break ploop1;
                  }
                  i++;
               }
            }
            parmp.pcw = p3cw;
            parmp.p9 = p93;

            if (guest == 0) {        // if member

               if (!user3.equals( "" )) {      // skip if no user name found or already processed

                  parmp.player = "";           // indicate member
                  parmp.user = user3;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges3 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges3 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges3 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }

            } else {          // else guest

               if (!userg3.equals( "" )) {      // skip if no member associated with this guest

                  parmp.player = player3;       // indicate guest - pass the guest type
                  parmp.user = userg3;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges3 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges3 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges3 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null

         if (!player4.equalsIgnoreCase( "x" ) && !player4.equals( "" ) && (checkAll == true || checkP4 == true)) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user4.equals( "" )) {            // if no username for this player

               ploop1:
               while (i < parm.MAX_Guests) {
                  if (player4.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player1 is a guest name
                     break ploop1;
                  }
                  i++;
               }
            }
            parmp.pcw = p4cw;
            parmp.p9 = p94;

            if (guest == 0) {        // if member

               if (!user4.equals( "" )) {      // skip if no user name found or already processed

                  parmp.player = "";           // indicate member
                  parmp.user = user4;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges4 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges4 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges4 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }

            } else {          // else guest

               if (!userg4.equals( "" )) {      // skip if no member associated with this guest

                  parmp.player = player4;       // indicate guest - pass the guest type
                  parmp.user = userg4;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges4 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges4 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges4 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null

         if (!player5.equalsIgnoreCase( "x" ) && !player5.equals( "" ) && (checkAll == true || checkP5 == true)) {

            //
            //  Check if player name is member or guest
            //
            i = 0;
            guest = 0;

            if (user5.equals( "" )) {            // if no username for this player

               ploop1:
               while (i < parm.MAX_Guests) {
                  if (player5.startsWith( parm.guest[i] )) {

                     guest = 1;       // indicate player1 is a guest name
                     break ploop1;
                  }
                  i++;
               }
            }
            parmp.pcw = p5cw;
            parmp.p9 = p95;

            if (guest == 0) {        // if member

               if (!user5.equals( "" )) {      // skip if no user name found or already processed

                  parmp.player = "";           // indicate member
                  parmp.user = user5;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges5 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges5 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges5 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }

            } else {          // else guest

               if (!userg5.equals( "" )) {      // skip if no member associated with this guest

                  parmp.player = player5;       // indicate guest - pass the guest type
                  parmp.user = userg5;

                  if (parmp.posType.equals("ClubSystems Group")) {

                     charges5 = buildCSG(parmp, out, con, club, ttid, caller);

                  } else if (parmp.posType.equals("NorthStar")) {

                     charges5 = buildLineNS(parmp, filename, out, con, ttid, caller);
                     
                  } else if (parmp.posType.equals("Jonas Generic")) {

                     charges5 = buildJonasGeneric(parmp, out, con, 0, club, caller);
                     
                  }
               }
            }   // end of IF member or guest
         }      // end of IF player not X and not null
   
      }     // end of IF teecurr2 data

      pstmt2s.close();

   }
   catch (Exception e1) {

      String errorMsg1 = "Error1 in Proshop_sheet_pos.printReceipt: ";
      errorMsg1 = errorMsg1 + e1.getMessage();                                // build error msg

      SystemUtils.logError(errorMsg1);                                       // log it
   }

   //
   //  Output the receipt if any charges found
   //
   //    parmp.item contains the charge info - each charge preceeded by an ";" and fields separated by commas
   //
   out.println(SystemUtils.HeadTitle("Proshop Print Receipt"));
   out.println("<body bgcolor=\"#FFFFFF\" text=\"#000000\">");
   out.println("<font face=\"Arial, Helvetica, Sans-serif\"><center>");

   if (!parmp.item.equals("")) {      // if any charges found
      
      if (checkAll == true) {
         
         // display a list of players that have charges and prompt user to select the ones they want on the receipt
         
         if (oldsheets == false) {
         
            out.println("<form action=\"Proshop_sheet\" method=\"post\">");
            out.println("<input type=\"hidden\" name=\"teecurr_id\" value=\"" +ttid+ "\">");  // 2nd call
            
         } else {
            
            out.println("<form action=\"Proshop_oldsheets\" method=\"post\">");
            out.println("<input type=\"hidden\" name=\"teepast_id\" value=\"" +ttid+ "\">");  // 2nd call
         }
         out.println("<input type=\"hidden\" name=\"prtReceipt\" value=\"yes\">");   // this will get us back here
         out.println("<input type=\"hidden\" name=\"prtReceipt2\" value=\"yes\">");  // 2nd call
         out.println("<font size=\"3\">");
         out.println("<b>Charges Found</b>");
         out.println("</font>");
         out.println("<font size=\"2\"><br><br>Please select the players to include on the receipt.<br><br>");
         out.println("Player 1 in this group is <b>" +player1+ "</b>.<br><br>");
         
         out.println("<table border=\"0\" valign=\"top\" align=\"center\" width=\"240\">");    
         out.println("<tr><td align=\"left\"><font size=\"2\">");

         if (charges1 > 0) {
            out.println("&nbsp;&nbsp;&nbsp;<label><input type=\"checkbox\" name=\"p1\" value=\"1\">&nbsp;&nbsp;&nbsp;" +player1+ "</label><BR>");
         }
         if (charges2 > 0) {
            out.println("&nbsp;&nbsp;&nbsp;<label><input type=\"checkbox\" name=\"p2\" value=\"1\">&nbsp;&nbsp;&nbsp;" +player2+ "</label><BR>");
         }
         if (charges3 > 0) {
            out.println("&nbsp;&nbsp;&nbsp;<label><input type=\"checkbox\" name=\"p3\" value=\"1\">&nbsp;&nbsp;&nbsp;" +player3+ "</label><BR>");
         }
         if (charges4 > 0) {
            out.println("&nbsp;&nbsp;&nbsp;<label><input type=\"checkbox\" name=\"p4\" value=\"1\">&nbsp;&nbsp;&nbsp;" +player4+ "</label><BR>");
         }
         if (charges5 > 0) {
            out.println("&nbsp;&nbsp;&nbsp;<label><input type=\"checkbox\" name=\"p5\" value=\"1\">&nbsp;&nbsp;&nbsp;" +player5+ "</label><BR>");
         }
         
         out.println("</font></td></tr>");        
         out.println("</table>");
         
         out.println("<table border=\"0\" valign=\"top\">");       // table for main page
         out.println("<tr><td align=\"center\">");
         out.println("<input type=\"submit\" value=\"Continue\" style=\"text-decoration:underline; background:#8B8970\"></form>");
         out.println("</td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
         out.println("</td><td align=\"center\">");
         out.println("<button type=\"button\" style=\"text-decoration:underline; background:#8B8970\" onclick='self.close()'>Close</button>");
         out.println("</td></tr></table>");
         
         
      } else {
         
         StringTokenizer tok = null;         
         StringTokenizer tok2 = null;      
         
         double subtotal = 0;
         double taxtotal = 0;
         double grandtotal = 0;
         
         String fee = "";
         String tax = "";
         String charge = "";
         String lastPlayer = "";
         String price = "";
         String club_name = "";
         
         String [] playerA = new String [10];     // allow for 2 charges per player
         String [] posidA = new String [10];
         String [] itemA = new String [10];
         double [] feeA = new double [10];
         double [] taxA = new double [10];
         
         for (i=0; i<10; i++) {
            
            playerA[i] = "";      // init the arrays
            posidA[i] = "";
            itemA[i] = "";
            feeA[i] = 0;
            taxA[i] = 0;
         }         
         
         i = 0;
         
         if (club.equals("olyclub")) {
             club_name = "The Olympic Club";
         }
         
         //
         //  Parse the charges from parmp.item 
         //
         //    Format:   charge1;charge2;charge3;....etc
         //
         //           charges:  member name, posid, item description, fee, tax
         //
         tok = new StringTokenizer( parmp.item, ";" );     // delimiter between charges is a semicolon

         int tokcount = tok.countTokens();
         
         while (tokcount > 0) {          // get all charges
            
            charge = tok.nextToken();
            
            if (!charge.equals("")) {     // if anything there
               
               tok2 = new StringTokenizer( charge, "," );     // delimiter between charge fields is a comma
               
               playerA[i] = tok2.nextToken();
               posidA[i] = tok2.nextToken();
               itemA[i] = tok2.nextToken();
               fee = tok2.nextToken();
               tax = tok2.nextToken();   
               if (fee.equals("0") || fee.equals("       0.00")) {
                  feeA[i] = 0.00;                                 
               } else {
                  fee = setFee(fee);                     // ensure dollar value (i.e.  2.34 or 0.00)
                  feeA[i] = Double.parseDouble(fee);
               }
               if (tax.equals("0") || tax.equals("       0.00")) {
                  taxA[i] = 0.00;                                 
               } else {
                  tax = setFee(tax);
                  taxA[i] = Double.parseDouble(tax);               
               }
            }            
            i++;
            tokcount--;
         }
         
         if (hr > 12) hr = hr - 12;
         
         stime = hr + ":" + SystemUtils.ensureDoubleDigit(min);
         

         out.println("<font size=\"2\">");
         out.println("<table border=\"0\" valign=\"top\" align=\"center\" width=\"250\">");    
         out.println("<tr><td align=\"left\" colspan=\"2\"><font size=\"2\">");
         out.println(club_name + "<BR>Tee Time: " +mm+ "/" +dd+ "/" +yy+ "&nbsp;&nbsp;&nbsp;" +day+ "&nbsp;&nbsp;&nbsp;" +course+ "&nbsp;&nbsp;&nbsp;" +stime+ "<BR><BR>");
         out.println("</font></td></tr>");
         //
         //  Add each individual charge
         //
         for (i=0; i<10; i++) {
            
            if (!playerA[i].equals("")) {
            
               out.println("<tr><td align=\"left\"><font size=\"2\">");
               if (playerA[i].equals(lastPlayer)) {
                  out.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +itemA[i]);
                  out.println("</font></td><td align=\"right\"><font size=\"2\">");
                  price = String.valueOf(feeA[i]);  
                  price = setFee(price);
                  out.println("$" +price+ "<BR>");
                  out.println("</font></td></tr>");
               } else {
                  out.println(playerA[i]+ " - " +posidA[i]+ "<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +itemA[i]);
                  lastPlayer = playerA[i];
                  out.println("</font></td><td align=\"right\"><font size=\"2\">");
                  price = String.valueOf(feeA[i]);  
                  price = setFee(price);
                  out.println("<BR>$" +price+ "<BR>");
                  out.println("</font></td></tr>");
               }
               
               subtotal += feeA[i];
               taxtotal += taxA[i];
            }
         }
         
         grandtotal = subtotal + taxtotal;
         
         out.println("<tr><td align=\"left\"><font size=\"2\">");          // totals
         out.println("&nbsp;");
         out.println("</font></td><td align=\"right\"><font size=\"2\">");
         out.println("<BR>_________");
         out.println("</font></td></tr>");
         out.println("<tr><td align=\"left\"><font size=\"2\">");          // sub total
         out.println("Sub Total:");
         out.println("</font></td><td align=\"right\"><font size=\"2\">");
         price = String.valueOf(subtotal);  
         price = setFee(price);
         out.println("$" +price);
         out.println("</font></td></tr>");
         out.println("<tr><td align=\"left\"><font size=\"2\">");          // tax
         out.println("Tax:");
         out.println("</font></td><td align=\"right\"><font size=\"2\">");
         price = String.valueOf(taxtotal);  
         price = setFee(price);
         out.println("$" +price);
         out.println("</font></td></tr>");
         out.println("<tr><td align=\"left\"><font size=\"2\">");          // grand total
         out.println("Total:");
         out.println("</font></td><td align=\"right\"><font size=\"2\">");
         price = String.valueOf(grandtotal);  
         price = setFee(price);
         out.println("$" +price);
         out.println("</font></td></tr>");
         
         out.println("<tr><td align=\"left\" colspan=\"2\"><font size=\"2\">");
         out.println("<BR><BR><BR>Signature______________________________");
         if (club.equals("olyclub")) {
             out.println("<BR><BR>" + club_name);
             out.println("<BR><BR><a href=\"#\" onclick=\"javascript:self.print()\">Have a Nice Day!</a>");
         }
         out.println("</font></td></tr>");        
         out.println("</table></font>");
      }
      
   } else {     // no charges to report
   
      out.println("<font size=\"3\">");
      out.println("<b>No Charges Found</b>");
      out.println("</font>");
      out.println("<font size=\"2\"><br><br>");
      out.println("There were no charges found for this tee time.<br><br>");
      out.println("<form><input type=\"button\" style=\"text-decoration:underline; background:#8B8970\" Value=\"Close\" onClick='self.close()' alt=\"Close\">");
      out.println("</form>");
   }

   out.println("</center></font></body></html>");
   out.close();
      
 }  // end of printReceipt

 
 public static boolean clearPOSFlags (HttpServletRequest req, HttpServletResponse resp, PrintWriter out, HttpSession session, boolean pastTimes, Connection con) {
     
     PreparedStatement pstmt = null;
     ResultSet rs = null;
     
     String club = (String)session.getAttribute("club");      // get club name
     String course = "";
     
     int date = 0;
     int index = 0;
     
     boolean error = false;
     
     if (req.getParameter("course") != null) course = req.getParameter("course");
     
     // If past tee sheets, get date from request, otherwise, get the index and use that to determine the date (should always be index=0)
     if (pastTimes) {
         if (req.getParameter("date") != null) date = Integer.parseInt(req.getParameter("date"));
     } else {
         if (req.getParameter("index") != null) index = Integer.parseInt(req.getParameter("index"));
         date = (int)Utilities.getDate(con, index);   // get the date for the date selected by the index
     }
     
     try {
         
         pstmt = con.prepareStatement("UPDATE " + (pastTimes ? "teepast2" : "teecurr2") + " SET pos1 = IF(pos1 = 2,2,0), pos2 = IF(pos2 = 2,2,0), "
                 + "pos3 = IF(pos3 = 2,2,0), pos4 = IF(pos4 = 2,2,0), pos5 = IF(pos5 = 2,2,0) WHERE date = ? AND courseName = ?");
//         pstmt = con.prepareStatement("UPDATE " + (pastTimes ? "teepast2" : "teecurr2") + " SET pos1=0, pos2=0, pos3=0, pos4=0, pos5=0 WHERE date = ? AND courseName = ?");
         pstmt.clearParameters();
         pstmt.setInt(1, date);
         pstmt.setString(2, course);
         
         pstmt.executeUpdate();
         
     } catch (Exception exc) {
         
         error = true;
         Utilities.logError("Utilities.clearPOSFlags - " + club + " - Error clearing POS flags " + (!course.equals("") ? "for " + course + " course " : "") + "on " + date);
         
     } finally {
         
         try { rs.close(); }
         catch (Exception ignore) { }
         
         try { pstmt.close(); }
         catch (Exception ignore) { }
     }
     
     return error;
 }                    // end of clearPOSFlags

 
 
 // get parmp.mempos and parmp.gstpos if defined in event
 
 private static void getPOScodes (String event, String club, parmPOS parmp, Connection con) {
     
     PreparedStatement stmt = null;
     ResultSet rs = null;
     
     try {
         
         stmt = con.prepareStatement (
            "SELECT mempos, gstpos " +
            "FROM events2b " +
            "WHERE name = ?");

         stmt.clearParameters();       
         stmt.setString(1, event);
         rs = stmt.executeQuery();    

         if (rs.next()) {

            parmp.mempos = rs.getString("mempos");
            parmp.gstpos = rs.getString("gstpos");
         }
         
     } catch (Exception exc) {
         
         Utilities.logError("Utilities.getPOScodes - " + club + " - Error getting POS codes for event - " +event);
         
     } finally {
         
         try { rs.close(); }
         catch (Exception ignore) { }
         
         try { stmt.close(); }
         catch (Exception ignore) { }
     }
     
     return;
 }                    // end of getPOScodes

 


 // Build a file name for a POS file (NorthStar and others?)
 
 private static String getFileName (long date, String course, parmPOS parmp) {
     
      String filename = "";

      //
      //  Break down the date provided
      //
      int year = (int)date / 10000;       
      int month = (int)(date - (year * 10000)) / 100;
      int daynum = (int)date - ((year * 10000) + (month * 100));   

      //
      //  Get the current time
      //
      Calendar cal = new GregorianCalendar();       // get current date/time
      int hr = cal.get(Calendar.HOUR_OF_DAY);       // 24 hr clock (0 - 23)
      int min = cal.get(Calendar.MINUTE);
      int sec = cal.get(Calendar.SECOND);

      //
      //  build the header for the text file - mm/dd/yyyy hh:mm:ss
      //
      //  establish an ASCII filename       (clubname-mmddyyyy-hhmmss.txt)
      //
      String tempNS = String.valueOf(month);

      if (month < 10) {

         tempNS = "0" + String.valueOf(month);
      }

      filename = parmp.club + "-" + tempNS;          // clubname-mm

      parmp.sdate = tempNS + "/";              // mm/

      tempNS = String.valueOf(daynum);

      if (daynum < 10) {

         tempNS = "0" + String.valueOf(daynum);
      }

      filename = filename + tempNS + String.valueOf(year) + "-";                 // clubname-mmddyyyy-  OR FT_mmddyyyy-

      parmp.sdate = parmp.sdate + tempNS + "/" + String.valueOf(year);     // mm/dd/yyyy

      tempNS = String.valueOf(hr);

      if (hr < 10) {

         tempNS = "0" + String.valueOf(hr);
      }

      filename = filename + tempNS;                           // clubname-mmddyy-hh

      parmp.sdate = parmp.sdate + " " + tempNS + ":";         // mm/dd/yyyy hh:

      tempNS = String.valueOf(min);

      if (min < 10) {

         tempNS = "0" + String.valueOf(min);
      }

      filename = filename + tempNS;                           // clubname-mmddyy-hhmm

      parmp.sdate = parmp.sdate + tempNS + ":";               // mm/dd/yyyy hh:mm:

      tempNS = String.valueOf(sec);

      if (sec < 10) {

         tempNS = "0" + String.valueOf(sec);
      }

      filename = filename + tempNS;                      // clubname-mmddyy-hhmmss (".txt" to be added below)

      parmp.sdate = parmp.sdate + tempNS;                // mm/dd/yyyy hh:mm:ss
         
      // Add the first letter of the coursename to the end of the filename to differentiate files built within the same second (automatic custom jobs).
      if (!course.equals("")) {
          filename = filename + "-" + course.substring(0, 1);
      }
   
      return(filename);
 }                    // end of getFileName

 
 
 
 // Check to see if the user waited long enough to try sending charges again
 
 private static boolean checkWaitTime (int last_time, int new_time) {
     
   boolean sufficientWait = false;
   
   int hr = last_time / 10000;        // break down the last time (when charges were sent)
   int min = (last_time - (hr * 10000)) / 100;
   int sec = last_time - ((hr * 10000) + (min * 100));  

   int nhr = new_time / 10000;        // break down the new time (current time)
   int nmin = (new_time - (nhr * 10000)) / 100;
   int nsec = new_time - ((nhr * 10000) + (nmin * 100));  

   //
   //  Has there been at least 60 seconds?
   //
   if (hr > nhr) {    // if we wrapped past midnight
      
      nhr += 24;      // adjust for next day
   }
   
   if (min > nmin) {   // if mins wrapped the next hour
      
      nmin += 60;
      nhr++;
   }
   
   if (sec > nsec) {
      
      nsec += 60;
      nmin++;
   }
   
   new_time = (nhr * 10000) + (nmin * 100) + nsec;     // calculate new time again

   if ((new_time - last_time) > 100) {      // if more than one minute

      sufficientWait = true;   // must be at least one minute
   }
      
   return(sufficientWait);
 }                          // end of checkWaitTime

 
 
 
 // *********************************************************
 //  Strip 1 char from the start of a string
 // *********************************************************

 private final static String stripOne( String s ) {

     String result = s;
     
     try {
         result = result.substring(1);
     } catch (Exception ignore) { }
     
     return result;

 } // end stripOne


 // *********************************************************
 //  Strip 1 char from the END of a string
 // *********************************************************

 private final static String stripLast( String s ) {

     String result = s;
     
     try {
         result = result.substring(0, result.length() - 1);
     } catch (Exception ignore) { }
     
     return result;

 } // end stripLast
 
}
