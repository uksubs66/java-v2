/***************************************************************************************     
 *   Support_port:  This servlet will port a text file containing member & handicap info
 *                  to the database tables.  The text file is generated by the GHIN system.
 *
 *
 ***************************************************************************************
 */
    
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.sql.*;


// foretees imports
import com.foretees.common.FeedBack;
import com.foretees.member.Member;
import com.foretees.member.MemberHelper;


public class Support_port extends HttpServlet {
                           
 String rev = SystemUtils.REVLEVEL;       // Software Revision Level (Version)

 
 public void doPost(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
           
   resp.setContentType("text/html");
   PrintWriter out = resp.getWriter();
        
   Connection con = null;                 // init DB objects
   Statement stmt = null;
   PreparedStatement pstmt = null;
   PreparedStatement pstmt2 = null;
   ResultSet rs = null;
     
   HttpSession session = null; 

   //
   // Make sure user didn't enter illegally
   //
   session = req.getSession(false);  // Get user's session object (no new one)

   if (session == null) {

      invalidUser(out);            // Intruder - reject
      return;
   }

   String support = "support";

   String user = (String)session.getAttribute("user");   // get username

   if (!user.equals( support )) {

      invalidUser(out);            // Intruder - reject
      return;
   }

   //
   // Load the JDBC Driver and connect to DB
   //
   String club = (String)session.getAttribute("club");   // get club name

   try {
      con = dbConn.Connect(club);

   }
   catch (Exception exc) {

      // Error connecting to db....

      out.println("<HTML><HEAD><TITLE>DB Connection Error Received</TITLE></HEAD>");
      out.println("<BODY><CENTER><H3>DB Connection Error</H3>");
      out.println("<BR><BR>Unable to connect to the DB.");
      out.println("<BR>Exception: "+ exc.getMessage());
      out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>.");
      out.println("</CENTER></BODY></HTML>");
      return;
   }

   Member member = new Member();

   String line = "";
   String name = "";
   String name2 = "";
   String fname = "";
   String lname = "";
   String fname2 = "";
   String lname2 = "";
   String fname3 = "";
   String lname3 = "";
   String fname4 = "";
   String lname4 = "";
   String fname5 = "";
   String lname5 = "";
   String fname6 = "";
   String lname6 = "";
   String fname7 = "";
   String lname7 = "";
   String mi = "";
   String mi2 = "";
   String gender = "";
   String gender2 = "";
   String webid = "";
   String ghin = "";         // GHIN number
   String ghin2 = "";
   String mem_id = "";       // user name - 'local number' on ghin system
   String mNum = "";         // member # derived from local number
   String lastmNum = "";     
   String lastmship = "";     
   String holes = "";        // 9 or 18
   String u_hndcp = "";
   String c_hndcp = "";
   String password = "";
   String mship = "";    
   String mship2 = "";    
   String mtype = "";
   String mtype2 = "";
   String status = "";
   String phone = "";
   String phone2 = "";
   String bag = "";
   String bag2 = "";
   String posid = "";
   String email = "";      
   String email2 = "";
   String email3 = "";
   String wc = "";         
   String save = "";
   String temp = "";
   String temp2 = "";
   String temp3 = "";
   String temp4 = "";
   String temp5 = "";
   String temp6 = "";
   String temp7 = "";
   String dep = "";
   String ind = "";
   String prefix = "";
   String suffix = "";
   String suffix2 = "";
   String p1 = "";
   String p2 = "";
   float course = 0;
   float usga = 0;
   float u_hcap = 0;           // usga hndcp
   float c_hcap = 0;          // course hndcp
   int count = 0;
   int tokcount = 0;
   int i = 0;
   int birth = 0;
   int mm = 0;
   int dd = 0;
   int yy = 0;
   int length = 0;
   int dup = 0;
   int primary = 0;
   boolean replace = false;


   //
   //  There are 2 calls to this class:
   //
   //     submit=add - to add or update the member table 
   //
   //     submit=replace - to delete the member table and then replace it
   //
   if (req.getParameter("replace") != null) {

      replace = true;

      try {

         stmt = con.createStatement();        // create a statement

         stmt.executeUpdate("DELETE FROM member2b");          // delete all records from the table

         stmt.close();              // close the stmt

      }
      catch (Exception ignore) {

      }
   }
   //
   //  read in the text file - must be named 'roster.csv'
   //
   boolean failed = false;
   FileReader fr = null;

   try {

      fr = new FileReader("//usr//local//tomcat//webapps//" +club+ "//roster.csv");

   }
   catch (Exception e1) {

      failed = true;
   }

   if (failed == true) {

      try {

         fr = new FileReader("c:\\java\\tomcat\\webapps\\" + club + "\\roster.csv");
         //fr = new FileReader("/Applications/apache-tomcat-5.5.26/webapps/" + club + "/roster.csv");
      }
      catch (Exception e2) {

         out.println("<HTML><HEAD><TITLE>Text File Port Failed</TITLE></HEAD>");
         out.println("<BODY><CENTER><H3>Text File Conversion Failed</H3>");
         out.println("<BR><BR>File Read Failed for  " + club);
         out.println("<BR><BR>Exception Received: "+ e2.getMessage());
         out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
         out.println("</CENTER></BODY></HTML>");
         return;
      }
   }
   
   
   try {

      BufferedReader bfrin = new BufferedReader(fr);
      line = new String();

      //
      while ((line = bfrin.readLine()) != null) {            // get one line of text

         count++;                                            // keep track of line #

         //  parse the line to gather all the info

         StringTokenizer tok = new StringTokenizer( line, "," );     // delimiters are comma

         tokcount = tok.countTokens();


         lname = tok.nextToken();
         fname = tok.nextToken();
//         mi = tok.nextToken();
         mNum = tok.nextToken();
//         mem_id = tok.nextToken();
         mship = tok.nextToken();
//         temp = tok.nextToken();
         mtype = tok.nextToken();
         gender = tok.nextToken();
//         ghin = tok.nextToken();
//         temp = tok.nextToken();
//         webid = tok.nextToken();
   //      posid = tok.nextToken();
       
         // make sure we have the essentials
         
         if (!lname.equals("?") && !lname.equals("") &&
             !fname.equals("?") && !fname.equals("")) {   
    
            mi = "";
//            gender = "";
            webid = "";
            posid = mNum;
            ghin = "";
            bag = "";
            email = "";
            temp = "0";
            phone = "";
            wc = "";
            email2 = "";
            phone2 = "";
           
/*
            if ( tok.countTokens() > 0 ) {

               temp = tok.nextToken();                    // birth date (string)
            }
            if (temp.equalsIgnoreCase("N/A")) {
                
                temp = "0";
            }
    */     
            if ( tok.countTokens() > 0 ) {

               email = tok.nextToken();
            }
            if (email.equals( "?" )) {

               email = "";
            }
     /*  
            if ( tok.countTokens() > 0 ) {

               ghin = tok.nextToken();
            }
            if (ghin.equals( "?" )) {

               ghin = "";
            }
        
            if ( tok.countTokens() > 0 ) {

               bag = tok.nextToken();
            }
            if (bag.equals( "?" )) {

               bag = "";
            }

            if ( tok.countTokens() > 0 ) {

               phone = tok.nextToken();
            }
            if (phone.equals( "?" )) {

               phone = "";
            }

            if ( tok.countTokens() > 0 ) {

               phone2 = tok.nextToken();
            }
            if (phone2.equals( "?" )) {

               phone2 = "";
            } 
           

            if ( tok.countTokens() > 0 ) {

               email2 = tok.nextToken();
            }
            if (email2.equals( "?" )) {

               email2 = "";
            }



            if (gender.equals( "?" )) {

               gender = "M";
            }
            
            if (mi.equals( "?" )) {

               mi = "";
            }
             
            if ( tok.countTokens() > 0 ) {

               webid = tok.nextToken();
            }
            if (webid.equals( "?" )) {

               webid = "";
            }


            if ( tok.countTokens() > 0 ) {

               posid = tok.nextToken();
            }
            if (posid.equals( "?" )) {

               posid = "";
            }

            if ( tok.countTokens() > 0 ) {          // use wc for inactive status indicator !!!

               wc = tok.nextToken();
            }
            if (wc.equals( "?" )) {

               wc = "";
            }

      
*/
      
            name2 = "";      
            mtype2 = "";
            mship2 = "";
            gender2 = "";
            fname2 = "";
            lname2 = "";
            bag2 = "";
            temp2 = "0";
            ghin2 = "";
            email3 = "";


            if ( tok.countTokens() > 0 ) {

               lname2 = tok.nextToken();
            }
            if (lname2.equals( "?" )) {

               lname2 = "";
            }

            if ( tok.countTokens() > 0 ) {         // spouse

               fname2 = tok.nextToken();
            }
            if (fname2.equals( "?" )) {

               fname2 = "";
            }

            if ( tok.countTokens() > 0 ) {

               mtype2 = tok.nextToken();
            }
            if (mtype2.equals( "?" )) {

               mtype2 = "";
            }
            
            if ( tok.countTokens() > 0 ) {

               gender2 = tok.nextToken();
            }
            if (gender2.equals( "?" )) {

               gender2 = "";
            }
/*
            if ( tok.countTokens() > 0 ) {

               mship2 = tok.nextToken();
            }
            if (mship2.equals( "?" )) {

               mship2 = "";
            }
*/
            mship2 = mship;

      
      
            if ( tok.countTokens() > 0 ) {

               email3 = tok.nextToken();
            }
            if (email3.equals( "?" )) {

               email3 = "";
            }
/*

            fname3 = "";
            lname3 = "";
            temp3 = "0";
            fname4 = "";
            lname4 = "";
            temp4 = "0";
            fname5 = "";
            lname5 = "";
            temp5 = "0";
            fname6 = "";
            lname6 = "";
            temp6 = "0";
            fname7 = "";
            lname7 = "";
            temp7 = "0";

            if ( tok.countTokens() > 0 ) {

               temp2 = tok.nextToken();
            }
            if (temp2.equals( "?" )) {

               temp2 = "0";
            }

            if ( tok.countTokens() > 0 ) {

               email3 = tok.nextToken();
            }
            if (email3.equals( "?" )) {

               email3 = "";
            }

          
            if ( tok.countTokens() > 0 ) {         // Dependents

               fname3 = tok.nextToken();
            }
            if (fname3.equals( "?" )) {

               fname3 = "";
            }

            if ( tok.countTokens() > 0 ) {

               lname3 = tok.nextToken();
            }
            if (lname3.equals( "?" )) {

               lname3 = "";
            }

            if ( tok.countTokens() > 0 ) {

               temp3 = tok.nextToken();
            }
            if (temp3.equals( "?" )) {

               temp3 = "0";
            }

          
            if ( tok.countTokens() > 0 ) {         // Dependents

               fname4 = tok.nextToken();
            }
            if (fname4.equals( "?" )) {

               fname4 = "";
            }

            if ( tok.countTokens() > 0 ) {

               lname4 = tok.nextToken();
            }
            if (lname4.equals( "?" )) {

               lname4 = "";
            }

            if ( tok.countTokens() > 0 ) {

               temp4 = tok.nextToken();
            }
            if (temp4.equals( "?" )) {

               temp4 = "0";
            }

            
            if ( tok.countTokens() > 0 ) {         // Dependents

               fname5 = tok.nextToken();
            }
            if (fname5.equals( "?" )) {

               fname5 = "";
            }

            if ( tok.countTokens() > 0 ) {

               lname5 = tok.nextToken();
            }
            if (lname5.equals( "?" )) {

               lname5 = "";
            }

            if ( tok.countTokens() > 0 ) {

               temp5 = tok.nextToken();
            }
            if (temp5.equals( "?" )) {

               temp5 = "0";
            }

            
            if ( tok.countTokens() > 0 ) {         // Dependents

               fname6 = tok.nextToken();
            }
            if (fname6.equals( "?" )) {

               fname6 = "";
            }

            if ( tok.countTokens() > 0 ) {

               lname6 = tok.nextToken();
            }
            if (lname6.equals( "?" )) {

               lname6 = "";
            }

            if ( tok.countTokens() > 0 ) {

               temp6 = tok.nextToken();
            }
            if (temp6.equals( "?" )) {

               temp6 = "0";
            }

            
            if ( tok.countTokens() > 0 ) {         // Dependents

               fname7 = tok.nextToken();
            }
            if (fname7.equals( "?" )) {

               fname7 = "";
            }

            if ( tok.countTokens() > 0 ) {

               lname7 = tok.nextToken();
            }
            if (lname7.equals( "?" )) {

               lname7 = "";
            }

            if ( tok.countTokens() > 0 ) {

               temp7 = tok.nextToken();
            }
            if (temp7.equals( "?" )) {

               temp7 = "0";
            }

            if (ghin.equals( "?" )) {

               ghin = "";
            }


            mtype = toTitleCase( mtype );

            if (mtype.endsWith( "Female" )) {

               mem_id = mem_id + "L";
            }
            mship = toTitleCase( mship );



            if (!temp.equals( "" )) {

               mem_id = stripA2( mem_id );        // remove last digit

               mNum = mem_id;                     // no alpha in mNum
            }

            mem_id = remZero( mem_id );          // strip leading zeros

            if (!temp.equals( "" ) && !temp.equals( "Z" )) {

               mem_id = mem_id + temp;          // restore alpha
            }



            if (posid.equals( "" )) {

               posid = mNum;
            }

            birth = Integer.parseInt(temp);




            int ln = posid.length();               // get length of posid

            if (ln == 1) {

               posid = "00" + posid;

            } else {

               if (ln == 2) {

                  posid = "0" + posid;
               }
            }


            //
            //  Make sure value is alphanumeric (remove space char w/parity (A0 hex) from jonas strings !!!!!!!!!!!!!!!
            //
   //         mNum = stripSP( mNum );        // remove last digit if special char
            mem_id = stripSP( mem_id );        // remove last digit if special char

            while (mem_id.startsWith( "0" )) {    // if starts with a zero

               mem_id = remZeroS(mem_id);           // remove the leading zero
            }

            mNum = mem_id;

            if (mtype.equalsIgnoreCase( "primary" )) {

               if (gender.equalsIgnoreCase( "f" )) {

                  mtype = "Adult Female";

               } else {

                  mtype = "Adult Male";
               }

               save = mship;                  // save the mship type

            } else {

               if (mtype.equalsIgnoreCase( "spouse" )) {

                  if (gender.equalsIgnoreCase( "m" )) {

                     mtype = "Adult Male";

                  } else {

                     mtype = "Adult Female";
                  }

                  mship = save;           // use primary's mship type

               } else {

                  mtype = "Dependent";

                  mship = save;           // use primary's mship type
               }
            }

            
            mem_id = mNum;
            
            if (!mNum.endsWith( "0" ) && !mNum.endsWith( "1" ) && !mNum.endsWith( "2" ) && !mNum.endsWith( "3" ) &&
                !mNum.endsWith( "4" ) && !mNum.endsWith( "5" ) && !mNum.endsWith( "6" ) && !mNum.endsWith( "7" ) &&
                !mNum.endsWith( "8" ) && !mNum.endsWith( "9" )) {

               mNum = stripA(mNum);           // remove trailing alpha
            }

            i = Integer.parseInt(mNum);       // drop leading zeros

            mNum = String.valueOf( i );       // back to string  (0015 = 15)

*/           
            
            lname = lname.trim();
            fname = fname.trim();
            
            
            mem_id = mNum;
     

            if (gender.equalsIgnoreCase("Female")) {
                gender = "F";
            } else {
                gender = "M";
            }
            /***********************************************************
            * Set how to handle birth date input based on format of input:
            * 0: default: no birth provided/no action taken
            * 1: mmddyyyy or mddyyyy (i.e. 01121956 or 1121956)
            * 2: dd-Month-yy (i.e. 12-Jan-56)
            * 3: Month dd/yy (i.e. Jan 12/56)
            * 4: mm.dd.yy or mm/dd/yy or mm/dd/yyyy (i.e. 01.12.56 or 01/12/56 or 01/12/1956)
            ************************************************************/
//            birth = getBirthValue(temp, 0);
            
      //      birth = Integer.valueOf(temp);
            
            primary = 0;

            /*
               //
               //  Junior - set mtype based on age (under 17, and 18 to 23)
               //
               if (birth > 0) {

                  if (birth > 19891122) {

                     if (mtype.endsWith("Female")) {

                        mtype = "Junior 17 Female";

                     } else {

                        mtype = "Junior 17 Male";
                     }

                  } else {

                     if (birth > 19831122) {

                        if (mtype.endsWith("Female")) {

                           mtype = "Junior 18-23 Female";

                        } else {

                           mtype = "Junior 18-23 Male";
                        }                     
                     }
                  }               
               }            
       


            //
            //  set mtype
            //
            if (mem_id.endsWith( "0" ) || mem_id.endsWith( "1" ) || mem_id.endsWith( "2" ) || mem_id.endsWith( "3" ) ||
                mem_id.endsWith( "4" ) || mem_id.endsWith( "5" ) || mem_id.endsWith( "6" ) || mem_id.endsWith( "7" ) ||
                mem_id.endsWith( "8" ) || mem_id.endsWith( "9" )) {

               if (gender.equalsIgnoreCase( "f" )) {

                  mtype = "Adult Female";

               } else {

                  mtype = "Adult Male";
               }

               primary = 0;         // Primary

            } else {

               if (mem_id.endsWith("A")) {

                  if (gender.equalsIgnoreCase( "f" )) {

                     mtype = "Adult Female";

                  } else {

                     mtype = "Adult Male";
                  }

                  primary = 1;         // Spouse

               } else {

                  mtype = "Dependent";
                  primary = 2;            // Dependent
               }
            }
 

            //
            //  Set gender and primary values !!!!
            //
            //       gender = '', M or F
            //       primary = 0 (primary), 1 (spouse), 2-9 (dependents)
            //
            primary = 0;
            
            if (!p1.equals("")) {     // if not primary

               if (p1.equalsIgnoreCase("A")) {

                  primary = 1;
                  
               } else {
                  
                  if (p1.equalsIgnoreCase("B")) {

                     primary = 2;

                  } else {

                     if (p1.equalsIgnoreCase("C")) {

                        primary = 3;

                     } else {

                        if (p1.equalsIgnoreCase("D")) {

                           primary = 4;

                        } else {

                           if (p1.equalsIgnoreCase("E")) {

                              primary = 5;

                           } else {

                              if (p1.equalsIgnoreCase("F")) {

                                 primary = 6;

                              } else {

                                 if (p1.equalsIgnoreCase("G")) {

                                    primary = 7;

                                 } else {

                                    primary = 8;                  
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            
            if (mtype.startsWith("Spouse")) {
               
               primary = 1;
               ind = "B";
            }
   
            if (mtype.startsWith("Depend")) {
               
               //mem_id = mNum + ind;
               
               if (ind.equals("B")) {
                  
                  primary = 2;
                  ind = "C";
               
               } else {
                  
                  if (ind.equals("C")) {

                     primary = 3;
                     ind = "D";

                  } else {

                     if (ind.equals("D")) {

                        primary = 4;
                        ind = "E";

                     } else {

                        if (ind.equals("E")) {

                           primary = 5;
                           ind = "F";

                        } else {

                           if (ind.equals("F")) {

                              primary = 6;
                              ind = "G";
                           }
                        }
                     }
                  }
               }
            }
 
    
            if (!mNum.endsWith( "0" ) && !mNum.endsWith( "1" ) && !mNum.endsWith( "2" ) && !mNum.endsWith( "3" ) &&
                !mNum.endsWith( "4" ) && !mNum.endsWith( "5" ) && !mNum.endsWith( "6" ) && !mNum.endsWith( "7" ) &&
                !mNum.endsWith( "8" ) && !mNum.endsWith( "9" )) {
               
               if (mNum.endsWith("A")) {
                  
                  primary = 1;    // default = spouse
                  
               } else {
                  
                  primary = 2;    // default = dependent
               }

               mNum = stripA2(mNum);           // remove trailing alpha
               
            } else {
               
               primary = 0;       // default = primary
            }

      

                  
            p1 = "";
            
            tok = new StringTokenizer( mNum, "-" );        // extract mNum from 775-m

            if ( tok.countTokens() > 1 ) {

               mNum = tok.nextToken();
               p1 = tok.nextToken();            // pri/spouse indicator
            }
*/

         
/*         
         tok = new StringTokenizer( fname, " " );  

            if ( tok.countTokens() == 2 ) {

               fname = tok.nextToken();
               lname = tok.nextToken();       
               mi = "";
               suffix = "";
               
            } else {
               
               if ( tok.countTokens() == 3 ) {

                  fname = tok.nextToken();
                  mi = tok.nextToken();       
                  lname = tok.nextToken();       
                  suffix = "";

               } else {

                  if ( tok.countTokens() == 4 ) {

                     fname = tok.nextToken();
                     mi = tok.nextToken();       
                     lname = tok.nextToken();       
                     suffix = tok.nextToken();       
                  }
               }
            }
          
          
                    
            if (!mNum.endsWith( "0" ) && !mNum.endsWith( "1" ) && !mNum.endsWith( "2" ) && !mNum.endsWith( "3" ) &&
                !mNum.endsWith( "4" ) && !mNum.endsWith( "5" ) && !mNum.endsWith( "6" ) && !mNum.endsWith( "7" ) &&
                !mNum.endsWith( "8" ) && !mNum.endsWith( "9" )) {

               mNum = stripA(mNum);           // remove trailing alpha
            }
            
            
            
            if (mtype.endsWith("Female")) {
                gender = "F";
            } else {
                gender = "M";
            }

            mem_id = mNum + gender;
            primary = 1;
*/            

            //
            //  Remove any leading or trailing spaces, etc.
            //
            mNum = mNum.trim();
   //         mem_id.trim();
   //         posid.trim();
   //         webid.trim();
            mship = mship.trim();
            mtype = mtype.trim();
            fname = fname.trim();
            lname = lname.trim();

            mship = toTitleCase( mship );
//            mtype = toTitleCase( mtype );

            if (lname.startsWith("\"")) {
                lname = lname.substring(1);
            }          
            if (fname.endsWith("\"")) {
                fname = fname.substring(0, fname.length() - 1);
            }
            
        /*    
            tok = new StringTokenizer( mNum, "-" );        // extract mNum from 409-mmmm

            if ( tok.countTokens() > 1 ) {

               mNum = tok.nextToken();            // skip 409-
               mNum = tok.nextToken();            // get mNum
            }
          
         */            
           
            //
            //  Make sure value is alphanumeric (remove space char w/parity (A0 hex) from jonas strings !!!!!!!!!!!!!!!
            //
 //           mem_id = stripSP( mem_id );        // remove last digit if special char
            
 //           posid = mNum;
          
            
      
//            mNum = stripSP( mNum );            // remove last digit if special char  
//            webid = mNum;
            
/*            
            if (mtype.startsWith("P")) {           // if Primary
               
               primary = 0;
//               mem_id = mNum;
               
               if (gender.equalsIgnoreCase("F")) {
                  
                  mtype = "Primary Female";
                  
               } else {
                  
                  mtype = "Primary Male";
               }
               
            } else {
               
               if (mtype.startsWith("S")) {         // if Spouse

                  primary = 1;
                  //mem_id = mNum + "-1";

                  if (gender.equalsIgnoreCase("M")) {

                     mtype = "Spouse Male";

                  } else {

                     mtype = "Spouse Female";
                  }
                  
               } else {                            // Dependent
                  
                  //mem_id = mNum + "-" +mtype;      //  mmmmm-n (n = 2, 3, 4, etc)
                  
                  if (mem_id.endsWith("B")){
                      primary = 2;
                  }               
                  else if (mem_id.endsWith("C")){
                      primary = 3;
                  }
                  else if (mem_id.endsWith("D")){
                      primary = 4;
                  }
                  else if (mem_id.endsWith("E")){
                      primary = 5;
                  }
                  else if (mem_id.endsWith("F")){
                      primary = 6;
                  }
                  else if (mem_id.endsWith("G")){
                      primary = 7;
                  }
                  else {
                      primary = 8;
                  }
                  
                  mtype = "Dependent";
               }
           }
*/   
            //*****************************************************************************************
            //  Common Processing
            //*****************************************************************************************
            //
            tok = new StringTokenizer( fname, " " );        // check first name for mi

            if ( tok.countTokens() > 1 ) {
               fname = tok.nextToken();
               mi = tok.nextToken();
            }

            fname = toTitleCase( fname );

            suffix = "";

            tok = new StringTokenizer( lname, " _" );        // check last name for suffix

            if ( tok.countTokens() > 1 ) {
               lname = tok.nextToken();
               suffix = tok.nextToken();
            }

            lname = toTitleCase( lname );

            if (!suffix.equals( "" )) {       // if suffix included in lname

               lname = lname + "_" + suffix;
            }

            suffix = "";


            u_hcap = -99;                    // indicate no hndcp
            c_hcap = -99;                    // indicate no c_hndcp

            password = lname;

            tok = new StringTokenizer( password, "_,-" );        // check last name for suffix

            if ( tok.countTokens() > 1 ) {

               password = tok.nextToken();
            }

            //
            //  if lname is less than 4 chars, fill with 1's
            //
            length = password.length();

            while (length < 4) {

               password = password + "1";
               length++;
            }            

            //
            //  verify the email address
            //
            if (!email.equals( "" )) {

               FeedBack feedback = (member.isEmailValid(email));   // verify the address

               if (!feedback.isPositive()) {              // if error

                  email = "";                             // do not use
               }
            }
            if (!email2.equals( "" )) {

               FeedBack feedback = (member.isEmailValid(email2));   // verify the address

               if (!feedback.isPositive()) {              // if error

                  email2 = "";                             // do not use
               }
            }

            //
            //  Truncate the string values to avoid sql error
            //
            if (!mi.equals( "" )) {       // if mi specified

               mi = truncate(mi, 1);           // make sure it is only 1 char
            }
            if (!mem_id.equals( "" )) {

               mem_id = truncate(mem_id, 15);
            }
            if (!password.equals( "" )) {

               password = truncate(password, 15);
            }
            if (!lname.equals( "" )) {

               lname = truncate(lname, 20);
            }
            if (!fname.equals( "" )) {

               fname = truncate(fname, 20);
            }
            if (!mship.equals( "" )) {

               mship = truncate(mship, 30);
            }
            if (!mtype.equals( "" )) {

               mtype = truncate(mtype, 30);
            }
            if (!email.equals( "" )) {

               email = truncate(email, 50);
            }
            if (!email2.equals( "" )) {

               email2 = truncate(email2, 50);
            }
            if (!mNum.equals( "" )) {

               mNum = truncate(mNum, 10);
            }
            if (!ghin.equals( "" )) {

               ghin = truncate(ghin, 16);
            }
            if (!bag.equals( "" )) {

               bag = truncate(bag, 12);
            }
            if (!posid.equals( "" )) {

               posid = truncate(posid, 15);
            }
            if (!phone.equals( "" )) {

               phone = truncate(phone, 24);
            }
            if (!phone2.equals( "" )) {

               phone2 = truncate(phone2, 24);
            }
            if (!suffix.equals( "" )) {

               suffix = truncate(suffix, 4);
            }
            if (!webid.equals( "" )) {

               webid = truncate(webid, 15);
            }

            //
            //  New member - first check if name already exists
            //
            boolean dupName = false;

            pstmt2 = con.prepareStatement (
                     "SELECT inact FROM member2b WHERE name_last = ? AND name_first = ? AND name_mi = ?");

            pstmt2.clearParameters();
            pstmt2.setString(1, lname);
            pstmt2.setString(2, fname);
            pstmt2.setString(3, mi);
            rs = pstmt2.executeQuery();            // execute the prepared stmt

            if (rs.next()) {

               dupName = true;
            }
            pstmt2.close();              // close the stmt


            if (dupName == false) {

               try {

                  //
                  // unique name - add the member
                  //
                  pstmt2 = con.prepareStatement (
                     "INSERT INTO member2b (username, password, name_last, name_first, name_mi, " +
                     "m_ship, m_type, email, count, c_hancap, g_hancap, wc, message, emailOpt, memNum, " +
                     "ghin, locker, bag, birth, posid, msub_type, email2, phone1, phone2, name_pre, name_suf, webid, " +
                     "email_bounced, email2_bounced, gender, pri_indicator) " +
                     "VALUES (?,?,?,?,?,?,?,?,0,?,?,?,'',1,?,?,'',?,?,?,'',?,?,?,'','',?,0,0,?,?)");

                  pstmt2.clearParameters();        // clear the parms
                  pstmt2.setString(1, mem_id);        // put the parm in stmt
                  pstmt2.setString(2, password);
                  pstmt2.setString(3, lname);
                  pstmt2.setString(4, fname);
                  pstmt2.setString(5, mi);
                  pstmt2.setString(6, mship);
                  pstmt2.setString(7, mtype);
                  pstmt2.setString(8, email);
                  pstmt2.setFloat(9, c_hcap);
                  pstmt2.setFloat(10, u_hcap);
                  pstmt2.setString(11, wc);
                  pstmt2.setString(12, mNum);
                  pstmt2.setString(13, ghin);
                  pstmt2.setString(14, bag);
                  pstmt2.setInt(15, birth);
                  pstmt2.setString(16, posid);
                  pstmt2.setString(17, email2);
                  pstmt2.setString(18, phone);
                  pstmt2.setString(19, phone2);
                  pstmt2.setString(20, webid);
                  pstmt2.setString(21, gender);
                  pstmt2.setInt(22, primary);
                  pstmt2.executeUpdate();          // execute the prepared stmt

                  pstmt2.close();              // close the stmt

               }
                 catch (Exception ignore) {
                     out.println("<br>Insert failed for " + lname + ", " + fname);
               }

            }
            else {
                out.println("<br>Duplicate found for " + lname + ", " + fname);
            }

             
            //****************************************************
            //  Check for spouse
            //****************************************************
            //
            if (!fname2.equals( "" )) {

               mi = "";
               email = "";
               email2 = "";
               birth = 0;
               phone = "";
               phone2 = "";

               email = email3;
               
   //            mem_id = mNum + "A";

   //            webid = webid + "A";

   //            lname2 = lname;

               if (lname2.equals( "" )) {

                  lname2 = lname;
               }

               if (mship2.equals("")) {
                  
                  mship2 = mship;
               }

               //
               //  Set gender and primary values !!!!   
               //
               //       gender = '', M or F
               //       primary = 0 (primary), 1 (spouse), 2-9 (dependents)
               //
           //    gender = "F";      // default for spouse
            
               primary = 1;

              
               if (gender2.equalsIgnoreCase( "Female" )) {   // if primary was Male      

                  gender2 = "F";   

               } else {
                  gender2 = "M";
               }
          
               mem_id = mem_id + "1";
               
  
               fname2 = fname2.trim();
               lname2 = lname2.trim();
               
               fname2 = toTitleCase( fname2 );
               lname2 = toTitleCase( lname2 );

             
                
             
               password = lname2;

               tok = new StringTokenizer( password, "_,-" );        // check last name for suffix

               if ( tok.countTokens() > 1 ) {

                  password = tok.nextToken();
               }

               //
               //  if lname is less than 4 chars, fill with 1's
               //
               length = password.length();

               while (length < 4) {

                  password = password + "1";
                  length++;
               }

               //
               //  Truncate the string values to avoid sql error
               //
               if (!mi.equals( "" )) {       // if mi specified

                  mi = truncate(mi, 1);           // make sure it is only 1 char
               }
               if (!mem_id.equals( "" )) {

                  mem_id = truncate(mem_id, 15);
               }
               if (!password.equals( "" )) {

                  password = truncate(password, 15);
               }
               if (!lname2.equals( "" )) {

                  lname2 = truncate(lname2, 20);
               }
               if (!fname2.equals( "" )) {

                  fname2 = truncate(fname2, 20);
               }
               if (!mship.equals( "" )) {

                  mship = truncate(mship, 30);
               }
               if (!mtype2.equals( "" )) {

                  mtype2 = truncate(mtype2, 30);
               }
               if (!email.equals( "" )) {

                  email = truncate(email, 50);
               }
               if (!email2.equals( "" )) {

                  email2 = truncate(email2, 50);
               }
               if (!mNum.equals( "" )) {

                  mNum = truncate(mNum, 10);
               }
               if (!ghin.equals( "" )) {

                  ghin = truncate(ghin, 16);
               }
               if (!bag.equals( "" )) {

                  bag = truncate(bag, 12);
               }
               if (!posid.equals( "" )) {

                  posid = truncate(posid, 15);
               }
               if (!phone.equals( "" )) {

                  phone = truncate(phone, 24);
               }
               if (!phone2.equals( "" )) {

                  phone2 = truncate(phone2, 24);
               }
               if (!suffix.equals( "" )) {

                  suffix = truncate(suffix, 4);
               }
               if (!webid.equals( "" )) {

                  webid = truncate(webid, 15);
               }

               //
               // add member
               //
               pstmt2 = con.prepareStatement (
                  "INSERT INTO member2b (username, password, name_last, name_first, name_mi, " +
                  "m_ship, m_type, email, count, c_hancap, g_hancap, wc, message, emailOpt, memNum, " +
                  "ghin, locker, bag, birth, posid, msub_type, email2, phone1, phone2, name_pre, name_suf, webid, " +
                  "email_bounced, email2_bounced, gender, pri_indicator) " +
                  "VALUES (?,?,?,?,?,?,?,?,0,?,?,?,'',1,?,?,'',?,?,?,'',?,?,?,'','','',0,0,?,?)");

               pstmt2.clearParameters();        // clear the parms
               pstmt2.setString(1, mem_id);        // put the parm in stmt
               pstmt2.setString(2, password);
               pstmt2.setString(3, lname2);
               pstmt2.setString(4, fname2);
               pstmt2.setString(5, mi);
               pstmt2.setString(6, mship2);
               pstmt2.setString(7, mtype2);
               pstmt2.setString(8, email);
               pstmt2.setFloat(9, c_hcap);
               pstmt2.setFloat(10, u_hcap);
               pstmt2.setString(11, wc);
               pstmt2.setString(12, mNum);
               pstmt2.setString(13, ghin2);
               pstmt2.setString(14, bag2);
               pstmt2.setInt(15, birth);
               pstmt2.setString(16, posid);
               pstmt2.setString(17, email2);
               pstmt2.setString(18, phone);
               pstmt2.setString(19, phone2);
               pstmt2.setString(20, gender2);
               pstmt2.setInt(21, primary);
               pstmt2.executeUpdate();          // execute the prepared stmt

               pstmt2.close();              // close the stmt
                  
            }   // end of IF spouse or dependent
    /*    
            
        
            //****************************************************
            //  Check for Dependents
            //****************************************************
            //
            if (!fname3.equals( "" )) {

               mi = "";
               email = "";
               email2 = "";
               birth = 0;
               phone = "";
               phone2 = "";
               gender = "";
               bag = "";
            
               mem_id = mNum + "B";

               if (lname3.equals( "" )) {

                  lname3 = lname;
               }

               primary = 2;
               
               mtype = "Dependent";

               fname3 = toTitleCase( fname3 );
               lname3 = toTitleCase( lname3 );

               password = lname2;

               tok = new StringTokenizer( password, "_,-" );        // check last name for suffix

               if ( tok.countTokens() > 1 ) {

                  password = tok.nextToken();
               }

               //
               //  if lname is less than 4 chars, fill with 1's
               //
               length = password.length();

               while (length < 4) {

                  password = password + "1";
                  length++;
               }

               birth = 0;

               if (!temp3.equals( "" )) {          // if birth provided

                  tok = new StringTokenizer( temp3, "." );   // mm.dd.yy

                  if ( tok.countTokens() > 2 ) {

                     temp = tok.nextToken();
                     mm = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     dd = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     yy = Integer.parseInt(temp);

                     if (yy < 10) {
                        yy = yy + 2000;
                     } else {
                        yy = yy + 1900;
                     }

                     birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
                  }
               }

               //
               // add member
               //
               pstmt2 = con.prepareStatement (
                  "INSERT INTO member2b (username, password, name_last, name_first, name_mi, " +
                  "m_ship, m_type, email, count, c_hancap, g_hancap, wc, message, emailOpt, memNum, " +
                  "ghin, locker, bag, birth, posid, msub_type, email2, phone1, phone2, name_pre, name_suf, webid, " +
                  "email_bounced, email2_bounced, gender, pri_indicator) " +
                  "VALUES (?,?,?,?,?,?,?,?,0,?,?,?,'',1,?,?,'',?,?,?,'',?,?,?,'','','',0,0,?,?)");

               pstmt2.clearParameters();        // clear the parms
               pstmt2.setString(1, mem_id);        // put the parm in stmt
               pstmt2.setString(2, password);
               pstmt2.setString(3, lname3);
               pstmt2.setString(4, fname3);
               pstmt2.setString(5, mi);
               pstmt2.setString(6, mship);
               pstmt2.setString(7, mtype);
               pstmt2.setString(8, email);
               pstmt2.setFloat(9, c_hcap);
               pstmt2.setFloat(10, u_hcap);
               pstmt2.setString(11, wc);
               pstmt2.setString(12, mNum);
               pstmt2.setString(13, ghin);
               pstmt2.setString(14, bag);
               pstmt2.setInt(15, birth);
               pstmt2.setString(16, posid);
               pstmt2.setString(17, email2);
               pstmt2.setString(18, phone);
               pstmt2.setString(19, phone2);
               pstmt2.setString(20, gender);
               pstmt2.setInt(21, primary);
               pstmt2.executeUpdate();          // execute the prepared stmt

               pstmt2.close();              // close the stmt
                  
            }   // end of IF spouse or dependent
        
            
            //****************************************************
            //  Check for Dependents
            //****************************************************
            //
            if (!fname4.equals( "" )) {

               mi = "";
               email = "";
               email2 = "";
               birth = 0;
               phone = "";
               phone2 = "";
               gender = "";
               bag = "";
            
               mem_id = mNum + "C";

               if (lname4.equals( "" )) {

                  lname4 = lname;
               }

               primary = 3;
               
               mtype = "Dependent";

               fname4 = toTitleCase( fname4 );
               lname4 = toTitleCase( lname4 );

               password = lname2;

               tok = new StringTokenizer( password, "_,-" );        // check last name for suffix

               if ( tok.countTokens() > 1 ) {

                  password = tok.nextToken();
               }

               //
               //  if lname is less than 4 chars, fill with 1's
               //
               length = password.length();

               while (length < 4) {

                  password = password + "1";
                  length++;
               }

               birth = 0;

               if (!temp4.equals( "" )) {          // if birth provided

                  tok = new StringTokenizer( temp4, "." );   // mm.dd.yy

                  if ( tok.countTokens() > 2 ) {

                     temp = tok.nextToken();
                     mm = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     dd = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     yy = Integer.parseInt(temp);

                     if (yy < 10) {
                        yy = yy + 2000;
                     } else {
                        yy = yy + 1900;
                     }

                     birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
                  }
               }

               //
               // add member
               //
               pstmt2 = con.prepareStatement (
                  "INSERT INTO member2b (username, password, name_last, name_first, name_mi, " +
                  "m_ship, m_type, email, count, c_hancap, g_hancap, wc, message, emailOpt, memNum, " +
                  "ghin, locker, bag, birth, posid, msub_type, email2, phone1, phone2, name_pre, name_suf, webid, " +
                  "email_bounced, email2_bounced, gender, pri_indicator) " +
                  "VALUES (?,?,?,?,?,?,?,?,0,?,?,?,'',1,?,?,'',?,?,?,'',?,?,?,'','','',0,0,?,?)");

               pstmt2.clearParameters();        // clear the parms
               pstmt2.setString(1, mem_id);        // put the parm in stmt
               pstmt2.setString(2, password);
               pstmt2.setString(3, lname4);
               pstmt2.setString(4, fname4);
               pstmt2.setString(5, mi);
               pstmt2.setString(6, mship);
               pstmt2.setString(7, mtype);
               pstmt2.setString(8, email);
               pstmt2.setFloat(9, c_hcap);
               pstmt2.setFloat(10, u_hcap);
               pstmt2.setString(11, wc);
               pstmt2.setString(12, mNum);
               pstmt2.setString(13, ghin);
               pstmt2.setString(14, bag);
               pstmt2.setInt(15, birth);
               pstmt2.setString(16, posid);
               pstmt2.setString(17, email2);
               pstmt2.setString(18, phone);
               pstmt2.setString(19, phone2);
               pstmt2.setString(20, gender);
               pstmt2.setInt(21, primary);
               pstmt2.executeUpdate();          // execute the prepared stmt

               pstmt2.close();              // close the stmt
                  
            }   // end of IF spouse or dependent
        
            
            //****************************************************
            //  Check for Dependents
            //****************************************************
            //
            if (!fname5.equals( "" )) {

               mi = "";
               email = "";
               email2 = "";
               birth = 0;
               phone = "";
               phone2 = "";
               gender = "";
               bag = "";
            
               mem_id = mNum + "D";

               if (lname5.equals( "" )) {

                  lname5 = lname;
               }

               primary = 4;
               
               mtype = "Dependent";

               fname5 = toTitleCase( fname5 );
               lname5 = toTitleCase( lname5 );

               password = lname2;

               tok = new StringTokenizer( password, "_,-" );        // check last name for suffix

               if ( tok.countTokens() > 1 ) {

                  password = tok.nextToken();
               }

               //
               //  if lname is less than 4 chars, fill with 1's
               //
               length = password.length();

               while (length < 4) {

                  password = password + "1";
                  length++;
               }

               birth = 0;

               if (!temp5.equals( "" )) {          // if birth provided

                  tok = new StringTokenizer( temp5, "." );   // mm.dd.yy

                  if ( tok.countTokens() > 2 ) {

                     temp = tok.nextToken();
                     mm = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     dd = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     yy = Integer.parseInt(temp);

                     if (yy < 10) {
                        yy = yy + 2000;
                     } else {
                        yy = yy + 1900;
                     }

                     birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
                  }
               }

               //
               // add member
               //
               pstmt2 = con.prepareStatement (
                  "INSERT INTO member2b (username, password, name_last, name_first, name_mi, " +
                  "m_ship, m_type, email, count, c_hancap, g_hancap, wc, message, emailOpt, memNum, " +
                  "ghin, locker, bag, birth, posid, msub_type, email2, phone1, phone2, name_pre, name_suf, webid, " +
                  "email_bounced, email2_bounced, gender, pri_indicator) " +
                  "VALUES (?,?,?,?,?,?,?,?,0,?,?,?,'',1,?,?,'',?,?,?,'',?,?,?,'','','',0,0,?,?)");

               pstmt2.clearParameters();        // clear the parms
               pstmt2.setString(1, mem_id);        // put the parm in stmt
               pstmt2.setString(2, password);
               pstmt2.setString(3, lname5);
               pstmt2.setString(4, fname5);
               pstmt2.setString(5, mi);
               pstmt2.setString(6, mship);
               pstmt2.setString(7, mtype);
               pstmt2.setString(8, email);
               pstmt2.setFloat(9, c_hcap);
               pstmt2.setFloat(10, u_hcap);
               pstmt2.setString(11, wc);
               pstmt2.setString(12, mNum);
               pstmt2.setString(13, ghin);
               pstmt2.setString(14, bag);
               pstmt2.setInt(15, birth);
               pstmt2.setString(16, posid);
               pstmt2.setString(17, email2);
               pstmt2.setString(18, phone);
               pstmt2.setString(19, phone2);
               pstmt2.setString(20, gender);
               pstmt2.setInt(21, primary);
               pstmt2.executeUpdate();          // execute the prepared stmt

               pstmt2.close();              // close the stmt
                  
            }   // end of IF spouse or dependent
        
            
            //****************************************************
            //  Check for Dependents
            //****************************************************
            //
            if (!fname6.equals( "" )) {

               mi = "";
               email = "";
               email2 = "";
               birth = 0;
               phone = "";
               phone2 = "";
               gender = "";
               bag = "";
            
               mem_id = mNum + "E";

               if (lname6.equals( "" )) {

                  lname6 = lname;
               }

               primary = 5;
               
               mtype = "Dependent";

               fname6 = toTitleCase( fname6 );
               lname6 = toTitleCase( lname6 );

               password = lname2;

               tok = new StringTokenizer( password, "_,-" );        // check last name for suffix

               if ( tok.countTokens() > 1 ) {

                  password = tok.nextToken();
               }

               //
               //  if lname is less than 4 chars, fill with 1's
               //
               length = password.length();

               while (length < 4) {

                  password = password + "1";
                  length++;
               }

               birth = 0;

               if (!temp6.equals( "" )) {          // if birth provided

                  tok = new StringTokenizer( temp6, "." );   // mm.dd.yy

                  if ( tok.countTokens() > 2 ) {

                     temp = tok.nextToken();
                     mm = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     dd = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     yy = Integer.parseInt(temp);

                     if (yy < 10) {
                        yy = yy + 2000;
                     } else {
                        yy = yy + 1900;
                     }

                     birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
                  }
               }

               //
               // add member
               //
               pstmt2 = con.prepareStatement (
                  "INSERT INTO member2b (username, password, name_last, name_first, name_mi, " +
                  "m_ship, m_type, email, count, c_hancap, g_hancap, wc, message, emailOpt, memNum, " +
                  "ghin, locker, bag, birth, posid, msub_type, email2, phone1, phone2, name_pre, name_suf, webid, " +
                  "email_bounced, email2_bounced, gender, pri_indicator) " +
                  "VALUES (?,?,?,?,?,?,?,?,0,?,?,?,'',1,?,?,'',?,?,?,'',?,?,?,'','','',0,0,?,?)");

               pstmt2.clearParameters();        // clear the parms
               pstmt2.setString(1, mem_id);        // put the parm in stmt
               pstmt2.setString(2, password);
               pstmt2.setString(3, lname6);
               pstmt2.setString(4, fname6);
               pstmt2.setString(5, mi);
               pstmt2.setString(6, mship);
               pstmt2.setString(7, mtype);
               pstmt2.setString(8, email);
               pstmt2.setFloat(9, c_hcap);
               pstmt2.setFloat(10, u_hcap);
               pstmt2.setString(11, wc);
               pstmt2.setString(12, mNum);
               pstmt2.setString(13, ghin);
               pstmt2.setString(14, bag);
               pstmt2.setInt(15, birth);
               pstmt2.setString(16, posid);
               pstmt2.setString(17, email2);
               pstmt2.setString(18, phone);
               pstmt2.setString(19, phone2);
               pstmt2.setString(20, gender);
               pstmt2.setInt(21, primary);
               pstmt2.executeUpdate();          // execute the prepared stmt

               pstmt2.close();              // close the stmt
                  
            }   // end of IF spouse or dependent
        
            
            //****************************************************
            //  Check for Dependents
            //****************************************************
            //
            if (!fname7.equals( "" )) {

               mi = "";
               email = "";
               email2 = "";
               birth = 0;
               phone = "";
               phone2 = "";
               gender = "";
               bag = "";
            
               mem_id = mNum + "F";

               if (lname7.equals( "" )) {

                  lname7 = lname;
               }

               primary = 6;
               
               mtype = "Dependent";

               fname7 = toTitleCase( fname7 );
               lname7 = toTitleCase( lname7 );

               password = lname2;

               tok = new StringTokenizer( password, "_,-" );        // check last name for suffix

               if ( tok.countTokens() > 1 ) {

                  password = tok.nextToken();
               }

               //
               //  if lname is less than 4 chars, fill with 1's
               //
               length = password.length();

               while (length < 4) {

                  password = password + "1";
                  length++;
               }

               birth = 0;

               if (!temp7.equals( "" )) {          // if birth provided

                  tok = new StringTokenizer( temp7, "." );   // mm.dd.yy

                  if ( tok.countTokens() > 2 ) {

                     temp = tok.nextToken();
                     mm = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     dd = Integer.parseInt(temp);
                     temp = tok.nextToken();
                     yy = Integer.parseInt(temp);

                     if (yy < 10) {
                        yy = yy + 2000;
                     } else {
                        yy = yy + 1900;
                     }

                     birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
                  }
               }

               //
               // add member
               //
               pstmt2 = con.prepareStatement (
                  "INSERT INTO member2b (username, password, name_last, name_first, name_mi, " +
                  "m_ship, m_type, email, count, c_hancap, g_hancap, wc, message, emailOpt, memNum, " +
                  "ghin, locker, bag, birth, posid, msub_type, email2, phone1, phone2, name_pre, name_suf, webid, " +
                  "email_bounced, email2_bounced, gender, pri_indicator) " +
                  "VALUES (?,?,?,?,?,?,?,?,0,?,?,?,'',1,?,?,'',?,?,?,'',?,?,?,'','','',0,0,?,?)");

               pstmt2.clearParameters();        // clear the parms
               pstmt2.setString(1, mem_id);        // put the parm in stmt
               pstmt2.setString(2, password);
               pstmt2.setString(3, lname7);
               pstmt2.setString(4, fname7);
               pstmt2.setString(5, mi);
               pstmt2.setString(6, mship);
               pstmt2.setString(7, mtype);
               pstmt2.setString(8, email);
               pstmt2.setFloat(9, c_hcap);
               pstmt2.setFloat(10, u_hcap);
               pstmt2.setString(11, wc);
               pstmt2.setString(12, mNum);
               pstmt2.setString(13, ghin);
               pstmt2.setString(14, bag);
               pstmt2.setInt(15, birth);
               pstmt2.setString(16, posid);
               pstmt2.setString(17, email2);
               pstmt2.setString(18, phone);
               pstmt2.setString(19, phone2);
               pstmt2.setString(20, gender);
               pstmt2.setInt(21, primary);
               pstmt2.executeUpdate();          // execute the prepared stmt

               pstmt2.close();              // close the stmt
                  
            }   // end of IF spouse or dependent
        */
            
         
         }   // end of IF record is ok (name exists)   
         
         
      }   // end of while

   }
   catch (Exception e3) {

      out.println("<HTML><HEAD><TITLE>Text File Port Failed</TITLE></HEAD>");
      out.println("<BODY><CENTER><H3>Text File Conversion Failed</H3>");
      out.println("<BR><BR>DB Add or Update Failed for  " + club);
      out.println("<BR><BR>Exception Received on Line Number " + count + ", Tok Count = " + tokcount + ", memid = " +mem_id+ ", Error = "+ e3.getMessage());
      out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
      out.println("</CENTER></BODY></HTML>");
      return;
   }


/*
   //******************************************************************************************************************

   //
   //  read in the next file - must be named 'roster2.csv'  (email addresses)
   //
   failed = false;

   try {

      fr = new FileReader("//usr//local//tomcat//webapps//" +club+ "//roster2.csv");

   }
   catch (Exception e1) {

      failed = true;
   }

   if (failed == true) {

      try {

         fr = new FileReader("c:\\java\\tomcat\\webapps\\" + club + "\\roster2.csv");

      }
      catch (Exception e2) {

         out.println("<HTML><HEAD><TITLE>Text File Port Failed</TITLE></HEAD>");
         out.println("<BODY><CENTER><H3>Text File Conversion Failed</H3>");
         out.println("<BR><BR>File Read Failed for  " + club);
         out.println("<BR><BR>Exception Received: "+ e2.getMessage());
         out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
         out.println("</CENTER></BODY></HTML>");
         return;
      }
   }

   try {

      BufferedReader bfrin = new BufferedReader(fr);
      line = new String();

      //
      while ((line = bfrin.readLine()) != null) {            // get one line of text

         //  parse the line to gather all the info

         StringTokenizer tok = new StringTokenizer( line, "," );     // delimiters are comma

         mNum = tok.nextToken();
         email = tok.nextToken();

         //
         //  verify the email address
         //
         if (!email.equals( "" )) {

            FeedBack feedback = (member.isEmailValid(email));   // verify the address

            if (!feedback.isPositive()) {              // if error

               email = "";                             // do not use
            }
         }

         if (!email.equals( "" ) && !mNum.equals( "" )) {             // if email provided

            pstmt2 = con.prepareStatement (
                     "UPDATE member2b SET " +
                     "email = ? " +
                     "WHERE email = '' AND memNum = ?");

            pstmt2.clearParameters();
            pstmt2.setString(1, email);
            pstmt2.setString(2, mNum);

            count = pstmt2.executeUpdate();

            pstmt2.close();

            if (count == 0) {                                 // if not updated - record it

               String msg = "Member not found: " +mNum+ ", Email = " +email;

               logError(msg, club);                           // log it
            }
         }

      }   // end of while

   }
   catch (Exception e3) {

      out.println("<HTML><HEAD><TITLE>Text File Port Failed</TITLE></HEAD>");
      out.println("<BODY><CENTER><H3>Roster File Conversion Failed</H3>");
      out.println("<BR><BR>Roster Update Failed for  " + club);
      out.println("<BR><BR>Exception Received: "+ e3.getMessage());
      out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
      out.println("</CENTER></BODY></HTML>");
      return;
   }
*/
  

   out.println("<HTML><HEAD><TITLE>Text File Ported to DB</TITLE></HEAD>");
   out.println("<BODY><CENTER><H3>Text File Conversion Complete</H3>");
   out.println("<BR><BR>The Roster Text File has Been Converted.");
   out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
   out.println("</CENTER></BODY></HTML>");
 }   
                                 
 // *********************************************************
 //  Strip special chars from string
 // *********************************************************

 private final static String stripSP( String s ) {
      
      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length];

      int n = 0;
          
      for ( int i=0; i<ca.length; i++ ) {
         char oldLetter = ca[i];
         if ( oldLetter <= 'z' && oldLetter >= '#' ) {
            ca2[i] = oldLetter;
            n++;                 
         }
      } // end for
         
      char[] ca3 = new char [n];

      for ( int i=0; i<n; i++ ) {
         char oldLetter = ca2[i];
         ca3[i] = oldLetter;
      } // end for

      return new String (ca3);

 } // end stripSP


 // *********************************************************
 //  Strip letter 'A' from end of string
 // *********************************************************

 private final static String stripA( String s ) {

      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length - 1];


      for ( int i=0; i<ca.length; i++ ) {
         char oldLetter = ca[i];
         if ( oldLetter <= '9' ) {
            ca2[i] = oldLetter;
         }
      } // end for

      return new String (ca2);

 } // end stripA


 // *********************************************************
 //  Strip last letter from end of string
 // *********************************************************

 private final static String stripA2( String s ) {

      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length - 1];


      for ( int i=0; i<(ca.length-1); i++ ) {
         char oldLetter = ca[i];
         ca2[i] = oldLetter;
      } // end for

      return new String (ca2);

 } // end stripA2


 // *********************************************************
 //  Convert Upper case names to title case (Bob P...)
 // *********************************************************

 private final static String toTitleCase( String s ) {

      char[] ca = s.toCharArray();

      boolean changed = false;
      boolean capitalise = true;

      for ( int i=0; i<ca.length; i++ ) {
         char oldLetter = ca[i];
         if ( oldLetter <= '/'
              || ':' <= oldLetter && oldLetter <= '?'
              || ']' <= oldLetter && oldLetter <= '`' ) {
            /* whitespace, control chars or punctuation */
            /* Next normal char should be capitalized */
            capitalise = true;
         } else {
            char newLetter  = capitalise
                              ? Character.toUpperCase(oldLetter)
                              : Character.toLowerCase(oldLetter);
            ca[i] = newLetter;
            changed |= (newLetter != oldLetter);
            capitalise = false;
         }
      } // end for

      return new String (ca);

 } // end toTitleCase


 // *********************************************************
 //  Remove leading zeros in member id string
 // *********************************************************

 private final static String remZero( String s ) {


      int memid = 0;
      String newS = "";
           
      //
      //  convert string to int to drop leading zeros
      //
      try {
         memid = Integer.parseInt(s);
      }
      catch (NumberFormatException e) {
         // ignore error
      }

      newS = String.valueOf( memid );      // convert back to string

      return new String (newS);

 } // end remZero


 // *********************************************************
 //  Strip zero '0' from start of alphanumeric string
 // *********************************************************

 private final static String remZeroS( String s ) {

      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length - 1];


      for ( int i=0; i<ca2.length; i++ ) {
         ca2[i] = ca[i+1];
      } // end for

      return new String (ca2);

 } // end remZeroS


 // *********************************************************
 //  Return a string with the specified length from a possibly longer field
 // *********************************************************

 private final static String truncate( String s, int slength ) {

      char[] ca = s.toCharArray();
      char[] ca2 = new char [slength];


      if (slength < ca.length) {       // if string is longer than allowed

         for ( int i=0; i<slength; i++ ) {
            ca2[i] = ca[i];
         } // end for

      } else {

         return (s);
      }

      return new String (ca2);

 } // end truncate


 //************************************************************************
 //  logError - logs error messages to a text file in the club's folder
 //************************************************************************

 private void logError(String msg, String club) {

   String space = "  ";
   int fail = 0;

   try {
      //
      //  Dir path for the real server
      //
      PrintWriter fout1 = new PrintWriter(new FileWriter("//usr//local//tomcat//webapps//" +club+ "//error.txt", true));

      //
      //  Put header line in text file
      //
      fout1.print(new java.util.Date() + space + msg);
      fout1.println();      // output the line

      fout1.close();

   }
   catch (Exception e2) {

      fail = 1;
   }

   //
   //  if above failed, try local pc
   //
   if (fail != 0) {

      try {
         //
         //  dir path for test pc
         //
         PrintWriter fout = new PrintWriter(new FileWriter("c:\\java\\tomcat\\webapps\\" +club+ "\\error.txt", true));

         //
         //  Put header line in text file
         //
         fout.print(new java.util.Date() + space + msg);
         fout.println();      // output the line

         fout.close();
      }
      catch (Exception ignore) {
      }
   }
 }  // end of logError


 // *********************************************************
 // Illegal access by user - force user to login....
 // *********************************************************

 private void invalidUser(PrintWriter out) {

   out.println(SystemUtils.HeadTitle("Access Error - Redirect"));
   out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
   out.println("<hr width=\"40%\">");
   out.println("<BR><H2>Access Error</H2><BR>");
   out.println("<BR><BR>Sorry, you must login before attempting to access these features.<BR>");
   out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
   out.println("</CENTER></BODY></HTML>");

 }


 // *********************************************************
 // Database Error
 // *********************************************************

 private void dbError(PrintWriter out, Exception e) {

   out.println(SystemUtils.HeadTitle("Database Error"));
   out.println("<BODY><CENTER>");
   out.println("<BR><BR><H3>Database Access Error</H3>");
   out.println("<BR><BR>Sorry, we are unable to access the database at this time.");
   out.println("<BR><BR>" + e.getMessage());
   out.println("<BR><BR><a href=\"/" +rev+ "/support_main.htm\">Return</a>");
   out.println("</CENTER></BODY></HTML>");

 }
 
 /***********************************************************
 * Return appropriately formated birth value based on given input format
 * The passed runMode param corresponds to which formatting is being used.
 * The following runModes may be used:
 * 0: default: no birth provided, no action taken
 * 1: mmddyyyy or mddyyyy (i.e. 01121956 or 1121956)
 * 2: dd-Month-yy (i.e. 12-Jan-56)
 * 3: Month dd/yy (i.e. Jan 12/56)
 * 4: mm.dd.yy or mm/dd/yy or mm/dd/yyyy (i.e. 01.12.56 or 01/12/56 or 01/12/1956)
 ************************************************************/
 private int getBirthValue(String temp, int runMode){
     
     int birth = 0;
     int mm = 0;
     int dd = 0;
     int yy = 0;
     
     switch(runMode){
         case 1: 
              if (!temp.equals( "" )) {          // if birth provided
 
                birth = Integer.parseInt(temp);  // mddyyyy or mmddyyyy
 
                if (birth > 9999999) {         // if mmddyyyy
 
                   if (temp.startsWith( "10" )) {
 
                      mm = 10;
                      birth = birth - 10000000;    // strip month
 
                   } else {
 
                      if (temp.startsWith( "11" )) {
 
                         mm = 11;
                         birth = birth - 11000000;    // strip month
 
                      } else {
 
                         if (temp.startsWith( "12" )) {
 
                            mm = 12;
                            birth = birth - 12000000;    // strip month
 
                         } else {
 
                            birth = 0;
                         }
                      }
                   }
 
                } else {             // mddyyyy
 
                    char first = temp.charAt(0);

                    if (first >= 49 && first <= 57){    // first is a value 1-9 (ascii comparison)
                        mm = first;
                        int m = Integer.parseInt(String.valueOf(first));
                        m = m * 1000000;
                        birth -= m;
                    }
                }
 
                if (birth > 0) {                 // if still ok - get dd (now have ddyyyy)
 
                   dd = birth / 10000;
 
                   yy = birth - (dd * 10000);
 
                   birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
                }
             }

             break;
         case 2:
             if (!temp.equals( "" ) && !temp.equals( "0" )) {          // if birth provided

               StringTokenizer tok = new StringTokenizer( temp, " -" );

               if ( tok.countTokens() > 2 ) {                // "12-Jan-56" 

                  temp = tok.nextToken();
                  dd = Integer.parseInt(temp);

                  temp = tok.nextToken();

                  if (temp.startsWith( "Jan" )) {
                     mm = 1;
                  } else {
                   if (temp.startsWith( "Feb" )) {
                      mm = 2;
                   } else {
                    if (temp.startsWith( "Mar" )) {
                       mm = 3;
                    } else {
                     if (temp.startsWith( "Apr" )) {
                        mm = 4;
                     } else {
                      if (temp.startsWith( "May" )) {
                         mm = 5;
                      } else {
                       if (temp.startsWith( "Jun" )) {
                          mm = 6;
                       } else {
                        if (temp.startsWith( "Jul" )) {
                           mm = 7;
                        } else {
                         if (temp.startsWith( "Aug" )) {
                            mm = 8;
                         } else {
                          if (temp.startsWith( "Sep" )) {
                             mm = 9;
                          } else {
                           if (temp.startsWith( "Oct" )) {
                              mm = 10;
                           } else {
                            if (temp.startsWith( "Nov" )) {
                               mm = 11;
                            } else {
                             if (temp.startsWith( "Dec" )) {
                                mm = 12;
                             } else {
                                mm = Integer.parseInt(temp);
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                  temp = tok.nextToken();
                  yy = Integer.parseInt(temp);

                  if (yy < 10) {
                     yy = yy + 2000;
                  } else {
                     yy = yy + 1900;
                  }

                  birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
               }
            }
            break;
         case 3:
            if (!temp.equals( "" ) && !temp.equals( "0" )) {          // if birth provided

               StringTokenizer tok = new StringTokenizer( temp, " /" );

               if ( tok.countTokens() > 2 ) {                // "Jan 12/56" 

                  temp = tok.nextToken();

                  if (temp.startsWith( "Jan" )) {
                     mm = 1;
                  } else {
                   if (temp.startsWith( "Feb" )) {
                      mm = 2;
                   } else {
                    if (temp.startsWith( "Mar" )) {
                       mm = 3;
                    } else {
                     if (temp.startsWith( "Apr" )) {
                        mm = 4;
                     } else {
                      if (temp.startsWith( "May" )) {
                         mm = 5;
                      } else {
                       if (temp.startsWith( "Jun" )) {
                          mm = 6;
                       } else {
                        if (temp.startsWith( "Jul" )) {
                           mm = 7;
                        } else {
                         if (temp.startsWith( "Aug" )) {
                            mm = 8;
                         } else {
                          if (temp.startsWith( "Sep" )) {
                             mm = 9;
                          } else {
                           if (temp.startsWith( "Oct" )) {
                              mm = 10;
                           } else {
                            if (temp.startsWith( "Nov" )) {
                               mm = 11;
                            } else {
                             if (temp.startsWith( "Dec" )) {
                                mm = 12;
                             } else {
                                mm = Integer.parseInt(temp);
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                  temp = tok.nextToken();
                  dd = Integer.parseInt(temp);

                  temp = tok.nextToken();
                  yy = Integer.parseInt(temp);

                  if (yy < 10) {
                     yy = yy + 2000;
                  } else {
                     yy = yy + 1900;
                  }

                  birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
               }
            }
            break;
         case 4:
            if (!temp.equals( "" )) {          // if birth provided

               StringTokenizer tok = new StringTokenizer(temp, "." );   // mm.dd.yy
               if ( tok.countTokens() < 2 ) {
                   tok = new StringTokenizer(temp, "/");    // mm/dd/yy
               }
               if ( tok.countTokens() > 2 ) {

                  temp = tok.nextToken();
                  if (temp.length() == 1) {
                      temp = "0" + temp;
                  }
                  mm = Integer.parseInt(temp);
                  temp = tok.nextToken();
                  if (temp.length() == 1) {
                      temp = "0" + temp;
                  }
                  dd = Integer.parseInt(temp);
                  temp = tok.nextToken();
                  yy = Integer.parseInt(temp);

                  if (yy < 10) {
                     yy = yy + 2000;
                  } else if (yy < 100) {
                     yy = yy + 1900;
                  }

                  birth = (yy * 10000) + (mm * 100) + dd;        // yyyymmdd
               }
            }
            break;
         default:
            break;
     }
     
     return birth;     
 }

}
