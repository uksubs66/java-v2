/***************************************************************************************     
 *   Support_port:  This servlet will port a text file containing member & handicap info
 *                  to the database tables.  The text file is generated by the GHIN system.
 *
 *
 *
 *        *** This is for the new (2003) GHIN system reports!!!!!  ***
 *
 *
 *   Walla Walla CC
 *
 ***************************************************************************************
 */
    
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.sql.*;


public class Support_port extends HttpServlet {
                           
 String rev = SystemUtils.REVLEVEL;       // Software Revision Level (Version)

 
 public void doPost(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
           
   resp.setContentType("text/html");
   PrintWriter out = resp.getWriter();
        
   Connection con = null;                 // init DB objects
   Statement stmt = null;
   ResultSet rs = null;
     
   HttpSession session = null; 

   //
   // Make sure user didn't enter illegally
   //
   session = req.getSession(false);  // Get user's session object (no new one)

   if (session == null) {

      invalidUser(out);            // Intruder - reject
      return;
   }

   String support = "support";

   String user = (String)session.getAttribute("user");   // get username

   if (!user.equals( support )) {

      invalidUser(out);            // Intruder - reject
      return;
   }

   //
   // Load the JDBC Driver and connect to DB
   //
   String club = (String)session.getAttribute("club");   // get club name

   try {
      con = SystemUtils.Connect(club);

   }
   catch (Exception exc) {

      // Error connecting to db....

      out.println("<HTML><HEAD><TITLE>DB Connection Error Received</TITLE></HEAD>");
      out.println("<BODY><CENTER><H3>DB Connection Error</H3>");
      out.println("<BR><BR>Unable to connect to the DB.");
      out.println("<BR>Exception: "+ exc.getMessage());
      out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>.");
      out.println("</CENTER></BODY></HTML>");
      return;
   }

   String line = "";
   String name = "";
   String fname = "";
   String lname = "";
   String mi = "";
   String sex = "";
   String ghin = "";         // GHIN number
   String mem_id = "";       // user name - 'local number' on ghin system
   String mNum = "";         // member # derived from local number
   String mem_type = "";     // 'MENS' 'LADIES' 'MENS 18'  etc.?
   String holes = "";        // 9 or 18
   String u_hndcp = "";
   String c_hndcp = "";
   String password = "";
   String mship = "Regular";    // default
   String mtype = "";
   String status = "";
   String bag = "";
   String email = "";        // default
   String wc = "WA";         // default
   float course = 0;
   float usga = 0;
   float u_hcap = 0;           // usga hndcp
   float c_hcap = 0;          // course hndcp
   int count = 0;
   int i = 0;
   int dup = 0;
   boolean replace = false;


   //
   //  There are 2 calls to this class:
   //
   //     submit=add - to add or update the member table 
   //
   //     submit=replace - to delete the member table and then replace it
   //
   if (req.getParameter("replace") != null) {

      replace = true;

      try {

         stmt = con.createStatement();        // create a statement

         stmt.executeUpdate("DELETE FROM member2b");          // delete all records from the table

         stmt.close();              // close the stmt

      }
      catch (Exception ignore) {

      }
   }

   //
   //  read in the text file - must be named 'ghin.txt'
   //
   boolean failed = false;
   FileReader fr = null;

   try {

      fr = new FileReader("//usr//local//tomcat//webapps//" +club+ "//ghin.txt");

   }
   catch (Exception e1) {

      failed = true;
   }

   if (failed == true) {

      try {

         fr = new FileReader("c:\\java\\tomcat4\\webapps\\" + club + "\\ghin.txt");

      }
      catch (Exception e2) {

         out.println("<HTML><HEAD><TITLE>Text File Port Failed</TITLE></HEAD>");
         out.println("<BODY><CENTER><H3>Text File Conversion Failed</H3>");
         out.println("<BR><BR>File Read Failed for  " + club);
         out.println("<BR><BR>Exception Received: "+ e2.getMessage());
         out.println("<BR><BR> <A HREF=\"/v2/support_main.htm\">Return</A>");
         out.println("</CENTER></BODY></HTML>");
         return;
      }
   }

   try {

      BufferedReader bfrin = new BufferedReader(fr);
      line = new String();

      //   format of each line in the file:
      //
      //      lname, fname, gender, usga, hndcp, local#, ghin#, holes
      //
      //       gender is 'Male' or 'Female'
      //
      while ((line = bfrin.readLine()) != null) {            // get one line of text

         //  parse the line to gather all the info

         StringTokenizer tok = new StringTokenizer( line, "," );     // delimiters are comma

         lname = tok.nextToken();        // last name
         fname = tok.nextToken();        // first name (and mi if there)
         sex = tok.nextToken();          // gender (Male or Female)
         u_hndcp = tok.nextToken();      // usga
         c_hndcp = tok.nextToken();      // course
         mem_id = tok.nextToken();       // member id (for username and member #)
         ghin = tok.nextToken();         // ghin#
         holes = tok.nextToken();          

         mi = "";                       // mi = null if not there

         lname = toTitleCase( lname );                     // convert name to Title Case (Bob P...)

         fname = toTitleCase( fname );                     

         lname = lname.replace(' ', '_');                  // replace spaces in last name with an underscore

         StringTokenizer tok2 = new StringTokenizer( fname, " " );     // delimiters are space

         if ( tok2.countTokens() > 1 ) {     // mi?

            fname = tok2.nextToken();        
            mi = tok2.nextToken();
         }

         //
         //  Remove leading '0' from member id if present
         //
         if (mem_id.startsWith("0")) {

            mem_id = remZero( mem_id );        // strip leading zeroes
         }
           
         //
         //  create member number from member id field 
         //
         //     for primary local# = memid
         //     for spouse local# = memid + 9
         //        i.e.  3210, 32109
         //
         mNum = mem_id;

         if (mem_id.endsWith( "9" )) {

            mNum = stripA( mem_id );
         }

         mtype = "Adult Male";
         if (sex.startsWith( "F" )) {

            mtype = "Adult Female";
         }

         //
         //  determine mship type
         //
         mship = "Regular";      // default

         //
         //  Convert the hndcp's from string to int
         //
         if ((u_hndcp.equalsIgnoreCase("NH")) || (u_hndcp.equalsIgnoreCase("NHL"))) {

            u_hcap = -99;                    // indicate no hndcp

         } else {

            u_hndcp = u_hndcp.replace('L', ' ');    // isolate the handicap - remove spaces and trailing 'L'
            u_hndcp = u_hndcp.replace('H', ' ');    //         or 'H' if present
            u_hndcp = u_hndcp.replace('N', ' ');    //         or 'N' if present
            u_hndcp = u_hndcp.replace('J', ' ');    //         or 'J' if present
            u_hndcp = u_hndcp.replace('R', ' ');    //         or 'R' if present
            u_hndcp = u_hndcp.trim();

            u_hcap = Float.parseFloat(u_hndcp);                   // usga handicap

            if (holes.equals( "9" )) {

               u_hcap = u_hcap + u_hcap;                            // convert to 18 hole hncp
            }

            if ((!u_hndcp.startsWith("+")) && (!u_hndcp.startsWith("-"))) {

               u_hcap = 0 - u_hcap;                       // make it a negative hndcp (normal)
            }
         }

         if ((c_hndcp.equalsIgnoreCase("NH")) || (c_hndcp.equalsIgnoreCase("NHL"))) {

            c_hcap = -99;                    // indicate no c_hndcp

         } else {

            c_hndcp = c_hndcp.replace('L', ' ');    // isolate the handicap - remove spaces and trailing 'L'
            c_hndcp = c_hndcp.replace('H', ' ');    //         or 'H' if present
            c_hndcp = c_hndcp.replace('N', ' ');    //         or 'N' if present
            c_hndcp = c_hndcp.replace('J', ' ');    //         or 'J' if present
            u_hndcp = u_hndcp.replace('R', ' ');    //         or 'R' if present
            c_hndcp = c_hndcp.trim();

            c_hcap = Float.parseFloat(c_hndcp);                   // course handicap

            if (holes.equals( "9" )) {

               c_hcap = c_hcap + c_hcap;                           // convert to 18 hole hncp
            }

            if ((!c_hndcp.startsWith("+")) && (!c_hndcp.startsWith("-"))) {

               c_hcap = 0 - c_hcap;                       // make it a negative hndcp (normal)
            }
         }

         password = lname;

         //
         //  if lname is less than 4 chars, fill with 1's
         //
         int length = password.length();

         while (length < 4) {

            password = password + "1";
            length++;
         }

         //
         //  Add the member
         //
         PreparedStatement pstmt2 = con.prepareStatement (
            "INSERT INTO member2b (username, password, name_last, name_first, name_mi, " +
            "m_ship, m_type, email, count, c_hancap, g_hancap, wc, message, emailOpt, memNum, " +
            "ghin, locker, bag, birth, posid, msub_type) VALUES (?,?,?,?,?,?,?,?,0,?,?,?,'',1,?,?,'',?,0,'','')");

         pstmt2.clearParameters();        // clear the parms
         pstmt2.setString(1, mem_id);        // put the parm in stmt
         pstmt2.setString(2, password);
         pstmt2.setString(3, lname);
         pstmt2.setString(4, fname);
         pstmt2.setString(5, mi);
         pstmt2.setString(6, mship);
         pstmt2.setString(7, mtype);
         pstmt2.setString(8, email);
         pstmt2.setFloat(9, c_hcap);
         pstmt2.setFloat(10, u_hcap);
         pstmt2.setString(11, wc);
         pstmt2.setString(12, mNum);
         pstmt2.setString(13, ghin);
         pstmt2.setString(14, bag);
         pstmt2.executeUpdate();          // execute the prepared stmt

         pstmt2.close();              // close the stmt

      }   // end of while

   }
   catch (Exception e3) {

      out.println("<HTML><HEAD><TITLE>Text File Port Failed</TITLE></HEAD>");
      out.println("<BODY><CENTER><H3>Text File Conversion Failed</H3>");
      out.println("<BR><BR>DB Add or Update Failed for  " + club);
      out.println("<BR><BR>Exception Received: "+ e3.getMessage());
      out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
      out.println("</CENTER></BODY></HTML>");
      return;

   }

   out.println("<HTML><HEAD><TITLE>Text File Ported to DB</TITLE></HEAD>");
   out.println("<BODY><CENTER><H3>Text File Conversion Complete</H3>");
   out.println("<BR><BR>The GHIN Text File has Been Converted.");
   out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
   out.println("</CENTER></BODY></HTML>");

 }   
                                 
 // *********************************************************
 //  Strip letter 'A' from end of string
 // *********************************************************

 private final static String stripA( String s ) {
      
      char[] ca = s.toCharArray();
      char[] ca2 = new char [ca.length - 1];

          
      for ( int i=0; i<ca.length; i++ ) {
         char oldLetter = ca[i];
         if ( oldLetter != '9' ) {
            ca2[i] = oldLetter;
         }
      } // end for
         
      return new String (ca2);

 } // end stripA


 // *********************************************************
 //  Convert Upper case names to title case (Bob P...)
 // *********************************************************

 private final static String toTitleCase( String s ) {

      char[] ca = s.toCharArray();

      boolean changed = false;
      boolean capitalise = true;

      for ( int i=0; i<ca.length; i++ ) {
         char oldLetter = ca[i];
         if ( oldLetter <= '/'
              || ':' <= oldLetter && oldLetter <= '?'
              || ']' <= oldLetter && oldLetter <= '`' ) {
            /* whitespace, control chars or punctuation */
            /* Next normal char should be capitalized */
            capitalise = true;
         } else {
            char newLetter  = capitalise
                              ? Character.toUpperCase(oldLetter)
                              : Character.toLowerCase(oldLetter);
            ca[i] = newLetter;
            changed |= (newLetter != oldLetter);
            capitalise = false;
         }
      } // end for

      return new String (ca);

 } // end toTitleCase


 // *********************************************************
 //  Remove leading zeros in member id string
 // *********************************************************

 private final static String remZero( String s ) {


      int memid = 0;
      String newS = "";
           
      //
      //  convert string to int to drop leading zeros
      //
      try {
         memid = Integer.parseInt(s);
      }
      catch (NumberFormatException e) {
         // ignore error
      }

      newS = String.valueOf( memid );      // convert back to string

      return new String (newS);

 } // end remZero


 // *********************************************************
 // Illegal access by user - force user to login....
 // *********************************************************

 private void invalidUser(PrintWriter out) {

   out.println(SystemUtils.HeadTitle("Access Error - Redirect"));
   out.println("<BODY><CENTER><img src=\"/" +rev+ "/images/foretees.gif\"><BR>");
   out.println("<hr width=\"40%\">");
   out.println("<BR><H2>Access Error</H2><BR>");
   out.println("<BR><BR>Sorry, you must login before attempting to access these features.<BR>");
   out.println("<BR><BR> <A HREF=\"/" +rev+ "/support_main.htm\">Return</A>");
   out.println("</CENTER></BODY></HTML>");

 }


 // *********************************************************
 // Database Error
 // *********************************************************

 private void dbError(PrintWriter out, Exception e) {

   out.println(SystemUtils.HeadTitle("Database Error"));
   out.println("<BODY><CENTER>");
   out.println("<BR><BR><H3>Database Access Error</H3>");
   out.println("<BR><BR>Sorry, we are unable to access the database at this time.");
   out.println("<BR><BR>" + e.getMessage());
   out.println("<BR><BR><a href=\"/" +rev+ "/support_main.htm\">Return</a>");
   out.println("</CENTER></BODY></HTML>");

 }

}
